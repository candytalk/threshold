!function t(e,i,n){function s(o,a){if(!i[o]){if(!e[o]){var l="function"==typeof require&&require;if(!a&&l)return l(o,!0);if(r)return r(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var h=i[o]={exports:{}};e[o][0].call(h.exports,function(t){var i=e[o][1][t];return s(i?i:t)},h,h.exports,t,e,i,n)}return i[o].exports}for(var r="function"==typeof require&&require,o=0;o<n.length;o++)s(n[o]);return s}({"/Users/zhihao/backbone/src/node_modules/backbone.localstorage/backbone.localStorage.js":[function(t,e,i){!function(n,s){"object"==typeof i&&"function"==typeof t?e.exports=s(t("backbone")):"function"==typeof define&&define.amd?define(["backbone"],function(t){return s(t||n.Backbone)}):s(Backbone)}(this,function(t){function e(){return(65536*(1+Math.random())|0).toString(16).substring(1)}function i(){return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}function n(t){return t===Object(t)}function s(t,e){for(var i=t.length;i--;)if(t[i]===e)return!0;return!1}function r(t,e){for(var i in e)t[i]=e[i];return t}function o(t,e){if(null==t)return void 0;var i=t[e];return"function"==typeof i?t[e]():i}return t.LocalStorage=window.Store=function(t,e){if(!this.localStorage)throw"Backbone.localStorage: Environment does not support localStorage.";this.name=t,this.serializer=e||{serialize:function(t){return n(t)?JSON.stringify(t):t},deserialize:function(t){return t&&JSON.parse(t)}};var i=this.localStorage().getItem(this.name);this.records=i&&i.split(",")||[]},r(t.LocalStorage.prototype,{save:function(){this.localStorage().setItem(this.name,this.records.join(","))},create:function(t){return t.id||0===t.id||(t.id=i(),t.set(t.idAttribute,t.id)),this.localStorage().setItem(this._itemName(t.id),this.serializer.serialize(t)),this.records.push(t.id.toString()),this.save(),this.find(t)},update:function(t){this.localStorage().setItem(this._itemName(t.id),this.serializer.serialize(t));var e=t.id.toString();return s(this.records,e)||(this.records.push(e),this.save()),this.find(t)},find:function(t){return this.serializer.deserialize(this.localStorage().getItem(this._itemName(t.id)))},findAll:function(){for(var t,e,i=[],n=0;n<this.records.length;n++)t=this.records[n],e=this.serializer.deserialize(this.localStorage().getItem(this._itemName(t))),null!=e&&i.push(e);return i},destroy:function(t){this.localStorage().removeItem(this._itemName(t.id));for(var e=t.id.toString(),i=0;i<this.records.length;i++)this.records[i]===e&&this.records.splice(i,1);return this.save(),t},localStorage:function(){return localStorage},_clear:function(){var t=this.localStorage(),e=new RegExp("^"+this.name+"-");t.removeItem(this.name);for(var i in t)e.test(i)&&t.removeItem(i);this.records.length=0},_storageSize:function(){return this.localStorage().length},_itemName:function(t){return this.name+"-"+t}}),t.LocalStorage.sync=window.Store.sync=t.localSync=function(e,i,n){var s,r,a=o(i,"localStorage")||o(i.collection,"localStorage"),l=t.$?t.$.Deferred&&t.$.Deferred():t.Deferred&&t.Deferred();try{switch(e){case"read":s=void 0!=i.id?a.find(i):a.findAll();break;case"create":s=a.create(i);break;case"update":s=a.update(i);break;case"delete":s=a.destroy(i)}}catch(u){r=22===u.code&&0===a._storageSize()?"Private browsing is unsupported":u.message}return s?(n&&n.success&&("0.9.10"===t.VERSION?n.success(i,s,n):n.success(s)),l&&l.resolve(s)):(r=r?r:"Record Not Found",n&&n.error&&("0.9.10"===t.VERSION?n.error(i,r,n):n.error(r)),l&&l.reject(r)),n&&n.complete&&n.complete(s),l&&l.promise()},t.ajaxSync=t.sync,t.getSyncMethod=function(e,i){var n=i&&i.ajaxSync;return n||!o(e,"localStorage")&&!o(e.collection,"localStorage")?t.ajaxSync:t.localSync},t.sync=function(e,i,n){return t.getSyncMethod(i,n).apply(this,[e,i,n])},t.LocalStorage})},{backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js"}],"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js":[function(t,e,i){!function(e,n){if("function"==typeof define&&define.amd)define(["underscore","jquery","exports"],function(t,i,s){e.Backbone=n(e,s,t,i)});else if("undefined"!=typeof i){var s=t("underscore");n(e,i,s)}else e.Backbone=n(e,{},e._,e.jQuery||e.Zepto||e.ender||e.$)}(this,function(t,e,i,n){{var s=t.Backbone,r=[],o=(r.push,r.slice);r.splice}e.VERSION="1.1.2",e.$=n,e.noConflict=function(){return t.Backbone=s,this},e.emulateHTTP=!1,e.emulateJSON=!1;var a=e.Events={on:function(t,e,i){if(!u(this,"on",t,[e,i])||!e)return this;this._events||(this._events={});var n=this._events[t]||(this._events[t]=[]);return n.push({callback:e,context:i,ctx:i||this}),this},once:function(t,e,n){if(!u(this,"once",t,[e,n])||!e)return this;var s=this,r=i.once(function(){s.off(t,r),e.apply(this,arguments)});return r._callback=e,this.on(t,r,n)},off:function(t,e,n){var s,r,o,a,l,h,c,d;if(!this._events||!u(this,"off",t,[e,n]))return this;if(!t&&!e&&!n)return this._events=void 0,this;for(a=t?[t]:i.keys(this._events),l=0,h=a.length;h>l;l++)if(t=a[l],o=this._events[t]){if(this._events[t]=s=[],e||n)for(c=0,d=o.length;d>c;c++)r=o[c],(e&&e!==r.callback&&e!==r.callback._callback||n&&n!==r.context)&&s.push(r);s.length||delete this._events[t]}return this},trigger:function(t){if(!this._events)return this;var e=o.call(arguments,1);if(!u(this,"trigger",t,e))return this;var i=this._events[t],n=this._events.all;return i&&h(i,e),n&&h(n,arguments),this},stopListening:function(t,e,n){var s=this._listeningTo;if(!s)return this;var r=!e&&!n;n||"object"!=typeof e||(n=this),t&&((s={})[t._listenId]=t);for(var o in s)t=s[o],t.off(e,n,this),(r||i.isEmpty(t._events))&&delete this._listeningTo[o];return this}},l=/\s+/,u=function(t,e,i,n){if(!i)return!0;if("object"==typeof i){for(var s in i)t[e].apply(t,[s,i[s]].concat(n));return!1}if(l.test(i)){for(var r=i.split(l),o=0,a=r.length;a>o;o++)t[e].apply(t,[r[o]].concat(n));return!1}return!0},h=function(t,e){var i,n=-1,s=t.length,r=e[0],o=e[1],a=e[2];switch(e.length){case 0:for(;++n<s;)(i=t[n]).callback.call(i.ctx);return;case 1:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r);return;case 2:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r,o);return;case 3:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r,o,a);return;default:for(;++n<s;)(i=t[n]).callback.apply(i.ctx,e);return}},c={listenTo:"on",listenToOnce:"once"};i.each(c,function(t,e){a[e]=function(e,n,s){var r=this._listeningTo||(this._listeningTo={}),o=e._listenId||(e._listenId=i.uniqueId("l"));return r[o]=e,s||"object"!=typeof n||(s=this),e[t](n,s,this),this}}),a.bind=a.on,a.unbind=a.off,i.extend(e,a);var d=e.Model=function(t,e){var n=t||{};e||(e={}),this.cid=i.uniqueId("c"),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(n=this.parse(n,e)||{}),n=i.defaults({},n,i.result(this,"defaults")),this.set(n,e),this.changed={},this.initialize.apply(this,arguments)};i.extend(d.prototype,a,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return null!=this.get(t)},set:function(t,e,n){var s,r,o,a,l,u,h,c;if(null==t)return this;if("object"==typeof t?(r=t,n=e):(r={})[t]=e,n||(n={}),!this._validate(r,n))return!1;o=n.unset,l=n.silent,a=[],u=this._changing,this._changing=!0,u||(this._previousAttributes=i.clone(this.attributes),this.changed={}),c=this.attributes,h=this._previousAttributes,this.idAttribute in r&&(this.id=r[this.idAttribute]);for(s in r)e=r[s],i.isEqual(c[s],e)||a.push(s),i.isEqual(h[s],e)?delete this.changed[s]:this.changed[s]=e,o?delete c[s]:c[s]=e;if(!l){a.length&&(this._pending=n);for(var d=0,f=a.length;f>d;d++)this.trigger("change:"+a[d],this,c[a[d]],n)}if(u)return this;if(!l)for(;this._pending;)n=this._pending,this._pending=!1,this.trigger("change",this,n);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var n in this.attributes)e[n]=void 0;return this.set(e,i.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!i.isEmpty(this.changed):i.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?i.clone(this.changed):!1;var e,n=!1,s=this._changing?this._previousAttributes:this.attributes;for(var r in t)i.isEqual(s[r],e=t[r])||((n||(n={}))[r]=e);return n},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=t?i.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=this,n=t.success;return t.success=function(i){return e.set(e.parse(i,t),t)?(n&&n(e,i,t),void e.trigger("sync",e,i,t)):!1},H(this,t),this.sync("read",this,t)},save:function(t,e,n){var s,r,o,a=this.attributes;if(null==t||"object"==typeof t?(s=t,n=e):(s={})[t]=e,n=i.extend({validate:!0},n),s&&!n.wait){if(!this.set(s,n))return!1}else if(!this._validate(s,n))return!1;s&&n.wait&&(this.attributes=i.extend({},a,s)),void 0===n.parse&&(n.parse=!0);var l=this,u=n.success;return n.success=function(t){l.attributes=a;var e=l.parse(t,n);return n.wait&&(e=i.extend(s||{},e)),i.isObject(e)&&!l.set(e,n)?!1:(u&&u(l,t,n),void l.trigger("sync",l,t,n))},H(this,n),r=this.isNew()?"create":n.patch?"patch":"update","patch"===r&&(n.attrs=s),o=this.sync(r,this,n),s&&n.wait&&(this.attributes=a),o},destroy:function(t){t=t?i.clone(t):{};var e=this,n=t.success,s=function(){e.trigger("destroy",e,e.collection,t)};if(t.success=function(i){(t.wait||e.isNew())&&s(),n&&n(e,i,t),e.isNew()||e.trigger("sync",e,i,t)},this.isNew())return t.success(),!1;H(this,t);var r=this.sync("delete",this,t);return t.wait||s(),r},url:function(){var t=i.result(this,"urlRoot")||i.result(this.collection,"url")||O();return this.isNew()?t:t.replace(/([^\/])$/,"$1/")+encodeURIComponent(this.id)},parse:function(t){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend(t||{},{validate:!0}))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=i.extend({},this.attributes,t);var n=this.validationError=this.validate(t,e)||null;return n?(this.trigger("invalid",this,n,i.extend(e,{validationError:n})),!1):!0}});var f=["keys","values","pairs","invert","pick","omit"];i.each(f,function(t){d.prototype[t]=function(){var e=o.call(arguments);return e.unshift(this.attributes),i[t].apply(i,e)}});var p=e.Collection=function(t,e){e||(e={}),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,i.extend({silent:!0},e))},m={add:!0,remove:!0,merge:!0},g={add:!0,remove:!1};i.extend(p.prototype,a,{model:d,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:!1},e,g))},remove:function(t,e){var n=!i.isArray(t);t=n?[t]:i.clone(t),e||(e={});var s,r,o,a;for(s=0,r=t.length;r>s;s++)a=t[s]=this.get(t[s]),a&&(delete this._byId[a.id],delete this._byId[a.cid],o=this.indexOf(a),this.models.splice(o,1),this.length--,e.silent||(e.index=o,a.trigger("remove",a,this,e)),this._removeReference(a,e));return n?t[0]:t},set:function(t,e){e=i.defaults({},e,m),e.parse&&(t=this.parse(t,e));var n=!i.isArray(t);t=n?t?[t]:[]:i.clone(t);var s,r,o,a,l,u,h,c=e.at,f=this.model,p=this.comparator&&null==c&&e.sort!==!1,g=i.isString(this.comparator)?this.comparator:null,v=[],b=[],y={},_=e.add,w=e.merge,x=e.remove,k=!p&&_&&x?[]:!1;for(s=0,r=t.length;r>s;s++){if(l=t[s]||{},o=l instanceof d?a=l:l[f.prototype.idAttribute||"id"],u=this.get(o))x&&(y[u.cid]=!0),w&&(l=l===a?a.attributes:l,e.parse&&(l=u.parse(l,e)),u.set(l,e),p&&!h&&u.hasChanged(g)&&(h=!0)),t[s]=u;else if(_){if(a=t[s]=this._prepareModel(l,e),!a)continue;v.push(a),this._addReference(a,e)}a=u||a,!k||!a.isNew()&&y[a.id]||k.push(a),y[a.id]=!0}if(x){for(s=0,r=this.length;r>s;++s)y[(a=this.models[s]).cid]||b.push(a);b.length&&this.remove(b,e)}if(v.length||k&&k.length)if(p&&(h=!0),this.length+=v.length,null!=c)for(s=0,r=v.length;r>s;s++)this.models.splice(c+s,0,v[s]);else{k&&(this.models.length=0);var C=k||v;for(s=0,r=C.length;r>s;s++)this.models.push(C[s])}if(h&&this.sort({silent:!0}),!e.silent){for(s=0,r=v.length;r>s;s++)(a=v[s]).trigger("add",a,this,e);(h||k&&k.length)&&this.trigger("sort",this,e)}return n?t[0]:t},reset:function(t,e){e||(e={});for(var n=0,s=this.models.length;s>n;n++)this._removeReference(this.models[n],e);return e.previousModels=this.models,this._reset(),t=this.add(t,i.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t),e},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t),e},slice:function(){return o.apply(this.models,arguments)},get:function(t){return null==t?void 0:this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){return i.isEmpty(t)?e?void 0:[]:this[e?"find":"filter"](function(e){for(var i in t)if(t[i]!==e.get(i))return!1;return!0})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return t||(t={}),i.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(i.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return i.invoke(this.models,"get",t)},fetch:function(t){t=t?i.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=t.success,n=this;return t.success=function(i){var s=t.reset?"reset":"set";n[s](i,t),e&&e(n,i,t),n.trigger("sync",n,i,t)},H(this,t),this.sync("read",this,t)},create:function(t,e){if(e=e?i.clone(e):{},!(t=this._prepareModel(t,e)))return!1;e.wait||this.add(t,e);var n=this,s=e.success;return e.success=function(t,i){e.wait&&n.add(t,e),s&&s(t,i,e)},t.save(null,e),t},parse:function(t){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(t instanceof d)return t;e=e?i.clone(e):{},e.collection=this;var n=new this.model(t,e);return n.validationError?(this.trigger("invalid",this,n.validationError,e),!1):n},_addReference:function(t){this._byId[t.cid]=t,null!=t.id&&(this._byId[t.id]=t),t.collection||(t.collection=this),t.on("all",this._onModelEvent,this)},_removeReference:function(t){this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,n){("add"!==t&&"remove"!==t||i===this)&&("destroy"===t&&this.remove(e,n),e&&t==="change:"+e.idAttribute&&(delete this._byId[e.previous(e.idAttribute)],null!=e.id&&(this._byId[e.id]=e)),this.trigger.apply(this,arguments))}});var v=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","difference","indexOf","shuffle","lastIndexOf","isEmpty","chain","sample"];i.each(v,function(t){p.prototype[t]=function(){var e=o.call(arguments);return e.unshift(this.models),i[t].apply(i,e)}});var b=["groupBy","countBy","sortBy","indexBy"];i.each(b,function(t){p.prototype[t]=function(e,n){var s=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,s,n)}});var y=e.View=function(t){this.cid=i.uniqueId("view"),t||(t={}),i.extend(this,i.pick(t,w)),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},_=/^(\S+)\s*(.*)$/,w=["model","collection","el","id","attributes","className","tagName","events"];i.extend(y.prototype,a,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(t,i){return this.$el&&this.undelegateEvents(),this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0],i!==!1&&this.delegateEvents(),this},delegateEvents:function(t){if(!t&&!(t=i.result(this,"events")))return this;this.undelegateEvents();for(var e in t){var n=t[e];if(i.isFunction(n)||(n=this[t[e]]),n){var s=e.match(_),r=s[1],o=s[2];n=i.bind(n,this),r+=".delegateEvents"+this.cid,""===o?this.$el.on(r,n):this.$el.on(r,o,n)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_ensureElement:function(){if(this.el)this.setElement(i.result(this,"el"),!1);else{var t=i.extend({},i.result(this,"attributes"));this.id&&(t.id=i.result(this,"id")),this.className&&(t["class"]=i.result(this,"className"));var n=e.$("<"+i.result(this,"tagName")+">").attr(t);this.setElement(n,!1)}}}),e.sync=function(t,n,s){var r=k[t];i.defaults(s||(s={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var o={type:r,dataType:"json"};if(s.url||(o.url=i.result(n,"url")||O()),null!=s.data||!n||"create"!==t&&"update"!==t&&"patch"!==t||(o.contentType="application/json",o.data=JSON.stringify(s.attrs||n.toJSON(s))),s.emulateJSON&&(o.contentType="application/x-www-form-urlencoded",o.data=o.data?{model:o.data}:{}),s.emulateHTTP&&("PUT"===r||"DELETE"===r||"PATCH"===r)){o.type="POST",s.emulateJSON&&(o.data._method=r);var a=s.beforeSend;s.beforeSend=function(t){return t.setRequestHeader("X-HTTP-Method-Override",r),a?a.apply(this,arguments):void 0}}"GET"===o.type||s.emulateJSON||(o.processData=!1),"PATCH"===o.type&&x&&(o.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var l=s.xhr=e.ajax(i.extend(o,s));return n.trigger("request",n,l,s),l};var x=!("undefined"==typeof window||!window.ActiveXObject||window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent),k={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var C=e.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},D=/\((.*?)\)/g,T=/(\(\?)?:\w+/g,S=/\*\w+/g,M=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend(C.prototype,a,{initialize:function(){},route:function(t,n,s){i.isRegExp(t)||(t=this._routeToRegExp(t)),i.isFunction(n)&&(s=n,n=""),s||(s=this[n]);var r=this;return e.history.route(t,function(i){var o=r._extractParameters(t,i);r.execute(s,o),r.trigger.apply(r,["route:"+n].concat(o)),r.trigger("route",n,o),e.history.trigger("route",r,n,o)}),this},execute:function(t,e){t&&t.apply(this,e)},navigate:function(t,i){return e.history.navigate(t,i),this},_bindRoutes:function(){if(this.routes){this.routes=i.result(this,"routes");for(var t,e=i.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(M,"\\$&").replace(D,"(?:$1)?").replace(T,function(t,e){return e?t:"([^/?]+)"}).replace(S,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var n=t.exec(e).slice(1);return i.map(n,function(t,e){return e===n.length-1?t||null:t?decodeURIComponent(t):null})}});var I=e.History=function(){this.handlers=[],i.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},P=/^[#\/]|\s+$/g,E=/^\/+|\/+$/g,A=/msie [\w.]+/,N=/\/$/,j=/#.*$/;I.started=!1,i.extend(I.prototype,a,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getFragment:function(t,e){if(null==t)if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var i=this.root.replace(N,"");t.indexOf(i)||(t=t.slice(i.length))}else t=this.getHash();return t.replace(P,"")},start:function(t){if(I.started)throw new Error("Backbone.history has already been started");I.started=!0,this.options=i.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var n=this.getFragment(),s=document.documentMode,r=A.exec(navigator.userAgent.toLowerCase())&&(!s||7>=s);if(this.root=("/"+this.root+"/").replace(E,"/"),r&&this._wantsHashChange){var o=e.$('<iframe src="javascript:0" tabindex="-1">');this.iframe=o.hide().appendTo("body")[0].contentWindow,this.navigate(n)}this._hasPushState?e.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!r?e.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=n;var a=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot())return this.fragment=this.getFragment(null,!0),this.location.replace(this.root+"#"+this.fragment),!0;this._hasPushState&&this.atRoot()&&a.hash&&(this.fragment=this.getHash().replace(P,""),this.history.replaceState({},document.title,this.root+this.fragment))}return this.options.silent?void 0:this.loadUrl()},stop:function(){e.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),I.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(){var t=this.getFragment();return t===this.fragment&&this.iframe&&(t=this.getFragment(this.getHash(this.iframe))),t===this.fragment?!1:(this.iframe&&this.navigate(t),void this.loadUrl())},loadUrl:function(t){return t=this.fragment=this.getFragment(t),i.any(this.handlers,function(e){return e.route.test(t)?(e.callback(t),!0):void 0})},navigate:function(t,e){if(!I.started)return!1;e&&e!==!0||(e={trigger:!!e});var i=this.root+(t=this.getFragment(t||""));if(t=t.replace(j,""),this.fragment!==t){if(this.fragment=t,""===t&&"/"!==i&&(i=i.slice(0,-1)),this._hasPushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,i);else{if(!this._wantsHashChange)return this.location.assign(i);this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getFragment(this.getHash(this.iframe))&&(e.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,t,e.replace))}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,i){if(i){var n=t.href.replace(/(javascript:|#).*$/,"");t.replace(n+"#"+e)}else t.hash="#"+e}}),e.history=new I;var z=function(t,e){var n,s=this;n=t&&i.has(t,"constructor")?t.constructor:function(){return s.apply(this,arguments)},i.extend(n,s,e);var r=function(){this.constructor=n};return r.prototype=s.prototype,n.prototype=new r,t&&i.extend(n.prototype,t),n.__super__=s.prototype,n};d.extend=p.extend=C.extend=y.extend=I.extend=z;var O=function(){throw new Error('A "url" property or function must be specified')},H=function(t,e){var i=e.error;e.error=function(n){i&&i(t,n,e),t.trigger("error",t,n,e)}};return e})},{underscore:"/Users/zhihao/backbone/src/node_modules/backbone/node_modules/underscore/underscore.js"}],"/Users/zhihao/backbone/src/node_modules/backbone/node_modules/underscore/underscore.js":[function(t,e,i){(function(){var t=this,n=t._,s=Array.prototype,r=Object.prototype,o=Function.prototype,a=s.push,l=s.slice,u=s.concat,h=r.toString,c=r.hasOwnProperty,d=Array.isArray,f=Object.keys,p=o.bind,m=function(t){return t instanceof m?t:this instanceof m?void(this._wrapped=t):new m(t)};"undefined"!=typeof i?("undefined"!=typeof e&&e.exports&&(i=e.exports=m),i._=m):t._=m,m.VERSION="1.7.0";var g=function(t,e,i){if(void 0===e)return t;switch(null==i?3:i){case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,s){return t.call(e,i,n,s)};case 4:return function(i,n,s,r){return t.call(e,i,n,s,r)}}return function(){return t.apply(e,arguments)}};m.iteratee=function(t,e,i){return null==t?m.identity:m.isFunction(t)?g(t,e,i):m.isObject(t)?m.matches(t):m.property(t)},m.each=m.forEach=function(t,e,i){if(null==t)return t;e=g(e,i);var n,s=t.length;if(s===+s)for(n=0;s>n;n++)e(t[n],n,t);else{var r=m.keys(t);for(n=0,s=r.length;s>n;n++)e(t[r[n]],r[n],t)}return t},m.map=m.collect=function(t,e,i){if(null==t)return[];e=m.iteratee(e,i);for(var n,s=t.length!==+t.length&&m.keys(t),r=(s||t).length,o=Array(r),a=0;r>a;a++)n=s?s[a]:a,o[a]=e(t[n],n,t);return o};var v="Reduce of empty array with no initial value";m.reduce=m.foldl=m.inject=function(t,e,i,n){null==t&&(t=[]),e=g(e,n,4);var s,r=t.length!==+t.length&&m.keys(t),o=(r||t).length,a=0;if(arguments.length<3){if(!o)throw new TypeError(v);i=t[r?r[a++]:a++]}for(;o>a;a++)s=r?r[a]:a,i=e(i,t[s],s,t);return i},m.reduceRight=m.foldr=function(t,e,i,n){null==t&&(t=[]),e=g(e,n,4);var s,r=t.length!==+t.length&&m.keys(t),o=(r||t).length;if(arguments.length<3){if(!o)throw new TypeError(v);i=t[r?r[--o]:--o]}for(;o--;)s=r?r[o]:o,i=e(i,t[s],s,t);return i},m.find=m.detect=function(t,e,i){var n;return e=m.iteratee(e,i),m.some(t,function(t,i,s){return e(t,i,s)?(n=t,!0):void 0}),n},m.filter=m.select=function(t,e,i){var n=[];return null==t?n:(e=m.iteratee(e,i),m.each(t,function(t,i,s){e(t,i,s)&&n.push(t)}),n)},m.reject=function(t,e,i){return m.filter(t,m.negate(m.iteratee(e)),i)},m.every=m.all=function(t,e,i){if(null==t)return!0;e=m.iteratee(e,i);var n,s,r=t.length!==+t.length&&m.keys(t),o=(r||t).length;for(n=0;o>n;n++)if(s=r?r[n]:n,!e(t[s],s,t))return!1;return!0},m.some=m.any=function(t,e,i){if(null==t)return!1;e=m.iteratee(e,i);var n,s,r=t.length!==+t.length&&m.keys(t),o=(r||t).length;for(n=0;o>n;n++)if(s=r?r[n]:n,e(t[s],s,t))return!0;return!1},m.contains=m.include=function(t,e){return null==t?!1:(t.length!==+t.length&&(t=m.values(t)),m.indexOf(t,e)>=0)},m.invoke=function(t,e){var i=l.call(arguments,2),n=m.isFunction(e);return m.map(t,function(t){return(n?e:t[e]).apply(t,i)})},m.pluck=function(t,e){return m.map(t,m.property(e))},m.where=function(t,e){return m.filter(t,m.matches(e))},m.findWhere=function(t,e){return m.find(t,m.matches(e))},m.max=function(t,e,i){var n,s,r=-1/0,o=-1/0;if(null==e&&null!=t){t=t.length===+t.length?t:m.values(t);for(var a=0,l=t.length;l>a;a++)n=t[a],n>r&&(r=n)}else e=m.iteratee(e,i),m.each(t,function(t,i,n){s=e(t,i,n),(s>o||s===-1/0&&r===-1/0)&&(r=t,o=s)});return r},m.min=function(t,e,i){var n,s,r=1/0,o=1/0;if(null==e&&null!=t){t=t.length===+t.length?t:m.values(t);for(var a=0,l=t.length;l>a;a++)n=t[a],r>n&&(r=n)}else e=m.iteratee(e,i),m.each(t,function(t,i,n){s=e(t,i,n),(o>s||1/0===s&&1/0===r)&&(r=t,o=s)});return r},m.shuffle=function(t){for(var e,i=t&&t.length===+t.length?t:m.values(t),n=i.length,s=Array(n),r=0;n>r;r++)e=m.random(0,r),e!==r&&(s[r]=s[e]),s[e]=i[r];return s},m.sample=function(t,e,i){return null==e||i?(t.length!==+t.length&&(t=m.values(t)),t[m.random(t.length-1)]):m.shuffle(t).slice(0,Math.max(0,e))},m.sortBy=function(t,e,i){return e=m.iteratee(e,i),m.pluck(m.map(t,function(t,i,n){return{value:t,index:i,criteria:e(t,i,n)}}).sort(function(t,e){var i=t.criteria,n=e.criteria;if(i!==n){if(i>n||void 0===i)return 1;if(n>i||void 0===n)return-1}return t.index-e.index}),"value")};var b=function(t){return function(e,i,n){var s={};return i=m.iteratee(i,n),m.each(e,function(n,r){var o=i(n,r,e);t(s,n,o)}),s}};m.groupBy=b(function(t,e,i){m.has(t,i)?t[i].push(e):t[i]=[e]}),m.indexBy=b(function(t,e,i){t[i]=e}),m.countBy=b(function(t,e,i){m.has(t,i)?t[i]++:t[i]=1}),m.sortedIndex=function(t,e,i,n){i=m.iteratee(i,n,1);for(var s=i(e),r=0,o=t.length;o>r;){var a=r+o>>>1;i(t[a])<s?r=a+1:o=a}return r},m.toArray=function(t){return t?m.isArray(t)?l.call(t):t.length===+t.length?m.map(t,m.identity):m.values(t):[]},m.size=function(t){return null==t?0:t.length===+t.length?t.length:m.keys(t).length},m.partition=function(t,e,i){e=m.iteratee(e,i);var n=[],s=[];return m.each(t,function(t,i,r){(e(t,i,r)?n:s).push(t)}),[n,s]},m.first=m.head=m.take=function(t,e,i){return null==t?void 0:null==e||i?t[0]:0>e?[]:l.call(t,0,e)},m.initial=function(t,e,i){return l.call(t,0,Math.max(0,t.length-(null==e||i?1:e)))},m.last=function(t,e,i){return null==t?void 0:null==e||i?t[t.length-1]:l.call(t,Math.max(t.length-e,0))},m.rest=m.tail=m.drop=function(t,e,i){return l.call(t,null==e||i?1:e)},m.compact=function(t){return m.filter(t,m.identity)};var y=function(t,e,i,n){if(e&&m.every(t,m.isArray))return u.apply(n,t);for(var s=0,r=t.length;r>s;s++){var o=t[s];m.isArray(o)||m.isArguments(o)?e?a.apply(n,o):y(o,e,i,n):i||n.push(o)}return n};m.flatten=function(t,e){return y(t,e,!1,[])},m.without=function(t){return m.difference(t,l.call(arguments,1))},m.uniq=m.unique=function(t,e,i,n){if(null==t)return[];m.isBoolean(e)||(n=i,i=e,e=!1),null!=i&&(i=m.iteratee(i,n));for(var s=[],r=[],o=0,a=t.length;a>o;o++){var l=t[o];if(e)o&&r===l||s.push(l),r=l;else if(i){var u=i(l,o,t);m.indexOf(r,u)<0&&(r.push(u),s.push(l))}else m.indexOf(s,l)<0&&s.push(l)}return s},m.union=function(){return m.uniq(y(arguments,!0,!0,[]))},m.intersection=function(t){if(null==t)return[];for(var e=[],i=arguments.length,n=0,s=t.length;s>n;n++){var r=t[n];if(!m.contains(e,r)){for(var o=1;i>o&&m.contains(arguments[o],r);o++);o===i&&e.push(r)}}return e},m.difference=function(t){var e=y(l.call(arguments,1),!0,!0,[]);return m.filter(t,function(t){return!m.contains(e,t)})},m.zip=function(t){if(null==t)return[];for(var e=m.max(arguments,"length").length,i=Array(e),n=0;e>n;n++)i[n]=m.pluck(arguments,n);return i},m.object=function(t,e){if(null==t)return{};for(var i={},n=0,s=t.length;s>n;n++)e?i[t[n]]=e[n]:i[t[n][0]]=t[n][1];return i},m.indexOf=function(t,e,i){if(null==t)return-1;var n=0,s=t.length;if(i){if("number"!=typeof i)return n=m.sortedIndex(t,e),t[n]===e?n:-1;n=0>i?Math.max(0,s+i):i}for(;s>n;n++)if(t[n]===e)return n;return-1},m.lastIndexOf=function(t,e,i){if(null==t)return-1;var n=t.length;for("number"==typeof i&&(n=0>i?n+i+1:Math.min(n,i+1));--n>=0;)if(t[n]===e)return n;return-1},m.range=function(t,e,i){arguments.length<=1&&(e=t||0,t=0),i=i||1;for(var n=Math.max(Math.ceil((e-t)/i),0),s=Array(n),r=0;n>r;r++,t+=i)s[r]=t;return s};var _=function(){};m.bind=function(t,e){var i,n;if(p&&t.bind===p)return p.apply(t,l.call(arguments,1));if(!m.isFunction(t))throw new TypeError("Bind must be called on a function");return i=l.call(arguments,2),n=function(){if(!(this instanceof n))return t.apply(e,i.concat(l.call(arguments)));_.prototype=t.prototype;var s=new _;_.prototype=null;var r=t.apply(s,i.concat(l.call(arguments)));return m.isObject(r)?r:s}},m.partial=function(t){var e=l.call(arguments,1);return function(){for(var i=0,n=e.slice(),s=0,r=n.length;r>s;s++)n[s]===m&&(n[s]=arguments[i++]);for(;i<arguments.length;)n.push(arguments[i++]);return t.apply(this,n)}},m.bindAll=function(t){var e,i,n=arguments.length;if(1>=n)throw new Error("bindAll must be passed function names");for(e=1;n>e;e++)i=arguments[e],t[i]=m.bind(t[i],t);return t},m.memoize=function(t,e){var i=function(n){var s=i.cache,r=e?e.apply(this,arguments):n;return m.has(s,r)||(s[r]=t.apply(this,arguments)),s[r]};return i.cache={},i},m.delay=function(t,e){var i=l.call(arguments,2);return setTimeout(function(){return t.apply(null,i)},e)},m.defer=function(t){return m.delay.apply(m,[t,1].concat(l.call(arguments,1)))},m.throttle=function(t,e,i){var n,s,r,o=null,a=0;i||(i={});var l=function(){a=i.leading===!1?0:m.now(),o=null,r=t.apply(n,s),o||(n=s=null)};return function(){var u=m.now();a||i.leading!==!1||(a=u);var h=e-(u-a);return n=this,s=arguments,0>=h||h>e?(clearTimeout(o),o=null,a=u,r=t.apply(n,s),o||(n=s=null)):o||i.trailing===!1||(o=setTimeout(l,h)),r}},m.debounce=function(t,e,i){var n,s,r,o,a,l=function(){var u=m.now()-o;e>u&&u>0?n=setTimeout(l,e-u):(n=null,i||(a=t.apply(r,s),n||(r=s=null)))};return function(){r=this,s=arguments,o=m.now();var u=i&&!n;return n||(n=setTimeout(l,e)),u&&(a=t.apply(r,s),r=s=null),a}},m.wrap=function(t,e){return m.partial(e,t)
},m.negate=function(t){return function(){return!t.apply(this,arguments)}},m.compose=function(){var t=arguments,e=t.length-1;return function(){for(var i=e,n=t[e].apply(this,arguments);i--;)n=t[i].call(this,n);return n}},m.after=function(t,e){return function(){return--t<1?e.apply(this,arguments):void 0}},m.before=function(t,e){var i;return function(){return--t>0?i=e.apply(this,arguments):e=null,i}},m.once=m.partial(m.before,2),m.keys=function(t){if(!m.isObject(t))return[];if(f)return f(t);var e=[];for(var i in t)m.has(t,i)&&e.push(i);return e},m.values=function(t){for(var e=m.keys(t),i=e.length,n=Array(i),s=0;i>s;s++)n[s]=t[e[s]];return n},m.pairs=function(t){for(var e=m.keys(t),i=e.length,n=Array(i),s=0;i>s;s++)n[s]=[e[s],t[e[s]]];return n},m.invert=function(t){for(var e={},i=m.keys(t),n=0,s=i.length;s>n;n++)e[t[i[n]]]=i[n];return e},m.functions=m.methods=function(t){var e=[];for(var i in t)m.isFunction(t[i])&&e.push(i);return e.sort()},m.extend=function(t){if(!m.isObject(t))return t;for(var e,i,n=1,s=arguments.length;s>n;n++){e=arguments[n];for(i in e)c.call(e,i)&&(t[i]=e[i])}return t},m.pick=function(t,e,i){var n,s={};if(null==t)return s;if(m.isFunction(e)){e=g(e,i);for(n in t){var r=t[n];e(r,n,t)&&(s[n]=r)}}else{var o=u.apply([],l.call(arguments,1));t=new Object(t);for(var a=0,h=o.length;h>a;a++)n=o[a],n in t&&(s[n]=t[n])}return s},m.omit=function(t,e,i){if(m.isFunction(e))e=m.negate(e);else{var n=m.map(u.apply([],l.call(arguments,1)),String);e=function(t,e){return!m.contains(n,e)}}return m.pick(t,e,i)},m.defaults=function(t){if(!m.isObject(t))return t;for(var e=1,i=arguments.length;i>e;e++){var n=arguments[e];for(var s in n)void 0===t[s]&&(t[s]=n[s])}return t},m.clone=function(t){return m.isObject(t)?m.isArray(t)?t.slice():m.extend({},t):t},m.tap=function(t,e){return e(t),t};var w=function(t,e,i,n){if(t===e)return 0!==t||1/t===1/e;if(null==t||null==e)return t===e;t instanceof m&&(t=t._wrapped),e instanceof m&&(e=e._wrapped);var s=h.call(t);if(s!==h.call(e))return!1;switch(s){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!==+t?+e!==+e:0===+t?1/+t===1/e:+t===+e;case"[object Date]":case"[object Boolean]":return+t===+e}if("object"!=typeof t||"object"!=typeof e)return!1;for(var r=i.length;r--;)if(i[r]===t)return n[r]===e;var o=t.constructor,a=e.constructor;if(o!==a&&"constructor"in t&&"constructor"in e&&!(m.isFunction(o)&&o instanceof o&&m.isFunction(a)&&a instanceof a))return!1;i.push(t),n.push(e);var l,u;if("[object Array]"===s){if(l=t.length,u=l===e.length)for(;l--&&(u=w(t[l],e[l],i,n)););}else{var c,d=m.keys(t);if(l=d.length,u=m.keys(e).length===l)for(;l--&&(c=d[l],u=m.has(e,c)&&w(t[c],e[c],i,n)););}return i.pop(),n.pop(),u};m.isEqual=function(t,e){return w(t,e,[],[])},m.isEmpty=function(t){if(null==t)return!0;if(m.isArray(t)||m.isString(t)||m.isArguments(t))return 0===t.length;for(var e in t)if(m.has(t,e))return!1;return!0},m.isElement=function(t){return!(!t||1!==t.nodeType)},m.isArray=d||function(t){return"[object Array]"===h.call(t)},m.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},m.each(["Arguments","Function","String","Number","Date","RegExp"],function(t){m["is"+t]=function(e){return h.call(e)==="[object "+t+"]"}}),m.isArguments(arguments)||(m.isArguments=function(t){return m.has(t,"callee")}),"function"!=typeof/./&&(m.isFunction=function(t){return"function"==typeof t||!1}),m.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},m.isNaN=function(t){return m.isNumber(t)&&t!==+t},m.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===h.call(t)},m.isNull=function(t){return null===t},m.isUndefined=function(t){return void 0===t},m.has=function(t,e){return null!=t&&c.call(t,e)},m.noConflict=function(){return t._=n,this},m.identity=function(t){return t},m.constant=function(t){return function(){return t}},m.noop=function(){},m.property=function(t){return function(e){return e[t]}},m.matches=function(t){var e=m.pairs(t),i=e.length;return function(t){if(null==t)return!i;t=new Object(t);for(var n=0;i>n;n++){var s=e[n],r=s[0];if(s[1]!==t[r]||!(r in t))return!1}return!0}},m.times=function(t,e,i){var n=Array(Math.max(0,t));e=g(e,i,1);for(var s=0;t>s;s++)n[s]=e(s);return n},m.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},m.now=Date.now||function(){return(new Date).getTime()};var x={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},k=m.invert(x),C=function(t){var e=function(e){return t[e]},i="(?:"+m.keys(t).join("|")+")",n=RegExp(i),s=RegExp(i,"g");return function(t){return t=null==t?"":""+t,n.test(t)?t.replace(s,e):t}};m.escape=C(x),m.unescape=C(k),m.result=function(t,e){if(null==t)return void 0;var i=t[e];return m.isFunction(i)?t[e]():i};var D=0;m.uniqueId=function(t){var e=++D+"";return t?t+e:e},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var T=/(.)^/,S={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},M=/\\|'|\r|\n|\u2028|\u2029/g,I=function(t){return"\\"+S[t]};m.template=function(t,e,i){!e&&i&&(e=i),e=m.defaults({},e,m.templateSettings);var n=RegExp([(e.escape||T).source,(e.interpolate||T).source,(e.evaluate||T).source].join("|")+"|$","g"),s=0,r="__p+='";t.replace(n,function(e,i,n,o,a){return r+=t.slice(s,a).replace(M,I),s=a+e.length,i?r+="'+\n((__t=("+i+"))==null?'':_.escape(__t))+\n'":n?r+="'+\n((__t=("+n+"))==null?'':__t)+\n'":o&&(r+="';\n"+o+"\n__p+='"),e}),r+="';\n",e.variable||(r="with(obj||{}){\n"+r+"}\n"),r="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+r+"return __p;\n";try{var o=new Function(e.variable||"obj","_",r)}catch(a){throw a.source=r,a}var l=function(t){return o.call(this,t,m)},u=e.variable||"obj";return l.source="function("+u+"){\n"+r+"}",l},m.chain=function(t){var e=m(t);return e._chain=!0,e};var P=function(t){return this._chain?m(t).chain():t};m.mixin=function(t){m.each(m.functions(t),function(e){var i=m[e]=t[e];m.prototype[e]=function(){var t=[this._wrapped];return a.apply(t,arguments),P.call(this,i.apply(m,t))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=s[t];m.prototype[t]=function(){var i=this._wrapped;return e.apply(i,arguments),"shift"!==t&&"splice"!==t||0!==i.length||delete i[0],P.call(this,i)}}),m.each(["concat","join","slice"],function(t){var e=s[t];m.prototype[t]=function(){return P.call(this,e.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}).call(this)},{}],"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars.runtime.js":[function(t,e,i){"use strict";var n=t("./handlebars/base"),s=t("./handlebars/safe-string")["default"],r=t("./handlebars/exception")["default"],o=t("./handlebars/utils"),a=t("./handlebars/runtime"),l=function(){var t=new n.HandlebarsEnvironment;return o.extend(t,n),t.SafeString=s,t.Exception=r,t.Utils=o,t.escapeExpression=o.escapeExpression,t.VM=a,t.template=function(e){return a.template(e,t)},t},u=l();u.create=l,u["default"]=u,i["default"]=u},{"./handlebars/base":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/base.js","./handlebars/exception":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/exception.js","./handlebars/runtime":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/runtime.js","./handlebars/safe-string":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/safe-string.js","./handlebars/utils":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/base.js":[function(t,e,i){"use strict";function n(t,e){this.helpers=t||{},this.partials=e||{},s(this)}function s(t){t.registerHelper("helperMissing",function(){if(1===arguments.length)return void 0;throw new o("Missing helper: '"+arguments[arguments.length-1].name+"'")}),t.registerHelper("blockHelperMissing",function(e,i){var n=i.inverse,s=i.fn;if(e===!0)return s(this);if(e===!1||null==e)return n(this);if(h(e))return e.length>0?(i.ids&&(i.ids=[i.name]),t.helpers.each(e,i)):n(this);if(i.data&&i.ids){var o=g(i.data);o.contextPath=r.appendContextPath(i.data.contextPath,i.name),i={data:o}}return s(e,i)}),t.registerHelper("each",function(t,e){if(!e)throw new o("Must pass iterator to #each");var i,n,s=e.fn,a=e.inverse,l=0,u="";if(e.data&&e.ids&&(n=r.appendContextPath(e.data.contextPath,e.ids[0])+"."),c(t)&&(t=t.call(this)),e.data&&(i=g(e.data)),t&&"object"==typeof t)if(h(t))for(var d=t.length;d>l;l++)i&&(i.index=l,i.first=0===l,i.last=l===t.length-1,n&&(i.contextPath=n+l)),u+=s(t[l],{data:i});else for(var f in t)t.hasOwnProperty(f)&&(i&&(i.key=f,i.index=l,i.first=0===l,n&&(i.contextPath=n+f)),u+=s(t[f],{data:i}),l++);return 0===l&&(u=a(this)),u}),t.registerHelper("if",function(t,e){return c(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||r.isEmpty(t)?e.inverse(this):e.fn(this)}),t.registerHelper("unless",function(e,i){return t.helpers["if"].call(this,e,{fn:i.inverse,inverse:i.fn,hash:i.hash})}),t.registerHelper("with",function(t,e){c(t)&&(t=t.call(this));var i=e.fn;if(r.isEmpty(t))return e.inverse(this);if(e.data&&e.ids){var n=g(e.data);n.contextPath=r.appendContextPath(e.data.contextPath,e.ids[0]),e={data:n}}return i(t,e)}),t.registerHelper("log",function(e,i){var n=i.data&&null!=i.data.level?parseInt(i.data.level,10):1;t.log(n,e)}),t.registerHelper("lookup",function(t,e){return t&&t[e]})}var r=t("./utils"),o=t("./exception")["default"],a="2.0.0";i.VERSION=a;var l=6;i.COMPILER_REVISION=l;var u={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1"};i.REVISION_CHANGES=u;var h=r.isArray,c=r.isFunction,d=r.toString,f="[object Object]";i.HandlebarsEnvironment=n,n.prototype={constructor:n,logger:p,log:m,registerHelper:function(t,e){if(d.call(t)===f){if(e)throw new o("Arg not supported with multiple helpers");r.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){d.call(t)===f?r.extend(this.partials,t):this.partials[t]=e},unregisterPartial:function(t){delete this.partials[t]}};var p={methodMap:{0:"debug",1:"info",2:"warn",3:"error"},DEBUG:0,INFO:1,WARN:2,ERROR:3,level:3,log:function(t,e){if(p.level<=t){var i=p.methodMap[t];"undefined"!=typeof console&&console[i]&&console[i].call(console,e)}}};i.logger=p;var m=p.log;i.log=m;var g=function(t){var e=r.extend({},t);return e._parent=t,e};i.createFrame=g},{"./exception":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/exception.js":[function(t,e,i){"use strict";function n(t,e){var i;e&&e.firstLine&&(i=e.firstLine,t+=" - "+i+":"+e.firstColumn);for(var n=Error.prototype.constructor.call(this,t),r=0;r<s.length;r++)this[s[r]]=n[s[r]];i&&(this.lineNumber=i,this.column=e.firstColumn)}var s=["description","fileName","lineNumber","message","name","number","stack"];n.prototype=new Error,i["default"]=n},{}],"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/runtime.js":[function(t,e,i){"use strict";function n(t){var e=t&&t[0]||1,i=c;if(e!==i){if(i>e){var n=d[i],s=d[e];throw new h("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+n+") or downgrade your runtime to an older version ("+s+").")}throw new h("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+t[1]+").")}}function s(t,e){if(!e)throw new h("No environment passed to template");if(!t||!t.main)throw new h("Unknown template object: "+typeof t);e.VM.checkRevision(t.compiler);var i=function(i,n,s,r,o,a,l,c,d){o&&(r=u.extend({},r,o));var f=e.VM.invokePartial.call(this,i,s,r,a,l,c,d);if(null==f&&e.compile){var p={helpers:a,partials:l,data:c,depths:d};l[s]=e.compile(i,{data:void 0!==c,compat:t.compat},e),f=l[s](r,p)}if(null!=f){if(n){for(var m=f.split("\n"),g=0,v=m.length;v>g&&(m[g]||g+1!==v);g++)m[g]=n+m[g];f=m.join("\n")}return f}throw new h("The partial "+s+" could not be compiled when running in runtime-only mode")},n={lookup:function(t,e){for(var i=t.length,n=0;i>n;n++)if(t[n]&&null!=t[n][e])return t[n][e]},lambda:function(t,e){return"function"==typeof t?t.call(e):t},escapeExpression:u.escapeExpression,invokePartial:i,fn:function(e){return t[e]},programs:[],program:function(t,e,i){var n=this.programs[t],s=this.fn(t);return e||i?n=r(this,t,s,e,i):n||(n=this.programs[t]=r(this,t,s)),n},data:function(t,e){for(;t&&e--;)t=t._parent;return t},merge:function(t,e){var i=t||e;return t&&e&&t!==e&&(i=u.extend({},e,t)),i},noop:e.VM.noop,compilerInfo:t.compiler},s=function(e,i){i=i||{};var r=i.data;s._setup(i),!i.partial&&t.useData&&(r=l(e,r));var o;return t.useDepths&&(o=i.depths?[e].concat(i.depths):[e]),t.main.call(n,e,n.helpers,n.partials,r,o)};return s.isTop=!0,s._setup=function(i){i.partial?(n.helpers=i.helpers,n.partials=i.partials):(n.helpers=n.merge(i.helpers,e.helpers),t.usePartial&&(n.partials=n.merge(i.partials,e.partials)))},s._child=function(e,i,s){if(t.useDepths&&!s)throw new h("must pass parent depths");return r(n,e,t[e],i,s)},s}function r(t,e,i,n,s){var r=function(e,r){return r=r||{},i.call(t,e,t.helpers,t.partials,r.data||n,s&&[e].concat(s))};return r.program=e,r.depth=s?s.length:0,r}function o(t,e,i,n,s,r,o){var a={partial:!0,helpers:n,partials:s,data:r,depths:o};if(void 0===t)throw new h("The partial "+e+" could not be found");return t instanceof Function?t(i,a):void 0}function a(){return""}function l(t,e){return e&&"root"in e||(e=e?f(e):{},e.root=t),e}var u=t("./utils"),h=t("./exception")["default"],c=t("./base").COMPILER_REVISION,d=t("./base").REVISION_CHANGES,f=t("./base").createFrame;i.checkRevision=n,i.template=s,i.program=r,i.invokePartial=o,i.noop=a},{"./base":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/base.js","./exception":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/safe-string.js":[function(t,e,i){"use strict";function n(t){this.string=t}n.prototype.toString=function(){return""+this.string},i["default"]=n},{}],"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/utils.js":[function(t,e,i){"use strict";function n(t){return u[t]}function s(t){for(var e=1;e<arguments.length;e++)for(var i in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],i)&&(t[i]=arguments[e][i]);return t}function r(t){return t instanceof l?t.toString():null==t?"":t?(t=""+t,c.test(t)?t.replace(h,n):t):t+""}function o(t){return t||0===t?p(t)&&0===t.length?!0:!1:!0}function a(t,e){return(t?t+".":"")+e}var l=t("./safe-string")["default"],u={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},h=/[&<>"'`]/g,c=/[&<>"'`]/;i.extend=s;var d=Object.prototype.toString;i.toString=d;var f=function(t){return"function"==typeof t};f(/x/)&&(f=function(t){return"function"==typeof t&&"[object Function]"===d.call(t)});var f;i.isFunction=f;var p=Array.isArray||function(t){return t&&"object"==typeof t?"[object Array]"===d.call(t):!1};i.isArray=p,i.escapeExpression=r,i.isEmpty=o,i.appendContextPath=a},{"./safe-string":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars/safe-string.js"}],"/Users/zhihao/backbone/src/node_modules/handlebars/runtime.js":[function(t,e){e.exports=t("./dist/cjs/handlebars.runtime")},{"./dist/cjs/handlebars.runtime":"/Users/zhihao/backbone/src/node_modules/handlebars/dist/cjs/handlebars.runtime.js"}],"/Users/zhihao/backbone/src/node_modules/hbsfy/runtime.js":[function(t,e){e.exports=t("handlebars/runtime")["default"]},{"handlebars/runtime":"/Users/zhihao/backbone/src/node_modules/handlebars/runtime.js"}],"/Users/zhihao/backbone/src/node_modules/jquery-ui/jquery-ui.js":[function(t){var e=t("jquery");!function(t,e){function i(e,i){var s,r,o,a=e.nodeName.toLowerCase();return"area"===a?(s=e.parentNode,r=s.name,e.href&&r&&"map"===s.nodeName.toLowerCase()?(o=t("img[usemap=#"+r+"]")[0],!!o&&n(o)):!1):(/input|select|textarea|button|object/.test(a)?!e.disabled:"a"===a?e.href||i:i)&&n(e)}function n(e){return t.expr.filters.visible(e)&&!t(e).parents().addBack().filter(function(){return"hidden"===t.css(this,"visibility")}).length}var s=0,r=/^ui-id-\d+$/;t.ui=t.ui||{},t.extend(t.ui,{version:"1.10.3",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),t.fn.extend({focus:function(e){return function(i,n){return"number"==typeof i?this.each(function(){var e=this;setTimeout(function(){t(e).focus(),n&&n.call(e)},i)}):e.apply(this,arguments)}}(t.fn.focus),scrollParent:function(){var e;return e=t.ui.ie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(t.css(this,"position"))&&/(auto|scroll)/.test(t.css(this,"overflow")+t.css(this,"overflow-y")+t.css(this,"overflow-x"))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(t.css(this,"overflow")+t.css(this,"overflow-y")+t.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!e.length?t(document):e},zIndex:function(i){if(i!==e)return this.css("zIndex",i);if(this.length)for(var n,s,r=t(this[0]);r.length&&r[0]!==document;){if(n=r.css("position"),("absolute"===n||"relative"===n||"fixed"===n)&&(s=parseInt(r.css("zIndex"),10),!isNaN(s)&&0!==s))return s;r=r.parent()}return 0},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++s)})},removeUniqueId:function(){return this.each(function(){r.test(this.id)&&t(this).removeAttr("id")})}}),t.extend(t.expr[":"],{data:t.expr.createPseudo?t.expr.createPseudo(function(e){return function(i){return!!t.data(i,e)}}):function(e,i,n){return!!t.data(e,n[3])},focusable:function(e){return i(e,!isNaN(t.attr(e,"tabindex")))},tabbable:function(e){var n=t.attr(e,"tabindex"),s=isNaN(n);return(s||n>=0)&&i(e,!s)}}),t("<a>").outerWidth(1).jquery||t.each(["Width","Height"],function(i,n){function s(e,i,n,s){return t.each(r,function(){i-=parseFloat(t.css(e,"padding"+this))||0,n&&(i-=parseFloat(t.css(e,"border"+this+"Width"))||0),s&&(i-=parseFloat(t.css(e,"margin"+this))||0)}),i}var r="Width"===n?["Left","Right"]:["Top","Bottom"],o=n.toLowerCase(),a={innerWidth:t.fn.innerWidth,innerHeight:t.fn.innerHeight,outerWidth:t.fn.outerWidth,outerHeight:t.fn.outerHeight};t.fn["inner"+n]=function(i){return i===e?a["inner"+n].call(this):this.each(function(){t(this).css(o,s(this,i)+"px")})},t.fn["outer"+n]=function(e,i){return"number"!=typeof e?a["outer"+n].call(this,e):this.each(function(){t(this).css(o,s(this,e,!0,i)+"px")})}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(t.fn.removeData=function(e){return function(i){return arguments.length?e.call(this,t.camelCase(i)):e.call(this)}}(t.fn.removeData)),t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),t.support.selectstart="onselectstart"in document.createElement("div"),t.fn.extend({disableSelection:function(){return this.bind((t.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(t){t.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),t.extend(t.ui,{plugin:{add:function(e,i,n){var s,r=t.ui[e].prototype;for(s in n)r.plugins[s]=r.plugins[s]||[],r.plugins[s].push([i,n[s]])},call:function(t,e,i){var n,s=t.plugins[e];if(s&&t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType)for(n=0;n<s.length;n++)t.options[s[n][0]]&&s[n][1].apply(t.element,i)}},hasScroll:function(e,i){if("hidden"===t(e).css("overflow"))return!1;var n=i&&"left"===i?"scrollLeft":"scrollTop",s=!1;return e[n]>0?!0:(e[n]=1,s=e[n]>0,e[n]=0,s)}})}(e),function(t,e){var i=0,n=Array.prototype.slice,s=t.cleanData;t.cleanData=function(e){for(var i,n=0;null!=(i=e[n]);n++)try{t(i).triggerHandler("remove")}catch(r){}s(e)},t.widget=function(e,i,n){var s,r,o,a,l={},u=e.split(".")[0];e=e.split(".")[1],s=u+"-"+e,n||(n=i,i=t.Widget),t.expr[":"][s.toLowerCase()]=function(e){return!!t.data(e,s)},t[u]=t[u]||{},r=t[u][e],o=t[u][e]=function(t,e){return this._createWidget?void(arguments.length&&this._createWidget(t,e)):new o(t,e)},t.extend(o,r,{version:n.version,_proto:t.extend({},n),_childConstructors:[]}),a=new i,a.options=t.widget.extend({},a.options),t.each(n,function(e,n){return t.isFunction(n)?void(l[e]=function(){var t=function(){return i.prototype[e].apply(this,arguments)},s=function(t){return i.prototype[e].apply(this,t)};return function(){var e,i=this._super,r=this._superApply;return this._super=t,this._superApply=s,e=n.apply(this,arguments),this._super=i,this._superApply=r,e}}()):void(l[e]=n)}),o.prototype=t.widget.extend(a,{widgetEventPrefix:r?a.widgetEventPrefix:e},l,{constructor:o,namespace:u,widgetName:e,widgetFullName:s}),r?(t.each(r._childConstructors,function(e,i){var n=i.prototype;t.widget(n.namespace+"."+n.widgetName,o,i._proto)}),delete r._childConstructors):i._childConstructors.push(o),t.widget.bridge(e,o)},t.widget.extend=function(i){for(var s,r,o=n.call(arguments,1),a=0,l=o.length;l>a;a++)for(s in o[a])r=o[a][s],o[a].hasOwnProperty(s)&&r!==e&&(i[s]=t.isPlainObject(r)?t.isPlainObject(i[s])?t.widget.extend({},i[s],r):t.widget.extend({},r):r);return i},t.widget.bridge=function(i,s){var r=s.prototype.widgetFullName||i;t.fn[i]=function(o){var a="string"==typeof o,l=n.call(arguments,1),u=this;return o=!a&&l.length?t.widget.extend.apply(null,[o].concat(l)):o,this.each(a?function(){var n,s=t.data(this,r);return s?t.isFunction(s[o])&&"_"!==o.charAt(0)?(n=s[o].apply(s,l),n!==s&&n!==e?(u=n&&n.jquery?u.pushStack(n.get()):n,!1):void 0):t.error("no such method '"+o+"' for "+i+" widget instance"):t.error("cannot call methods on "+i+" prior to initialization; attempted to call method '"+o+"'")}:function(){var e=t.data(this,r);e?e.option(o||{})._init():t.data(this,r,new s(o,this))}),u}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(e,n){n=t(n||this.defaultElement||this)[0],this.element=t(n),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this.bindings=t(),this.hoverable=t(),this.focusable=t(),n!==this&&(t.data(n,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===n&&this.destroy()}}),this.document=t(n.style?n.ownerDocument:n.document||n),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:t.noop,_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(t.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:t.noop,widget:function(){return this.element},option:function(i,n){var s,r,o,a=i;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof i)if(a={},s=i.split("."),i=s.shift(),s.length){for(r=a[i]=t.widget.extend({},this.options[i]),o=0;o<s.length-1;o++)r[s[o]]=r[s[o]]||{},r=r[s[o]];if(i=s.pop(),n===e)return r[i]===e?null:r[i];r[i]=n}else{if(n===e)return this.options[i]===e?null:this.options[i];a[i]=n}return this._setOptions(a),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return this.options[t]=e,"disabled"===t&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!e).attr("aria-disabled",e),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(e,i,n){var s,r=this;"boolean"!=typeof e&&(n=i,i=e,e=!1),n?(i=s=t(i),this.bindings=this.bindings.add(i)):(n=i,i=this.element,s=this.widget()),t.each(n,function(n,o){function a(){return e||r.options.disabled!==!0&&!t(this).hasClass("ui-state-disabled")?("string"==typeof o?r[o]:o).apply(r,arguments):void 0}"string"!=typeof o&&(a.guid=o.guid=o.guid||a.guid||t.guid++);var l=n.match(/^(\w+)\s*(.*)$/),u=l[1]+r.eventNamespace,h=l[2];h?s.delegate(h,u,a):i.bind(u,a)})},_off:function(t,e){e=(e||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.unbind(e).undelegate(e)},_delay:function(t,e){function i(){return("string"==typeof t?n[t]:t).apply(n,arguments)}var n=this;return setTimeout(i,e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){t(e.currentTarget).addClass("ui-state-hover")},mouseleave:function(e){t(e.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){t(e.currentTarget).addClass("ui-state-focus")},focusout:function(e){t(e.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(e,i,n){var s,r,o=this.options[e];if(n=n||{},i=t.Event(i),i.type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],r=i.originalEvent)for(s in r)s in i||(i[s]=r[s]);return this.element.trigger(i,n),!(t.isFunction(o)&&o.apply(this.element[0],[i].concat(n))===!1||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},function(e,i){t.Widget.prototype["_"+e]=function(n,s,r){"string"==typeof s&&(s={effect:s});var o,a=s?s===!0||"number"==typeof s?i:s.effect||i:e;s=s||{},"number"==typeof s&&(s={duration:s}),o=!t.isEmptyObject(s),s.complete=r,s.delay&&n.delay(s.delay),o&&t.effects&&t.effects.effect[a]?n[e](s):a!==e&&n[a]?n[a](s.duration,s.easing,r):n.queue(function(i){t(this)[e](),r&&r.call(n[0]),i()})}})}(e),function(t){var e=!1;t(document).mouseup(function(){e=!1}),t.widget("ui.mouse",{version:"1.10.3",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.bind("mousedown."+this.widgetName,function(t){return e._mouseDown(t)}).bind("click."+this.widgetName,function(i){return!0===t.data(i.target,e.widgetName+".preventClickEvent")?(t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&t(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(i){if(!e){this._mouseStarted&&this._mouseUp(i),this._mouseDownEvent=i;var n=this,s=1===i.which,r="string"==typeof this.options.cancel&&i.target.nodeName?t(i.target).closest(this.options.cancel).length:!1;return s&&!r&&this._mouseCapture(i)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){n.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(i)&&this._mouseDelayMet(i)&&(this._mouseStarted=this._mouseStart(i)!==!1,!this._mouseStarted)?(i.preventDefault(),!0):(!0===t.data(i.target,this.widgetName+".preventClickEvent")&&t.removeData(i.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return n._mouseMove(t)},this._mouseUpDelegate=function(t){return n._mouseUp(t)},t(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),i.preventDefault(),e=!0,!0)):!0}},_mouseMove:function(e){return t.ui.ie&&(!document.documentMode||document.documentMode<9)&&!e.button?this._mouseUp(e):this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,e)!==!1,this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){return t(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),!1},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})}(e),function(t){t.widget("ui.draggable",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"!==this.options.helper||/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative"),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._mouseInit()},_destroy:function(){this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._mouseDestroy()},_mouseCapture:function(e){var i=this.options;return this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(e),this.handle?(t(i.iframeFix===!0?"iframe":i.iframeFix).each(function(){t("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1e3}).css(t(this).offset()).appendTo("body")}),!0):!1)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(),this.offsetParent=this.helper.offsetParent(),this.offsetParentCssPosition=this.offsetParent.css("position"),this.offset=this.positionAbs=this.element.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},this.offset.scroll=!1,t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.originalPosition=this.position=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",e)===!1?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)
},_mouseDrag:function(e,i){if("fixed"===this.offsetParentCssPosition&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),!i){var n=this._uiHash();if(this._trigger("drag",e,n)===!1)return this._mouseUp({}),!1;this.position=n.position}return this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,n=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(n=t.ui.ddmanager.drop(this,e)),this.dropped&&(n=this.dropped,this.dropped=!1),"original"!==this.options.helper||t.contains(this.element[0].ownerDocument,this.element[0])?("invalid"===this.options.revert&&!n||"valid"===this.options.revert&&n||this.options.revert===!0||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,n)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",e)!==!1&&i._clear()}):this._trigger("stop",e)!==!1&&this._clear(),!1):!1},_mouseUp:function(e){return t("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)}),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(e){return this.options.handle?!!t(e.target).closest(this.element.find(this.options.handle)).length:!0},_createHelper:function(e){var i=this.options,n=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return n.parents("body").length||n.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),n[0]===this.element[0]||/(fixed|absolute)/.test(n.css("position"))||n.css("position","absolute"),n},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.element.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,n,s=this.options;return s.containment?"window"===s.containment?void(this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]):"document"===s.containment?void(this.containment=[0,0,t(document).width()-this.helperProportions.width-this.margins.left,(t(document).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]):s.containment.constructor===Array?void(this.containment=s.containment):("parent"===s.containment&&(s.containment=this.helper[0].parentNode),i=t(s.containment),n=i[0],void(n&&(e="hidden"!==i.css("overflow"),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(n.scrollWidth,n.offsetWidth):n.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(n.scrollHeight,n.offsetHeight):n.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relative_container=i))):void(this.containment=null)},_convertPositionTo:function(e,i){i||(i=this.position);var n="absolute"===e?1:-1,s="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent;return this.offset.scroll||(this.offset.scroll={top:s.scrollTop(),left:s.scrollLeft()}),{top:i.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():this.offset.scroll.top)*n,left:i.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():this.offset.scroll.left)*n}},_generatePosition:function(e){var i,n,s,r,o=this.options,a="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=e.pageX,u=e.pageY;return this.offset.scroll||(this.offset.scroll={top:a.scrollTop(),left:a.scrollLeft()}),this.originalPosition&&(this.containment&&(this.relative_container?(n=this.relative_container.offset(),i=[this.containment[0]+n.left,this.containment[1]+n.top,this.containment[2]+n.left,this.containment[3]+n.top]):i=this.containment,e.pageX-this.offset.click.left<i[0]&&(l=i[0]+this.offset.click.left),e.pageY-this.offset.click.top<i[1]&&(u=i[1]+this.offset.click.top),e.pageX-this.offset.click.left>i[2]&&(l=i[2]+this.offset.click.left),e.pageY-this.offset.click.top>i[3]&&(u=i[3]+this.offset.click.top)),o.grid&&(s=o.grid[1]?this.originalPageY+Math.round((u-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY,u=i?s-this.offset.click.top>=i[1]||s-this.offset.click.top>i[3]?s:s-this.offset.click.top>=i[1]?s-o.grid[1]:s+o.grid[1]:s,r=o.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX,l=i?r-this.offset.click.left>=i[0]||r-this.offset.click.left>i[2]?r:r-this.offset.click.left>=i[0]?r-o.grid[0]:r+o.grid[0]:r)),{top:u-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():this.offset.scroll.left)}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1},_trigger:function(e,i,n){return n=n||this._uiHash(),t.ui.plugin.call(this,e,[i,n]),"drag"===e&&(this.positionAbs=this._convertPositionTo("absolute")),t.Widget.prototype._trigger.call(this,e,i,n)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i){var n=t(this).data("ui-draggable"),s=n.options,r=t.extend({},i,{item:n.element});n.sortables=[],t(s.connectToSortable).each(function(){var i=t.data(this,"ui-sortable");i&&!i.options.disabled&&(n.sortables.push({instance:i,shouldRevert:i.options.revert}),i.refreshPositions(),i._trigger("activate",e,r))})},stop:function(e,i){var n=t(this).data("ui-draggable"),s=t.extend({},i,{item:n.element});t.each(n.sortables,function(){this.instance.isOver?(this.instance.isOver=0,n.cancelHelperRemoval=!0,this.instance.cancelHelperRemoval=!1,this.shouldRevert&&(this.instance.options.revert=this.shouldRevert),this.instance._mouseStop(e),this.instance.options.helper=this.instance.options._helper,"original"===n.options.helper&&this.instance.currentItem.css({top:"auto",left:"auto"})):(this.instance.cancelHelperRemoval=!1,this.instance._trigger("deactivate",e,s))})},drag:function(e,i){var n=t(this).data("ui-draggable"),s=this;t.each(n.sortables,function(){var r=!1,o=this;this.instance.positionAbs=n.positionAbs,this.instance.helperProportions=n.helperProportions,this.instance.offset.click=n.offset.click,this.instance._intersectsWith(this.instance.containerCache)&&(r=!0,t.each(n.sortables,function(){return this.instance.positionAbs=n.positionAbs,this.instance.helperProportions=n.helperProportions,this.instance.offset.click=n.offset.click,this!==o&&this.instance._intersectsWith(this.instance.containerCache)&&t.contains(o.instance.element[0],this.instance.element[0])&&(r=!1),r})),r?(this.instance.isOver||(this.instance.isOver=1,this.instance.currentItem=t(s).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item",!0),this.instance.options._helper=this.instance.options.helper,this.instance.options.helper=function(){return i.helper[0]},e.target=this.instance.currentItem[0],this.instance._mouseCapture(e,!0),this.instance._mouseStart(e,!0,!0),this.instance.offset.click.top=n.offset.click.top,this.instance.offset.click.left=n.offset.click.left,this.instance.offset.parent.left-=n.offset.parent.left-this.instance.offset.parent.left,this.instance.offset.parent.top-=n.offset.parent.top-this.instance.offset.parent.top,n._trigger("toSortable",e),n.dropped=this.instance.element,n.currentItem=n.element,this.instance.fromOutside=n),this.instance.currentItem&&this.instance._mouseDrag(e)):this.instance.isOver&&(this.instance.isOver=0,this.instance.cancelHelperRemoval=!0,this.instance.options.revert=!1,this.instance._trigger("out",e,this.instance._uiHash(this.instance)),this.instance._mouseStop(e,!0),this.instance.options.helper=this.instance.options._helper,this.instance.currentItem.remove(),this.instance.placeholder&&this.instance.placeholder.remove(),n._trigger("fromSortable",e),n.dropped=!1)})}}),t.ui.plugin.add("draggable","cursor",{start:function(){var e=t("body"),i=t(this).data("ui-draggable").options;e.css("cursor")&&(i._cursor=e.css("cursor")),e.css("cursor",i.cursor)},stop:function(){var e=t(this).data("ui-draggable").options;e._cursor&&t("body").css("cursor",e._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i){var n=t(i.helper),s=t(this).data("ui-draggable").options;n.css("opacity")&&(s._opacity=n.css("opacity")),n.css("opacity",s.opacity)},stop:function(e,i){var n=t(this).data("ui-draggable").options;n._opacity&&t(i.helper).css("opacity",n._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(){var e=t(this).data("ui-draggable");e.scrollParent[0]!==document&&"HTML"!==e.scrollParent[0].tagName&&(e.overflowOffset=e.scrollParent.offset())},drag:function(e){var i=t(this).data("ui-draggable"),n=i.options,s=!1;i.scrollParent[0]!==document&&"HTML"!==i.scrollParent[0].tagName?(n.axis&&"x"===n.axis||(i.overflowOffset.top+i.scrollParent[0].offsetHeight-e.pageY<n.scrollSensitivity?i.scrollParent[0].scrollTop=s=i.scrollParent[0].scrollTop+n.scrollSpeed:e.pageY-i.overflowOffset.top<n.scrollSensitivity&&(i.scrollParent[0].scrollTop=s=i.scrollParent[0].scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(i.overflowOffset.left+i.scrollParent[0].offsetWidth-e.pageX<n.scrollSensitivity?i.scrollParent[0].scrollLeft=s=i.scrollParent[0].scrollLeft+n.scrollSpeed:e.pageX-i.overflowOffset.left<n.scrollSensitivity&&(i.scrollParent[0].scrollLeft=s=i.scrollParent[0].scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(e.pageY-t(document).scrollTop()<n.scrollSensitivity?s=t(document).scrollTop(t(document).scrollTop()-n.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<n.scrollSensitivity&&(s=t(document).scrollTop(t(document).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(e.pageX-t(document).scrollLeft()<n.scrollSensitivity?s=t(document).scrollLeft(t(document).scrollLeft()-n.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<n.scrollSensitivity&&(s=t(document).scrollLeft(t(document).scrollLeft()+n.scrollSpeed)))),s!==!1&&t.ui.ddmanager&&!n.dropBehaviour&&t.ui.ddmanager.prepareOffsets(i,e)}}),t.ui.plugin.add("draggable","snap",{start:function(){var e=t(this).data("ui-draggable"),i=e.options;e.snapElements=[],t(i.snap.constructor!==String?i.snap.items||":data(ui-draggable)":i.snap).each(function(){var i=t(this),n=i.offset();this!==e.element[0]&&e.snapElements.push({item:this,width:i.outerWidth(),height:i.outerHeight(),top:n.top,left:n.left})})},drag:function(e,i){var n,s,r,o,a,l,u,h,c,d,f=t(this).data("ui-draggable"),p=f.options,m=p.snapTolerance,g=i.offset.left,v=g+f.helperProportions.width,b=i.offset.top,y=b+f.helperProportions.height;for(c=f.snapElements.length-1;c>=0;c--)a=f.snapElements[c].left,l=a+f.snapElements[c].width,u=f.snapElements[c].top,h=u+f.snapElements[c].height,a-m>v||g>l+m||u-m>y||b>h+m||!t.contains(f.snapElements[c].item.ownerDocument,f.snapElements[c].item)?(f.snapElements[c].snapping&&f.options.snap.release&&f.options.snap.release.call(f.element,e,t.extend(f._uiHash(),{snapItem:f.snapElements[c].item})),f.snapElements[c].snapping=!1):("inner"!==p.snapMode&&(n=Math.abs(u-y)<=m,s=Math.abs(h-b)<=m,r=Math.abs(a-v)<=m,o=Math.abs(l-g)<=m,n&&(i.position.top=f._convertPositionTo("relative",{top:u-f.helperProportions.height,left:0}).top-f.margins.top),s&&(i.position.top=f._convertPositionTo("relative",{top:h,left:0}).top-f.margins.top),r&&(i.position.left=f._convertPositionTo("relative",{top:0,left:a-f.helperProportions.width}).left-f.margins.left),o&&(i.position.left=f._convertPositionTo("relative",{top:0,left:l}).left-f.margins.left)),d=n||s||r||o,"outer"!==p.snapMode&&(n=Math.abs(u-b)<=m,s=Math.abs(h-y)<=m,r=Math.abs(a-g)<=m,o=Math.abs(l-v)<=m,n&&(i.position.top=f._convertPositionTo("relative",{top:u,left:0}).top-f.margins.top),s&&(i.position.top=f._convertPositionTo("relative",{top:h-f.helperProportions.height,left:0}).top-f.margins.top),r&&(i.position.left=f._convertPositionTo("relative",{top:0,left:a}).left-f.margins.left),o&&(i.position.left=f._convertPositionTo("relative",{top:0,left:l-f.helperProportions.width}).left-f.margins.left)),!f.snapElements[c].snapping&&(n||s||r||o||d)&&f.options.snap.snap&&f.options.snap.snap.call(f.element,e,t.extend(f._uiHash(),{snapItem:f.snapElements[c].item})),f.snapElements[c].snapping=n||s||r||o||d)}}),t.ui.plugin.add("draggable","stack",{start:function(){var e,i=this.data("ui-draggable").options,n=t.makeArray(t(i.stack)).sort(function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)});n.length&&(e=parseInt(t(n[0]).css("zIndex"),10)||0,t(n).each(function(i){t(this).css("zIndex",e+i)}),this.css("zIndex",e+n.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i){var n=t(i.helper),s=t(this).data("ui-draggable").options;n.css("zIndex")&&(s._zIndex=n.css("zIndex")),n.css("zIndex",s.zIndex)},stop:function(e,i){var n=t(this).data("ui-draggable").options;n._zIndex&&t(i.helper).css("zIndex",n._zIndex)}})}(e),function(t){function e(t,e,i){return t>e&&e+i>t}t.widget("ui.droppable",{version:"1.10.3",widgetEventPrefix:"drop",options:{accept:"*",activeClass:!1,addClasses:!0,greedy:!1,hoverClass:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e=this.options,i=e.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(i)?i:function(t){return t.is(i)},this.proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight},t.ui.ddmanager.droppables[e.scope]=t.ui.ddmanager.droppables[e.scope]||[],t.ui.ddmanager.droppables[e.scope].push(this),e.addClasses&&this.element.addClass("ui-droppable")},_destroy:function(){for(var e=0,i=t.ui.ddmanager.droppables[this.options.scope];e<i.length;e++)i[e]===this&&i.splice(e,1);this.element.removeClass("ui-droppable ui-droppable-disabled")},_setOption:function(e,i){"accept"===e&&(this.accept=t.isFunction(i)?i:function(t){return t.is(i)}),t.Widget.prototype._setOption.apply(this,arguments)},_activate:function(e){var i=t.ui.ddmanager.current;this.options.activeClass&&this.element.addClass(this.options.activeClass),i&&this._trigger("activate",e,this.ui(i))},_deactivate:function(e){var i=t.ui.ddmanager.current;this.options.activeClass&&this.element.removeClass(this.options.activeClass),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.addClass(this.options.hoverClass),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var n=i||t.ui.ddmanager.current,s=!1;return n&&(n.currentItem||n.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var e=t.data(this,"ui-droppable");return e.options.greedy&&!e.options.disabled&&e.options.scope===n.options.scope&&e.accept.call(e.element[0],n.currentItem||n.element)&&t.ui.intersect(n,t.extend(e,{offset:e.element.offset()}),e.options.tolerance)?(s=!0,!1):void 0}),s?!1:this.accept.call(this.element[0],n.currentItem||n.element)?(this.options.activeClass&&this.element.removeClass(this.options.activeClass),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("drop",e,this.ui(n)),this.element):!1):!1},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}}}),t.ui.intersect=function(t,i,n){if(!i.offset)return!1;var s,r,o=(t.positionAbs||t.position.absolute).left,a=o+t.helperProportions.width,l=(t.positionAbs||t.position.absolute).top,u=l+t.helperProportions.height,h=i.offset.left,c=h+i.proportions.width,d=i.offset.top,f=d+i.proportions.height;switch(n){case"fit":return o>=h&&c>=a&&l>=d&&f>=u;case"intersect":return h<o+t.helperProportions.width/2&&a-t.helperProportions.width/2<c&&d<l+t.helperProportions.height/2&&u-t.helperProportions.height/2<f;case"pointer":return s=(t.positionAbs||t.position.absolute).left+(t.clickOffset||t.offset.click).left,r=(t.positionAbs||t.position.absolute).top+(t.clickOffset||t.offset.click).top,e(r,d,i.proportions.height)&&e(s,h,i.proportions.width);case"touch":return(l>=d&&f>=l||u>=d&&f>=u||d>l&&u>f)&&(o>=h&&c>=o||a>=h&&c>=a||h>o&&a>c);default:return!1}},t.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(e,i){var n,s,r=t.ui.ddmanager.droppables[e.options.scope]||[],o=i?i.type:null,a=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(n=0;n<r.length;n++)if(!(r[n].options.disabled||e&&!r[n].accept.call(r[n].element[0],e.currentItem||e.element))){for(s=0;s<a.length;s++)if(a[s]===r[n].element[0]){r[n].proportions.height=0;continue t}r[n].visible="none"!==r[n].element.css("display"),r[n].visible&&("mousedown"===o&&r[n]._activate.call(r[n],i),r[n].offset=r[n].element.offset(),r[n].proportions={width:r[n].element[0].offsetWidth,height:r[n].element[0].offsetHeight})}},drop:function(e,i){var n=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&t.ui.intersect(e,this,this.options.tolerance)&&(n=this._drop.call(this,i)||n),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),n},dragStart:function(e,i){e.element.parentsUntil("body").bind("scroll.droppable",function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)})},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var n,s,r,o=t.ui.intersect(e,this,this.options.tolerance),a=!o&&this.isover?"isout":o&&!this.isover?"isover":null;a&&(this.options.greedy&&(s=this.options.scope,r=this.element.parents(":data(ui-droppable)").filter(function(){return t.data(this,"ui-droppable").options.scope===s}),r.length&&(n=t.data(r[0],"ui-droppable"),n.greedyChild="isover"===a)),n&&"isover"===a&&(n.isover=!1,n.isout=!0,n._out.call(n,i)),this[a]=!0,this["isout"===a?"isover":"isout"]=!1,this["isover"===a?"_over":"_out"].call(this,i),n&&"isout"===a&&(n.isout=!1,n.isover=!0,n._over.call(n,i)))}})},dragStop:function(e,i){e.element.parentsUntil("body").unbind("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}}}(e),function(t){function e(t){return parseInt(t,10)||0}function i(t){return!isNaN(parseInt(t,10))}t.widget("ui.resizable",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_create:function(){var e,i,n,s,r,o=this,a=this.options;if(this.element.addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!a.aspectRatio,aspectRatio:a.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:a.helper||a.ghost||a.animate?a.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.data("ui-resizable")),this.elementIsWrapper=!0,this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")}),this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0}),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css({margin:this.originalElement.css("margin")}),this._proportionallyResize()),this.handles=a.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),e=this.handles.split(","),this.handles={},i=0;i<e.length;i++)n=t.trim(e[i]),r="ui-resizable-"+n,s=t("<div class='ui-resizable-handle "+r+"'></div>"),s.css({zIndex:a.zIndex}),"se"===n&&s.addClass("ui-icon ui-icon-gripsmall-diagonal-se"),this.handles[n]=".ui-resizable-"+n,this.element.append(s);this._renderAxis=function(e){var i,n,s,r;e=e||this.element;for(i in this.handles)this.handles[i].constructor===String&&(this.handles[i]=t(this.handles[i],this.element).show()),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)&&(n=t(this.handles[i],this.element),r=/sw|ne|nw|se|n|s/.test(i)?n.outerHeight():n.outerWidth(),s=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(s,r),this._proportionallyResize()),t(this.handles[i]).length},this._renderAxis(this.element),this._handles=t(".ui-resizable-handle",this.element).disableSelection(),this._handles.mouseover(function(){o.resizing||(this.className&&(s=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),o.axis=s&&s[1]?s[1]:"se")}),a.autoHide&&(this._handles.hide(),t(this.element).addClass("ui-resizable-autohide").mouseenter(function(){a.disabled||(t(this).removeClass("ui-resizable-autohide"),o._handles.show())}).mouseleave(function(){a.disabled||o.resizing||(t(this).addClass("ui-resizable-autohide"),o._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_mouseCapture:function(e){var i,n,s=!1;for(i in this.handles)n=t(this.handles[i])[0],(n===e.target||t.contains(n,e.target))&&(s=!0);return!this.options.disabled&&s},_mouseStart:function(i){var n,s,r,o=this.options,a=this.element.position(),l=this.element;return this.resizing=!0,/absolute/.test(l.css("position"))?l.css({position:"absolute",top:l.css("top"),left:l.css("left")}):l.is(".ui-draggable")&&l.css({position:"absolute",top:a.top,left:a.left}),this._renderProxy(),n=e(this.helper.css("left")),s=e(this.helper.css("top")),o.containment&&(n+=t(o.containment).scrollLeft()||0,s+=t(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:n,top:s},this.size=this._helper?{width:l.outerWidth(),height:l.outerHeight()}:{width:l.width(),height:l.height()},this.originalSize=this._helper?{width:l.outerWidth(),height:l.outerHeight()}:{width:l.width(),height:l.height()},this.originalPosition={left:n,top:s},this.sizeDiff={width:l.outerWidth()-l.width(),height:l.outerHeight()-l.height()},this.originalMousePosition={left:i.pageX,top:i.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,r=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===r?this.axis+"-resize":r),l.addClass("ui-resizable-resizing"),this._propagate("start",i),!0},_mouseDrag:function(e){var i,n=this.helper,s={},r=this.originalMousePosition,o=this.axis,a=this.position.top,l=this.position.left,u=this.size.width,h=this.size.height,c=e.pageX-r.left||0,d=e.pageY-r.top||0,f=this._change[o];return f?(i=f.apply(this,[e,c,d]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),this.position.top!==a&&(s.top=this.position.top+"px"),this.position.left!==l&&(s.left=this.position.left+"px"),this.size.width!==u&&(s.width=this.size.width+"px"),this.size.height!==h&&(s.height=this.size.height+"px"),n.css(s),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(s)||this._trigger("resize",e,this.ui()),!1):!1},_mouseStop:function(e){this.resizing=!1;var i,n,s,r,o,a,l,u=this.options,h=this;return this._helper&&(i=this._proportionallyResizeElements,n=i.length&&/textarea/i.test(i[0].nodeName),s=n&&t.ui.hasScroll(i[0],"left")?0:h.sizeDiff.height,r=n?0:h.sizeDiff.width,o={width:h.helper.width()-r,height:h.helper.height()-s},a=parseInt(h.element.css("left"),10)+(h.position.left-h.originalPosition.left)||null,l=parseInt(h.element.css("top"),10)+(h.position.top-h.originalPosition.top)||null,u.animate||this.element.css(t.extend(o,{top:l,left:a})),h.helper.height(h.size.height),h.helper.width(h.size.width),this._helper&&!u.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this.element.removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updateVirtualBoundaries:function(t){var e,n,s,r,o,a=this.options;o={minWidth:i(a.minWidth)?a.minWidth:0,maxWidth:i(a.maxWidth)?a.maxWidth:1/0,minHeight:i(a.minHeight)?a.minHeight:0,maxHeight:i(a.maxHeight)?a.maxHeight:1/0},(this._aspectRatio||t)&&(e=o.minHeight*this.aspectRatio,s=o.minWidth/this.aspectRatio,n=o.maxHeight*this.aspectRatio,r=o.maxWidth/this.aspectRatio,e>o.minWidth&&(o.minWidth=e),s>o.minHeight&&(o.minHeight=s),n<o.maxWidth&&(o.maxWidth=n),r<o.maxHeight&&(o.maxHeight=r)),this._vBoundaries=o},_updateCache:function(t){this.offset=this.helper.offset(),i(t.left)&&(this.position.left=t.left),i(t.top)&&(this.position.top=t.top),i(t.height)&&(this.size.height=t.height),i(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,n=this.size,s=this.axis;return i(t.height)?t.width=t.height*this.aspectRatio:i(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===s&&(t.left=e.left+(n.width-t.width),t.top=null),"nw"===s&&(t.top=e.top+(n.height-t.height),t.left=e.left+(n.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,n=this.axis,s=i(t.width)&&e.maxWidth&&e.maxWidth<t.width,r=i(t.height)&&e.maxHeight&&e.maxHeight<t.height,o=i(t.width)&&e.minWidth&&e.minWidth>t.width,a=i(t.height)&&e.minHeight&&e.minHeight>t.height,l=this.originalPosition.left+this.originalSize.width,u=this.position.top+this.size.height,h=/sw|nw|w/.test(n),c=/nw|ne|n/.test(n);return o&&(t.width=e.minWidth),a&&(t.height=e.minHeight),s&&(t.width=e.maxWidth),r&&(t.height=e.maxHeight),o&&h&&(t.left=l-e.minWidth),s&&h&&(t.left=l-e.maxWidth),a&&c&&(t.top=u-e.minHeight),r&&c&&(t.top=u-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_proportionallyResize:function(){if(this._proportionallyResizeElements.length){var t,e,i,n,s,r=this.helper||this.element;for(t=0;t<this._proportionallyResizeElements.length;t++){if(s=this._proportionallyResizeElements[t],!this.borderDif)for(this.borderDif=[],i=[s.css("borderTopWidth"),s.css("borderRightWidth"),s.css("borderBottomWidth"),s.css("borderLeftWidth")],n=[s.css("paddingTop"),s.css("paddingRight"),s.css("paddingBottom"),s.css("paddingLeft")],e=0;e<i.length;e++)this.borderDif[e]=(parseInt(i[e],10)||0)+(parseInt(n[e],10)||0);s.css({height:r.height()-this.borderDif[0]-this.borderDif[2]||0,width:r.width()-this.borderDif[1]-this.borderDif[3]||0})}}},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this.helper.addClass(this._helper).css({width:this.element.outerWidth()-1,height:this.element.outerHeight()-1,position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize,n=this.originalPosition;return{left:n.left+e,width:i.width-e}},n:function(t,e,i){var n=this.originalSize,s=this.originalPosition;return{top:s.top+i,height:n.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,n){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,n]))},sw:function(e,i,n){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,n]))
},ne:function(e,i,n){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,n]))},nw:function(e,i,n){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,n]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).data("ui-resizable"),n=i.options,s=i._proportionallyResizeElements,r=s.length&&/textarea/i.test(s[0].nodeName),o=r&&t.ui.hasScroll(s[0],"left")?0:i.sizeDiff.height,a=r?0:i.sizeDiff.width,l={width:i.size.width-a,height:i.size.height-o},u=parseInt(i.element.css("left"),10)+(i.position.left-i.originalPosition.left)||null,h=parseInt(i.element.css("top"),10)+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(l,h&&u?{top:h,left:u}:{}),{duration:n.animateDuration,easing:n.animateEasing,step:function(){var n={width:parseInt(i.element.css("width"),10),height:parseInt(i.element.css("height"),10),top:parseInt(i.element.css("top"),10),left:parseInt(i.element.css("left"),10)};s&&s.length&&t(s[0]).css({width:n.width,height:n.height}),i._updateCache(n),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var i,n,s,r,o,a,l,u=t(this).data("ui-resizable"),h=u.options,c=u.element,d=h.containment,f=d instanceof t?d.get(0):/parent/.test(d)?c.parent().get(0):d;f&&(u.containerElement=t(f),/document/.test(d)||d===document?(u.containerOffset={left:0,top:0},u.containerPosition={left:0,top:0},u.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(i=t(f),n=[],t(["Top","Right","Left","Bottom"]).each(function(t,s){n[t]=e(i.css("padding"+s))}),u.containerOffset=i.offset(),u.containerPosition=i.position(),u.containerSize={height:i.innerHeight()-n[3],width:i.innerWidth()-n[1]},s=u.containerOffset,r=u.containerSize.height,o=u.containerSize.width,a=t.ui.hasScroll(f,"left")?f.scrollWidth:o,l=t.ui.hasScroll(f)?f.scrollHeight:r,u.parentData={element:f,left:s.left,top:s.top,width:a,height:l}))},resize:function(e){var i,n,s,r,o=t(this).data("ui-resizable"),a=o.options,l=o.containerOffset,u=o.position,h=o._aspectRatio||e.shiftKey,c={top:0,left:0},d=o.containerElement;d[0]!==document&&/static/.test(d.css("position"))&&(c=l),u.left<(o._helper?l.left:0)&&(o.size.width=o.size.width+(o._helper?o.position.left-l.left:o.position.left-c.left),h&&(o.size.height=o.size.width/o.aspectRatio),o.position.left=a.helper?l.left:0),u.top<(o._helper?l.top:0)&&(o.size.height=o.size.height+(o._helper?o.position.top-l.top:o.position.top),h&&(o.size.width=o.size.height*o.aspectRatio),o.position.top=o._helper?l.top:0),o.offset.left=o.parentData.left+o.position.left,o.offset.top=o.parentData.top+o.position.top,i=Math.abs((o._helper?o.offset.left-c.left:o.offset.left-c.left)+o.sizeDiff.width),n=Math.abs((o._helper?o.offset.top-c.top:o.offset.top-l.top)+o.sizeDiff.height),s=o.containerElement.get(0)===o.element.parent().get(0),r=/relative|absolute/.test(o.containerElement.css("position")),s&&r&&(i-=o.parentData.left),i+o.size.width>=o.parentData.width&&(o.size.width=o.parentData.width-i,h&&(o.size.height=o.size.width/o.aspectRatio)),n+o.size.height>=o.parentData.height&&(o.size.height=o.parentData.height-n,h&&(o.size.width=o.size.height*o.aspectRatio))},stop:function(){var e=t(this).data("ui-resizable"),i=e.options,n=e.containerOffset,s=e.containerPosition,r=e.containerElement,o=t(e.helper),a=o.offset(),l=o.outerWidth()-e.sizeDiff.width,u=o.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(r.css("position"))&&t(this).css({left:a.left-s.left-n.left,width:l,height:u}),e._helper&&!i.animate&&/static/.test(r.css("position"))&&t(this).css({left:a.left-s.left-n.left,width:l,height:u})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).data("ui-resizable"),i=e.options,n=function(e){t(e).each(function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseInt(e.width(),10),height:parseInt(e.height(),10),left:parseInt(e.css("left"),10),top:parseInt(e.css("top"),10)})})};"object"!=typeof i.alsoResize||i.alsoResize.parentNode?n(i.alsoResize):i.alsoResize.length?(i.alsoResize=i.alsoResize[0],n(i.alsoResize)):t.each(i.alsoResize,function(t){n(t)})},resize:function(e,i){var n=t(this).data("ui-resizable"),s=n.options,r=n.originalSize,o=n.originalPosition,a={height:n.size.height-r.height||0,width:n.size.width-r.width||0,top:n.position.top-o.top||0,left:n.position.left-o.left||0},l=function(e,n){t(e).each(function(){var e=t(this),s=t(this).data("ui-resizable-alsoresize"),r={},o=n&&n.length?n:e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(o,function(t,e){var i=(s[e]||0)+(a[e]||0);i&&i>=0&&(r[e]=i||null)}),e.css(r)})};"object"!=typeof s.alsoResize||s.alsoResize.nodeType?l(s.alsoResize):t.each(s.alsoResize,function(t,e){l(t,e)})},stop:function(){t(this).removeData("resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).data("ui-resizable"),i=e.options,n=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:n.height,width:n.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass("string"==typeof i.ghost?i.ghost:""),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).data("ui-resizable");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).data("ui-resizable");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e=t(this).data("ui-resizable"),i=e.options,n=e.size,s=e.originalSize,r=e.originalPosition,o=e.axis,a="number"==typeof i.grid?[i.grid,i.grid]:i.grid,l=a[0]||1,u=a[1]||1,h=Math.round((n.width-s.width)/l)*l,c=Math.round((n.height-s.height)/u)*u,d=s.width+h,f=s.height+c,p=i.maxWidth&&i.maxWidth<d,m=i.maxHeight&&i.maxHeight<f,g=i.minWidth&&i.minWidth>d,v=i.minHeight&&i.minHeight>f;i.grid=a,g&&(d+=l),v&&(f+=u),p&&(d-=l),m&&(f-=u),/^(se|s|e)$/.test(o)?(e.size.width=d,e.size.height=f):/^(ne)$/.test(o)?(e.size.width=d,e.size.height=f,e.position.top=r.top-c):/^(sw)$/.test(o)?(e.size.width=d,e.size.height=f,e.position.left=r.left-h):(e.size.width=d,e.size.height=f,e.position.top=r.top-c,e.position.left=r.left-h)}})}(e),function(t){t.widget("ui.selectable",t.ui.mouse,{version:"1.10.3",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e,i=this;this.element.addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e=t(i.options.filter,i.element[0]),e.addClass("ui-selectee"),e.each(function(){var e=t(this),i=e.offset();t.data(this,"selectable-item",{element:this,$element:e,left:i.left,top:i.top,right:i.left+e.outerWidth(),bottom:i.top+e.outerHeight(),startselected:!1,selected:e.hasClass("ui-selected"),selecting:e.hasClass("ui-selecting"),unselecting:e.hasClass("ui-unselecting")})})},this.refresh(),this.selectees=e.addClass("ui-selectee"),this._mouseInit(),this.helper=t("<div class='ui-selectable-helper'></div>")},_destroy:function(){this.selectees.removeClass("ui-selectee").removeData("selectable-item"),this.element.removeClass("ui-selectable ui-selectable-disabled"),this._mouseDestroy()},_mouseStart:function(e){var i=this,n=this.options;this.opos=[e.pageX,e.pageY],this.options.disabled||(this.selectees=t(n.filter,this.element[0]),this._trigger("start",e),t(n.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),n.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var n=t.data(this,"selectable-item");n.startselected=!0,e.metaKey||e.ctrlKey||(n.$element.removeClass("ui-selected"),n.selected=!1,n.$element.addClass("ui-unselecting"),n.unselecting=!0,i._trigger("unselecting",e,{unselecting:n.element}))}),t(e.target).parents().addBack().each(function(){var n,s=t.data(this,"selectable-item");return s?(n=!e.metaKey&&!e.ctrlKey||!s.$element.hasClass("ui-selected"),s.$element.removeClass(n?"ui-unselecting":"ui-selected").addClass(n?"ui-selecting":"ui-unselecting"),s.unselecting=!n,s.selecting=n,s.selected=n,n?i._trigger("selecting",e,{selecting:s.element}):i._trigger("unselecting",e,{unselecting:s.element}),!1):void 0}))},_mouseDrag:function(e){if(this.dragged=!0,!this.options.disabled){var i,n=this,s=this.options,r=this.opos[0],o=this.opos[1],a=e.pageX,l=e.pageY;return r>a&&(i=a,a=r,r=i),o>l&&(i=l,l=o,o=i),this.helper.css({left:r,top:o,width:a-r,height:l-o}),this.selectees.each(function(){var i=t.data(this,"selectable-item"),u=!1;i&&i.element!==n.element[0]&&("touch"===s.tolerance?u=!(i.left>a||i.right<r||i.top>l||i.bottom<o):"fit"===s.tolerance&&(u=i.left>r&&i.right<a&&i.top>o&&i.bottom<l),u?(i.selected&&(i.$element.removeClass("ui-selected"),i.selected=!1),i.unselecting&&(i.$element.removeClass("ui-unselecting"),i.unselecting=!1),i.selecting||(i.$element.addClass("ui-selecting"),i.selecting=!0,n._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.$element.addClass("ui-selected"),i.selected=!0):(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.startselected&&(i.$element.addClass("ui-unselecting"),i.unselecting=!0),n._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(i.$element.removeClass("ui-selected"),i.selected=!1,i.$element.addClass("ui-unselecting"),i.unselecting=!0,n._trigger("unselecting",e,{unselecting:i.element})))))}),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each(function(){var n=t.data(this,"selectable-item");n.$element.removeClass("ui-unselecting"),n.unselecting=!1,n.startselected=!1,i._trigger("unselected",e,{unselected:n.element})}),t(".ui-selecting",this.element[0]).each(function(){var n=t.data(this,"selectable-item");n.$element.removeClass("ui-selecting").addClass("ui-selected"),n.selecting=!1,n.selected=!0,n.startselected=!0,i._trigger("selected",e,{selected:n.element})}),this._trigger("stop",e),this.helper.remove(),!1}})}(e),function(t){function e(t,e,i){return t>e&&e+i>t}function i(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))}t.widget("ui.sortable",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_create:function(){var t=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?"x"===t.axis||i(this.items[0].item):!1,this.offset=this.element.offset(),this._mouseInit(),this.ready=!0},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled"),this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_setOption:function(e,i){"disabled"===e?(this.options[e]=i,this.widget().toggleClass("ui-sortable-disabled",!!i)):t.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(e,i){var n=null,s=!1,r=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,r.widgetName+"-item")===r?(n=t(this),!1):void 0}),t.data(e.target,r.widgetName+"-item")===r&&(n=t(e.target)),n&&(!this.options.handle||i||(t(this.options.handle,n).find("*").addBack().each(function(){this===e.target&&(s=!0)}),s))?(this.currentItem=n,this._removeCurrentsFromItems(),!0):!1)},_mouseStart:function(e,i,n){var s,r,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(r=this.document.find("body"),this.storedCursor=r.css("cursor"),r.css("cursor",o.cursor),this.storedStylesheet=t("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(r)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!n)for(s=this.containers.length-1;s>=0;s--)this.containers[s]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!o.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,n,s,r,o=this.options,a=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<o.scrollSensitivity?this.scrollParent[0].scrollTop=a=this.scrollParent[0].scrollTop+o.scrollSpeed:e.pageY-this.overflowOffset.top<o.scrollSensitivity&&(this.scrollParent[0].scrollTop=a=this.scrollParent[0].scrollTop-o.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<o.scrollSensitivity?this.scrollParent[0].scrollLeft=a=this.scrollParent[0].scrollLeft+o.scrollSpeed:e.pageX-this.overflowOffset.left<o.scrollSensitivity&&(this.scrollParent[0].scrollLeft=a=this.scrollParent[0].scrollLeft-o.scrollSpeed)):(e.pageY-t(document).scrollTop()<o.scrollSensitivity?a=t(document).scrollTop(t(document).scrollTop()-o.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<o.scrollSensitivity&&(a=t(document).scrollTop(t(document).scrollTop()+o.scrollSpeed)),e.pageX-t(document).scrollLeft()<o.scrollSensitivity?a=t(document).scrollLeft(t(document).scrollLeft()-o.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<o.scrollSensitivity&&(a=t(document).scrollLeft(t(document).scrollLeft()+o.scrollSpeed))),a!==!1&&t.ui.ddmanager&&!o.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(n=this.items[i],s=n.item[0],r=this._intersectsWithPointer(n),r&&n.instance===this.currentContainer&&s!==this.currentItem[0]&&this.placeholder[1===r?"next":"prev"]()[0]!==s&&!t.contains(this.placeholder[0],s)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],s):!0)){if(this.direction=1===r?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(n))break;this._rearrange(e,n),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var n=this,s=this.placeholder.offset(),r=this.options.axis,o={};r&&"x"!==r||(o.left=s.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollLeft)),r&&"y"!==r||(o.top=s.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(o,parseInt(this.options.revert,10)||500,function(){n._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&n.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!n.length&&e.key&&n.push(e.key+"="),n.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},i.each(function(){n.push(t(e.item||this).attr(e.attribute||"id")||"")}),n},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,n=this.positionAbs.top,s=n+this.helperProportions.height,r=t.left,o=r+t.width,a=t.top,l=a+t.height,u=this.offset.click.top,h=this.offset.click.left,c="x"===this.options.axis||n+u>a&&l>n+u,d="y"===this.options.axis||e+h>r&&o>e+h,f=c&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?f:r<e+this.helperProportions.width/2&&i-this.helperProportions.width/2<o&&a<n+this.helperProportions.height/2&&s-this.helperProportions.height/2<l},_intersectsWithPointer:function(t){var i="x"===this.options.axis||e(this.positionAbs.top+this.offset.click.top,t.top,t.height),n="y"===this.options.axis||e(this.positionAbs.left+this.offset.click.left,t.left,t.width),s=i&&n,r=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return s?this.floating?o&&"right"===o||"down"===r?2:1:r&&("down"===r?2:1):!1},_intersectsWithSides:function(t){var i=e(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),n=e(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),s=this._getDragVerticalDirection(),r=this._getDragHorizontalDirection();return this.floating&&r?"right"===r&&n||"left"===r&&!n:s&&("down"===s&&i||"up"===s&&!i)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){var i,n,s,r,o=[],a=[],l=this._connectWith();if(l&&e)for(i=l.length-1;i>=0;i--)for(s=t(l[i]),n=s.length-1;n>=0;n--)r=t.data(s[n],this.widgetFullName),r&&r!==this&&!r.options.disabled&&a.push([t.isFunction(r.options.items)?r.options.items.call(r.element):t(r.options.items,r.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),r]);for(a.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),i=a.length-1;i>=0;i--)a[i][0].each(function(){o.push(this)});return t(o)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;i<e.length;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,n,s,r,o,a,l,u,h=this.items,c=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(s=t(d[i]),n=s.length-1;n>=0;n--)r=t.data(s[n],this.widgetFullName),r&&r!==this&&!r.options.disabled&&(c.push([t.isFunction(r.options.items)?r.options.items.call(r.element[0],e,{item:this.currentItem}):t(r.options.items,r.element),r]),this.containers.push(r));for(i=c.length-1;i>=0;i--)for(o=c[i][1],a=c[i][0],n=0,u=a.length;u>n;n++)l=t(a[n]),l.data(this.widgetName+"-item",o),h.push({item:l,instance:o,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,n,s,r;for(i=this.items.length-1;i>=0;i--)n=this.items[i],n.instance!==this.currentContainer&&this.currentContainer&&n.item[0]!==this.currentItem[0]||(s=this.options.toleranceElement?t(this.options.toleranceElement,n.item):n.item,e||(n.width=s.outerWidth(),n.height=s.outerHeight()),r=s.offset(),n.left=r.left,n.top=r.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)r=this.containers[i].element.offset(),this.containers[i].containerCache.left=r.left,this.containers[i].containerCache.top=r.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,n=e.options;n.placeholder&&n.placeholder.constructor!==String||(i=n.placeholder,n.placeholder={element:function(){var n=e.currentItem[0].nodeName.toLowerCase(),s=t("<"+n+">",e.document[0]).addClass(i||e.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tr"===n?e.currentItem.children().each(function(){t("<td>&#160;</td>",e.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(s)}):"img"===n&&s.attr("src",e.currentItem.attr("src")),i||s.css("visibility","hidden"),s},update:function(t,s){(!i||n.forcePlaceholderSize)&&(s.height()||s.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),s.width()||s.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(n.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),n.placeholder.update(e,e.placeholder)},_contactContainers:function(n){var s,r,o,a,l,u,h,c,d,f,p=null,m=null;for(s=this.containers.length-1;s>=0;s--)if(!t.contains(this.currentItem[0],this.containers[s].element[0]))if(this._intersectsWith(this.containers[s].containerCache)){if(p&&t.contains(this.containers[s].element[0],p.element[0]))continue;p=this.containers[s],m=s}else this.containers[s].containerCache.over&&(this.containers[s]._trigger("out",n,this._uiHash(this)),this.containers[s].containerCache.over=0);if(p)if(1===this.containers.length)this.containers[m].containerCache.over||(this.containers[m]._trigger("over",n,this._uiHash(this)),this.containers[m].containerCache.over=1);else{for(o=1e4,a=null,f=p.floating||i(this.currentItem),l=f?"left":"top",u=f?"width":"height",h=this.positionAbs[l]+this.offset.click[l],r=this.items.length-1;r>=0;r--)t.contains(this.containers[m].element[0],this.items[r].item[0])&&this.items[r].item[0]!==this.currentItem[0]&&(!f||e(this.positionAbs.top+this.offset.click.top,this.items[r].top,this.items[r].height))&&(c=this.items[r].item.offset()[l],d=!1,Math.abs(c-h)>Math.abs(c+this.items[r][u]-h)&&(d=!0,c+=this.items[r][u]),Math.abs(c-h)<o&&(o=Math.abs(c-h),a=this.items[r],this.direction=d?"up":"down"));if(!a&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[m])return;a?this._rearrange(n,a,null,!0):this._rearrange(n,null,this.containers[m].element,!0),this._trigger("change",n,this._uiHash()),this.containers[m]._trigger("change",n,this._uiHash(this)),this.currentContainer=this.containers[m],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[m]._trigger("over",n,this._uiHash(this)),this.containers[m].containerCache.over=1}},_createHelper:function(e){var i=this.options,n=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return n.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(n[0]),n[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!n[0].style.width||i.forceHelperSize)&&n.width(this.currentItem.width()),(!n[0].style.height||i.forceHelperSize)&&n.height(this.currentItem.height()),n},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,n,s=this.options;"parent"===s.containment&&(s.containment=this.helper[0].parentNode),("document"===s.containment||"window"===s.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,t("document"===s.containment?document:window).width()-this.helperProportions.width-this.margins.left,(t("document"===s.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(s.containment)||(e=t(s.containment)[0],i=t(s.containment).offset(),n="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(n?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(n?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var n="absolute"===e?1:-1,s="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,r=/(html|body)/i.test(s[0].tagName);return{top:i.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():r?0:s.scrollTop())*n,left:i.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():r?0:s.scrollLeft())*n}},_generatePosition:function(e){var i,n,s=this.options,r=e.pageX,o=e.pageY,a="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(a[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==document&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(r=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(r=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),s.grid&&(i=this.originalPageY+Math.round((o-this.originalPageY)/s.grid[1])*s.grid[1],o=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-s.grid[1]:i+s.grid[1]:i,n=this.originalPageX+Math.round((r-this.originalPageX)/s.grid[0])*s.grid[0],r=this.containment?n-this.offset.click.left>=this.containment[0]&&n-this.offset.click.left<=this.containment[2]?n:n-this.offset.click.left>=this.containment[0]?n-s.grid[0]:n+s.grid[0]:n)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:a.scrollTop()),left:r-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:a.scrollLeft())}},_rearrange:function(t,e,i,n){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var s=this.counter;
this._delay(function(){s===this.counter&&this.refreshPositions(!n)})},_clear:function(t,e){this.reverting=!1;var i,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(i in this._storedCSS)("auto"===this._storedCSS[i]||"static"===this._storedCSS[i])&&(this._storedCSS[i]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&n.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(n.push(function(t){this._trigger("remove",t,this._uiHash())}),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),i=this.containers.length-1;i>=0;i--)e||n.push(function(t){return function(e){t._trigger("deactivate",e,this._uiHash(this))}}.call(this,this.containers[i])),this.containers[i].containerCache.over&&(n.push(function(t){return function(e){t._trigger("out",e,this._uiHash(this))}}.call(this,this.containers[i])),this.containers[i].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,this.cancelHelperRemoval){if(!e){for(this._trigger("beforeStop",t,this._uiHash()),i=0;i<n.length;i++)n[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!1}if(e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null,!e){for(i=0;i<n.length;i++)n[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}})}(e),function(t,i){var n="ui-effects-";t.effects={effect:{}},function(t,e){function i(t,e,i){var n=c[e.type]||{};return null==t?i||!e.def?null:e.def:(t=n.floor?~~t:parseFloat(t),isNaN(t)?e.def:n.mod?(t+n.mod)%n.mod:0>t?0:n.max<t?n.max:t)}function n(e){var i=u(),n=i._rgba=[];return e=e.toLowerCase(),p(l,function(t,s){var r,o=s.re.exec(e),a=o&&s.parse(o),l=s.space||"rgba";return a?(r=i[l](a),i[h[l].cache]=r[h[l].cache],n=i._rgba=r._rgba,!1):void 0}),n.length?("0,0,0,0"===n.join()&&t.extend(n,r.transparent),i):r[e]}function s(t,e,i){return i=(i+1)%1,1>6*i?t+(e-t)*i*6:1>2*i?e:2>3*i?t+(e-t)*(2/3-i)*6:t}var r,o="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",a=/^([\-+])=\s*(\d+\.?\d*)/,l=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],u=t.Color=function(e,i,n,s){return new t.Color.fn.parse(e,i,n,s)},h={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},c={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},d=u.support={},f=t("<p>")[0],p=t.each;f.style.cssText="background-color:rgba(1,1,1,.5)",d.rgba=f.style.backgroundColor.indexOf("rgba")>-1,p(h,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}}),u.fn=t.extend(u.prototype,{parse:function(s,o,a,l){if(s===e)return this._rgba=[null,null,null,null],this;(s.jquery||s.nodeType)&&(s=t(s).css(o),o=e);var c=this,d=t.type(s),f=this._rgba=[];return o!==e&&(s=[s,o,a,l],d="array"),"string"===d?this.parse(n(s)||r._default):"array"===d?(p(h.rgba.props,function(t,e){f[e.idx]=i(s[e.idx],e)}),this):"object"===d?(s instanceof u?p(h,function(t,e){s[e.cache]&&(c[e.cache]=s[e.cache].slice())}):p(h,function(e,n){var r=n.cache;p(n.props,function(t,e){if(!c[r]&&n.to){if("alpha"===t||null==s[t])return;c[r]=n.to(c._rgba)}c[r][e.idx]=i(s[t],e,!0)}),c[r]&&t.inArray(null,c[r].slice(0,3))<0&&(c[r][3]=1,n.from&&(c._rgba=n.from(c[r])))}),this):void 0},is:function(t){var e=u(t),i=!0,n=this;return p(h,function(t,s){var r,o=e[s.cache];return o&&(r=n[s.cache]||s.to&&s.to(n._rgba)||[],p(s.props,function(t,e){return null!=o[e.idx]?i=o[e.idx]===r[e.idx]:void 0})),i}),i},_space:function(){var t=[],e=this;return p(h,function(i,n){e[n.cache]&&t.push(i)}),t.pop()},transition:function(t,e){var n=u(t),s=n._space(),r=h[s],o=0===this.alpha()?u("transparent"):this,a=o[r.cache]||r.to(o._rgba),l=a.slice();return n=n[r.cache],p(r.props,function(t,s){var r=s.idx,o=a[r],u=n[r],h=c[s.type]||{};null!==u&&(null===o?l[r]=u:(h.mod&&(u-o>h.mod/2?o+=h.mod:o-u>h.mod/2&&(o-=h.mod)),l[r]=i((u-o)*e+o,s)))}),this[s](l)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),n=i.pop(),s=u(e)._rgba;return u(t.map(i,function(t,e){return(1-n)*s[e]+n*t}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&3>e&&(t=Math.round(100*t)+"%"),t});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),n=i.pop();return e&&i.push(~~(255*n)),"#"+t.map(i,function(t){return t=(t||0).toString(16),1===t.length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),u.fn.parse.prototype=u.fn,h.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,n=t[0]/255,s=t[1]/255,r=t[2]/255,o=t[3],a=Math.max(n,s,r),l=Math.min(n,s,r),u=a-l,h=a+l,c=.5*h;return e=l===a?0:n===a?60*(s-r)/u+360:s===a?60*(r-n)/u+120:60*(n-s)/u+240,i=0===u?0:.5>=c?u/h:u/(2-h),[Math.round(e)%360,i,c,null==o?1:o]},h.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],n=t[2],r=t[3],o=.5>=n?n*(1+i):n+i-n*i,a=2*n-o;return[Math.round(255*s(a,o,e+1/3)),Math.round(255*s(a,o,e)),Math.round(255*s(a,o,e-1/3)),r]},p(h,function(n,s){var r=s.props,o=s.cache,l=s.to,h=s.from;u.fn[n]=function(n){if(l&&!this[o]&&(this[o]=l(this._rgba)),n===e)return this[o].slice();var s,a=t.type(n),c="array"===a||"object"===a?n:arguments,d=this[o].slice();return p(r,function(t,e){var n=c["object"===a?t:e.idx];null==n&&(n=d[e.idx]),d[e.idx]=i(n,e)}),h?(s=u(h(d)),s[o]=d,s):u(d)},p(r,function(e,i){u.fn[e]||(u.fn[e]=function(s){var r,o=t.type(s),l="alpha"===e?this._hsla?"hsla":"rgba":n,u=this[l](),h=u[i.idx];return"undefined"===o?h:("function"===o&&(s=s.call(this,h),o=t.type(s)),null==s&&i.empty?this:("string"===o&&(r=a.exec(s),r&&(s=h+parseFloat(r[2])*("+"===r[1]?1:-1))),u[i.idx]=s,this[l](u)))})})}),u.hook=function(e){var i=e.split(" ");p(i,function(e,i){t.cssHooks[i]={set:function(e,s){var r,o,a="";if("transparent"!==s&&("string"!==t.type(s)||(r=n(s)))){if(s=u(r||s),!d.rgba&&1!==s._rgba[3]){for(o="backgroundColor"===i?e.parentNode:e;(""===a||"transparent"===a)&&o&&o.style;)try{a=t.css(o,"backgroundColor"),o=o.parentNode}catch(l){}s=s.blend(a&&"transparent"!==a?a:"_default")}s=s.toRgbaString()}try{e.style[i]=s}catch(l){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=u(e.elem,i),e.end=u(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}})},u.hook(o),t.cssHooks.borderColor={expand:function(t){var e={};return p(["Top","Right","Bottom","Left"],function(i,n){e["border"+n+"Color"]=t}),e}},r=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(e),function(){function n(e){var i,n,s=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,r={};if(s&&s.length&&s[0]&&s[s[0]])for(n=s.length;n--;)i=s[n],"string"==typeof s[i]&&(r[t.camelCase(i)]=s[i]);else for(i in s)"string"==typeof s[i]&&(r[i]=s[i]);return r}function s(e,i){var n,s,r={};for(n in i)s=i[n],e[n]!==s&&(o[n]||(t.fx.step[n]||!isNaN(parseFloat(s)))&&(r[n]=s));return r}var r=["add","remove","toggle"],o={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(i,n){t.fx.step[n]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(e.style(t.elem,n,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(e,i,o,a){var l=t.speed(i,o,a);return this.queue(function(){var i,o=t(this),a=o.attr("class")||"",u=l.children?o.find("*").addBack():o;u=u.map(function(){var e=t(this);return{el:e,start:n(this)}}),i=function(){t.each(r,function(t,i){e[i]&&o[i+"Class"](e[i])})},i(),u=u.map(function(){return this.end=n(this.el[0]),this.diff=s(this.start,this.end),this}),o.attr("class",a),u=u.map(function(){var e=this,i=t.Deferred(),n=t.extend({},l,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,n),i.promise()}),t.when.apply(t,u.get()).done(function(){i(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),l.complete.call(o[0])})})},t.fn.extend({addClass:function(e){return function(i,n,s,r){return n?t.effects.animateClass.call(this,{add:i},n,s,r):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,n,s,r){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},n,s,r):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(e){return function(n,s,r,o,a){return"boolean"==typeof s||s===i?r?t.effects.animateClass.call(this,s?{add:n}:{remove:n},r,o,a):e.apply(this,arguments):t.effects.animateClass.call(this,{toggle:n},s,r,o)}}(t.fn.toggleClass),switchClass:function(e,i,n,s,r){return t.effects.animateClass.call(this,{add:i,remove:e},n,s,r)}})}(),function(){function e(e,i,n,s){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(s=i,n=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(s=n,n=i,i={}),t.isFunction(n)&&(s=n,n=null),i&&t.extend(e,i),n=n||i.duration,e.duration=t.fx.off?0:"number"==typeof n?n:n in t.fx.speeds?t.fx.speeds[n]:t.fx.speeds._default,e.complete=s||i.complete,e}function s(e){return!e||"number"==typeof e||t.fx.speeds[e]?!0:"string"!=typeof e||t.effects.effect[e]?t.isFunction(e)?!0:"object"!=typeof e||e.effect?!1:!0:!0}t.extend(t.effects,{version:"1.10.3",save:function(t,e){for(var i=0;i<e.length;i++)null!==e[i]&&t.data(n+e[i],t[0].style[e[i]])},restore:function(t,e){var s,r;for(r=0;r<e.length;r++)null!==e[r]&&(s=t.data(n+e[r]),s===i&&(s=""),t.css(e[r],s))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},getBaseline:function(t,e){var i,n;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":n=0;break;case"center":n=.5;break;case"right":n=1;break;default:n=t[1]/e.width}return{x:n,y:i}},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),"float":e.css("float")},n=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),s={width:e.width(),height:e.height()},r=document.activeElement;try{r.id}catch(o){r=document.body}return e.wrap(n),(e[0]===r||t.contains(e[0],r))&&t(r).focus(),n=e.parent(),"static"===e.css("position")?(n.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,n){i[n]=e.css(n),isNaN(parseInt(i[n],10))&&(i[n]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(s),n.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).focus()),e},setTransition:function(e,i,n,s){return s=s||{},t.each(i,function(t,i){var r=e.cssUnit(i);r[0]>0&&(s[i]=r[0]*n+r[1])}),s}}),t.fn.extend({effect:function(){function i(e){function i(){t.isFunction(r)&&r.call(s[0]),t.isFunction(e)&&e()}var s=t(this),r=n.complete,a=n.mode;(s.is(":hidden")?"hide"===a:"show"===a)?(s[a](),i()):o.call(s[0],n,i)}var n=e.apply(this,arguments),s=n.mode,r=n.queue,o=t.effects.effect[n.effect];return t.fx.off||!o?s?this[s](n.duration,n.complete):this.each(function(){n.complete&&n.complete.call(this)}):r===!1?this.each(i):this.queue(r||"fx",i)},show:function(t){return function(i){if(s(i))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="show",this.effect.call(this,n)}}(t.fn.show),hide:function(t){return function(i){if(s(i))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="hide",this.effect.call(this,n)}}(t.fn.hide),toggle:function(t){return function(i){if(s(i)||"boolean"==typeof i)return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),n=[];return t.each(["em","px","%","pt"],function(t,e){i.indexOf(e)>0&&(n=[parseFloat(i),e])}),n}})}(),function(){var e={};t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,i){e[i]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;t<((e=Math.pow(2,--i))-1)/11;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return.5>t?i(2*t)/2:1-i(-2*t+2)/2}})}()}(e),function(t){var e=0,i={},n={};i.height=i.paddingTop=i.paddingBottom=i.borderTopWidth=i.borderBottomWidth="hide",n.height=n.paddingTop=n.paddingBottom=n.borderTopWidth=n.borderBottomWidth="show",t.widget("ui.accordion",{version:"1.10.3",options:{active:0,animate:{},collapsible:!1,event:"click",header:"> li > :first-child,> :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},_create:function(){var e=this.options;this.prevShow=this.prevHide=t(),this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role","tablist"),e.collapsible||e.active!==!1&&null!=e.active||(e.active=0),this._processPanels(),e.active<0&&(e.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():t(),content:this.active.length?this.active.next():t()}},_createIcons:function(){var e=this.options.icons;e&&(t("<span>").addClass("ui-accordion-header-icon ui-icon "+e.header).prependTo(this.headers),this.active.children(".ui-accordion-header-icon").removeClass(e.header).addClass(e.activeHeader),this.headers.addClass("ui-accordion-icons"))},_destroyIcons:function(){this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()},_destroy:function(){var t;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"),this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),this._destroyIcons(),t=this.headers.next().css("display","").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),"content"!==this.options.heightStyle&&t.css("height","")},_setOption:function(t,e){return"active"===t?void this._activate(e):("event"===t&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(e)),this._super(t,e),"collapsible"!==t||e||this.options.active!==!1||this._activate(0),"icons"===t&&(this._destroyIcons(),e&&this._createIcons()),void("disabled"===t&&this.headers.add(this.headers.next()).toggleClass("ui-state-disabled",!!e)))},_keydown:function(e){if(!e.altKey&&!e.ctrlKey){var i=t.ui.keyCode,n=this.headers.length,s=this.headers.index(e.target),r=!1;switch(e.keyCode){case i.RIGHT:case i.DOWN:r=this.headers[(s+1)%n];break;case i.LEFT:case i.UP:r=this.headers[(s-1+n)%n];break;case i.SPACE:case i.ENTER:this._eventHandler(e);break;case i.HOME:r=this.headers[0];break;case i.END:r=this.headers[n-1]}r&&(t(e.target).attr("tabIndex",-1),t(r).attr("tabIndex",0),r.focus(),e.preventDefault())}},_panelKeyDown:function(e){e.keyCode===t.ui.keyCode.UP&&e.ctrlKey&&t(e.currentTarget).prev().focus()},refresh:function(){var e=this.options;this._processPanels(),e.active===!1&&e.collapsible===!0||!this.headers.length?(e.active=!1,this.active=t()):e.active===!1?this._activate(0):this.active.length&&!t.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(e.active=!1,this.active=t()):this._activate(Math.max(0,e.active-1)):e.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){this.headers=this.element.find(this.options.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"),this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide()},_refresh:function(){var i,n=this.options,s=n.heightStyle,r=this.element.parent(),o=this.accordionId="ui-accordion-"+(this.element.attr("id")||++e);this.active=this._findActive(n.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all"),this.active.next().addClass("ui-accordion-content-active").show(),this.headers.attr("role","tab").each(function(e){var i=t(this),n=i.attr("id"),s=i.next(),r=s.attr("id");n||(n=o+"-header-"+e,i.attr("id",n)),r||(r=o+"-panel-"+e,s.attr("id",r)),i.attr("aria-controls",r),s.attr("aria-labelledby",n)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false",tabIndex:-1}).next().attr({"aria-expanded":"false","aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true",tabIndex:0}).next().attr({"aria-expanded":"true","aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(n.event),"fill"===s?(i=r.height(),this.element.siblings(":visible").each(function(){var e=t(this),n=e.css("position");"absolute"!==n&&"fixed"!==n&&(i-=e.outerHeight(!0))}),this.headers.each(function(){i-=t(this).outerHeight(!0)}),this.headers.next().each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===s&&(i=0,this.headers.next().each(function(){i=Math.max(i,t(this).css("height","").height())}).height(i))},_activate:function(e){var i=this._findActive(e)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return"number"==typeof e?this.headers.eq(e):t()},_setupEvents:function(e){var i={keydown:"_keydown"};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(e){var i=this.options,n=this.active,s=t(e.currentTarget),r=s[0]===n[0],o=r&&i.collapsible,a=o?t():s.next(),l=n.next(),u={oldHeader:n,oldPanel:l,newHeader:o?t():s,newPanel:a};e.preventDefault(),r&&!i.collapsible||this._trigger("beforeActivate",e,u)===!1||(i.active=o?!1:this.headers.index(s),this.active=r?t():s,this._toggle(u),n.removeClass("ui-accordion-header-active ui-state-active"),i.icons&&n.children(".ui-accordion-header-icon").removeClass(i.icons.activeHeader).addClass(i.icons.header),r||(s.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"),i.icons&&s.children(".ui-accordion-header-icon").removeClass(i.icons.header).addClass(i.icons.activeHeader),s.next().addClass("ui-accordion-content-active")))},_toggle:function(e){var i=e.newPanel,n=this.prevShow.length?this.prevShow:e.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=n,this.options.animate?this._animate(i,n,e):(n.hide(),i.show(),this._toggleComplete(e)),n.attr({"aria-expanded":"false","aria-hidden":"true"}),n.prev().attr("aria-selected","false"),i.length&&n.length?n.prev().attr("tabIndex",-1):i.length&&this.headers.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),i.attr({"aria-expanded":"true","aria-hidden":"false"}).prev().attr({"aria-selected":"true",tabIndex:0})},_animate:function(t,e,s){var r,o,a,l=this,u=0,h=t.length&&(!e.length||t.index()<e.index()),c=this.options.animate||{},d=h&&c.down||c,f=function(){l._toggleComplete(s)};return"number"==typeof d&&(a=d),"string"==typeof d&&(o=d),o=o||d.easing||c.easing,a=a||d.duration||c.duration,e.length?t.length?(r=t.show().outerHeight(),e.animate(i,{duration:a,easing:o,step:function(t,e){e.now=Math.round(t)}}),void t.hide().animate(n,{duration:a,easing:o,complete:f,step:function(t,i){i.now=Math.round(t),"height"!==i.prop?u+=i.now:"content"!==l.options.heightStyle&&(i.now=Math.round(r-e.outerHeight()-u),u=0)}})):e.animate(i,a,o,f):t.animate(n,a,o,f)},_toggleComplete:function(t){var e=t.oldPanel;e.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"),e.length&&(e.parent()[0].className=e.parent()[0].className),this._trigger("activate",null,t)}})}(e),function(t){var e=0;t.widget("ui.autocomplete",{version:"1.10.3",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},pending:0,_create:function(){var e,i,n,s=this.element[0].nodeName.toLowerCase(),r="textarea"===s,o="input"===s;this.isMultiLine=r?!0:o?!1:this.element.prop("isContentEditable"),this.valueMethod=this.element[r||o?"val":"text"],this.isNewMenu=!0,this.element.addClass("ui-autocomplete-input").attr("autocomplete","off"),this._on(this.element,{keydown:function(s){if(this.element.prop("readOnly"))return e=!0,n=!0,void(i=!0);e=!1,n=!1,i=!1;var r=t.ui.keyCode;switch(s.keyCode){case r.PAGE_UP:e=!0,this._move("previousPage",s);break;case r.PAGE_DOWN:e=!0,this._move("nextPage",s);break;case r.UP:e=!0,this._keyEvent("previous",s);break;case r.DOWN:e=!0,this._keyEvent("next",s);break;case r.ENTER:case r.NUMPAD_ENTER:this.menu.active&&(e=!0,s.preventDefault(),this.menu.select(s));break;case r.TAB:this.menu.active&&this.menu.select(s);break;case r.ESCAPE:this.menu.element.is(":visible")&&(this._value(this.term),this.close(s),s.preventDefault());break;default:i=!0,this._searchTimeout(s)}},keypress:function(n){if(e)return e=!1,void((!this.isMultiLine||this.menu.element.is(":visible"))&&n.preventDefault());if(!i){var s=t.ui.keyCode;switch(n.keyCode){case s.PAGE_UP:this._move("previousPage",n);break;case s.PAGE_DOWN:this._move("nextPage",n);break;case s.UP:this._keyEvent("previous",n);break;case s.DOWN:this._keyEvent("next",n)}}},input:function(t){return n?(n=!1,void t.preventDefault()):void this._searchTimeout(t)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(t){return this.cancelBlur?void delete this.cancelBlur:(clearTimeout(this.searching),this.close(t),void this._change(t))}}),this._initSource(),this.menu=t("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({role:null}).hide().data("ui-menu"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur});var i=this.menu.element[0];t(e.target).closest(".ui-menu-item").length||this._delay(function(){var e=this;this.document.one("mousedown",function(n){n.target===e.element[0]||n.target===i||t.contains(i,n.target)||e.close()})})},menufocus:function(e,i){if(this.isNewMenu&&(this.isNewMenu=!1,e.originalEvent&&/^mouse/.test(e.originalEvent.type)))return this.menu.blur(),void this.document.one("mousemove",function(){t(e.target).trigger(e.originalEvent)});var n=i.item.data("ui-autocomplete-item");!1!==this._trigger("focus",e,{item:n})?e.originalEvent&&/^key/.test(e.originalEvent.type)&&this._value(n.value):this.liveRegion.text(n.value)},menuselect:function(t,e){var i=e.item.data("ui-autocomplete-item"),n=this.previous;this.element[0]!==this.document[0].activeElement&&(this.element.focus(),this.previous=n,this._delay(function(){this.previous=n,this.selectedItem=i})),!1!==this._trigger("select",t,{item:i})&&this._value(i.value),this.term=this._value(),this.close(t),this.selectedItem=i}}),this.liveRegion=t("<span>",{role:"status","aria-live":"polite"}).addClass("ui-helper-hidden-accessible").insertBefore(this.element),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(t,e){this._super(t,e),"source"===t&&this._initSource(),"appendTo"===t&&this.menu.element.appendTo(this._appendTo()),"disabled"===t&&e&&this.xhr&&this.xhr.abort()},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e||(e=this.element.closest(".ui-front")),e.length||(e=this.document[0].body),e},_initSource:function(){var e,i,n=this;t.isArray(this.options.source)?(e=this.options.source,this.source=function(i,n){n(t.ui.autocomplete.filter(e,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(e,s){n.xhr&&n.xhr.abort(),n.xhr=t.ajax({url:i,data:e,dataType:"json",success:function(t){s(t)},error:function(){s([])}})}):this.source=this.options.source},_searchTimeout:function(t){clearTimeout(this.searching),this.searching=this._delay(function(){this.term!==this._value()&&(this.selectedItem=null,this.search(null,t))},this.options.delay)},search:function(t,e){return t=null!=t?t:this._value(),this.term=this._value(),t.length<this.options.minLength?this.close(e):this._trigger("search",e)!==!1?this._search(t):void 0},_search:function(t){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:t},this._response())},_response:function(){var t=this,i=++e;return function(n){i===e&&t.__response(n),t.pending--,t.pending||t.element.removeClass("ui-autocomplete-loading")}},__response:function(t){t&&(t=this._normalize(t)),this._trigger("response",null,{content:t}),!this.options.disabled&&t&&t.length&&!this.cancelSearch?(this._suggest(t),this._trigger("open")):this._close()},close:function(t){this.cancelSearch=!0,this._close(t)},_close:function(t){this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",t))},_change:function(t){this.previous!==this._value()&&this._trigger("change",t,{item:this.selectedItem})},_normalize:function(e){return e.length&&e[0].label&&e[0].value?e:t.map(e,function(e){return"string"==typeof e?{label:e,value:e}:t.extend({label:e.label||e.value,value:e.value||e.label},e)})},_suggest:function(e){var i=this.menu.element.empty();this._renderMenu(i,e),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(t.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next()},_resizeMenu:function(){var t=this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(e,i){var n=this;t.each(i,function(t,i){n._renderItemData(e,i)})},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-autocomplete-item",e)},_renderItem:function(e,i){return t("<li>").append(t("<a>").text(i.label)).appendTo(e)},_move:function(t,e){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(t)||this.menu.isLastItem()&&/^next/.test(t)?(this._value(this.term),void this.menu.blur()):void this.menu[t](e):void this.search(null,e)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(t,e){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(t,e),e.preventDefault())}}),t.extend(t.ui.autocomplete,{escapeRegex:function(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(e,i){var n=new RegExp(t.ui.autocomplete.escapeRegex(i),"i");return t.grep(e,function(t){return n.test(t.label||t.value||t)})}}),t.widget("ui.autocomplete",t.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(t){return t+(t>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(t){var e;this._superApply(arguments),this.options.disabled||this.cancelSearch||(e=t&&t.length?this.options.messages.results(t.length):this.options.messages.noResults,this.liveRegion.text(e))}})}(e),function(t){var e,i,n,s,r="ui-button ui-widget ui-state-default ui-corner-all",o="ui-state-hover ui-state-active ",a="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",l=function(){var e=t(this);setTimeout(function(){e.find(":ui-button").button("refresh")},1)},u=function(e){var i=e.name,n=e.form,s=t([]);return i&&(i=i.replace(/'/g,"\\'"),s=n?t(n).find("[name='"+i+"']"):t("[name='"+i+"']",e.ownerDocument).filter(function(){return!this.form})),s};t.widget("ui.button",{version:"1.10.3",defaultElement:"<button>",options:{disabled:null,text:!0,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset"+this.eventNamespace).bind("reset"+this.eventNamespace,l),"boolean"!=typeof this.options.disabled?this.options.disabled=!!this.element.prop("disabled"):this.element.prop("disabled",this.options.disabled),this._determineButtonType(),this.hasTitle=!!this.buttonElement.attr("title");
var o=this,a=this.options,h="checkbox"===this.type||"radio"===this.type,c=h?"":"ui-state-active",d="ui-state-focus";null===a.label&&(a.label="input"===this.type?this.buttonElement.val():this.buttonElement.html()),this._hoverable(this.buttonElement),this.buttonElement.addClass(r).attr("role","button").bind("mouseenter"+this.eventNamespace,function(){a.disabled||this===e&&t(this).addClass("ui-state-active")}).bind("mouseleave"+this.eventNamespace,function(){a.disabled||t(this).removeClass(c)}).bind("click"+this.eventNamespace,function(t){a.disabled&&(t.preventDefault(),t.stopImmediatePropagation())}),this.element.bind("focus"+this.eventNamespace,function(){o.buttonElement.addClass(d)}).bind("blur"+this.eventNamespace,function(){o.buttonElement.removeClass(d)}),h&&(this.element.bind("change"+this.eventNamespace,function(){s||o.refresh()}),this.buttonElement.bind("mousedown"+this.eventNamespace,function(t){a.disabled||(s=!1,i=t.pageX,n=t.pageY)}).bind("mouseup"+this.eventNamespace,function(t){a.disabled||(i!==t.pageX||n!==t.pageY)&&(s=!0)})),"checkbox"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){return a.disabled||s?!1:void 0}):"radio"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){if(a.disabled||s)return!1;t(this).addClass("ui-state-active"),o.buttonElement.attr("aria-pressed","true");var e=o.element[0];u(e).not(e).map(function(){return t(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed","false")}):(this.buttonElement.bind("mousedown"+this.eventNamespace,function(){return a.disabled?!1:(t(this).addClass("ui-state-active"),e=this,void o.document.one("mouseup",function(){e=null}))}).bind("mouseup"+this.eventNamespace,function(){return a.disabled?!1:void t(this).removeClass("ui-state-active")}).bind("keydown"+this.eventNamespace,function(e){return a.disabled?!1:void((e.keyCode===t.ui.keyCode.SPACE||e.keyCode===t.ui.keyCode.ENTER)&&t(this).addClass("ui-state-active"))}).bind("keyup"+this.eventNamespace+" blur"+this.eventNamespace,function(){t(this).removeClass("ui-state-active")}),this.buttonElement.is("a")&&this.buttonElement.keyup(function(e){e.keyCode===t.ui.keyCode.SPACE&&t(this).click()})),this._setOption("disabled",a.disabled),this._resetButton()},_determineButtonType:function(){var t,e,i;this.type=this.element.is("[type=checkbox]")?"checkbox":this.element.is("[type=radio]")?"radio":this.element.is("input")?"input":"button","checkbox"===this.type||"radio"===this.type?(t=this.element.parents().last(),e="label[for='"+this.element.attr("id")+"']",this.buttonElement=t.find(e),this.buttonElement.length||(t=t.length?t.siblings():this.element.siblings(),this.buttonElement=t.filter(e),this.buttonElement.length||(this.buttonElement=t.find(e))),this.element.addClass("ui-helper-hidden-accessible"),i=this.element.is(":checked"),i&&this.buttonElement.addClass("ui-state-active"),this.buttonElement.prop("aria-pressed",i)):this.buttonElement=this.element},widget:function(){return this.buttonElement},_destroy:function(){this.element.removeClass("ui-helper-hidden-accessible"),this.buttonElement.removeClass(r+" "+o+" "+a).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()),this.hasTitle||this.buttonElement.removeAttr("title")},_setOption:function(t,e){return this._super(t,e),"disabled"===t?void(e?this.element.prop("disabled",!0):this.element.prop("disabled",!1)):void this._resetButton()},refresh:function(){var e=this.element.is("input, button")?this.element.is(":disabled"):this.element.hasClass("ui-button-disabled");e!==this.options.disabled&&this._setOption("disabled",e),"radio"===this.type?u(this.element[0]).each(function(){t(this).is(":checked")?t(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true"):t(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false")}):"checkbox"===this.type&&(this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true"):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false"))},_resetButton:function(){if("input"===this.type)return void(this.options.label&&this.element.val(this.options.label));var e=this.buttonElement.removeClass(a),i=t("<span></span>",this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(e.empty()).text(),n=this.options.icons,s=n.primary&&n.secondary,r=[];n.primary||n.secondary?(this.options.text&&r.push("ui-button-text-icon"+(s?"s":n.primary?"-primary":"-secondary")),n.primary&&e.prepend("<span class='ui-button-icon-primary ui-icon "+n.primary+"'></span>"),n.secondary&&e.append("<span class='ui-button-icon-secondary ui-icon "+n.secondary+"'></span>"),this.options.text||(r.push(s?"ui-button-icons-only":"ui-button-icon-only"),this.hasTitle||e.attr("title",t.trim(i)))):r.push("ui-button-text-only"),e.addClass(r.join(" "))}}),t.widget("ui.buttonset",{version:"1.10.3",options:{items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(t,e){"disabled"===t&&this.buttons.button("option",t,e),this._super(t,e)},refresh:function(){var e="rtl"===this.element.css("direction");this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){return t(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(e?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(e?"ui-corner-left":"ui-corner-right").end().end()},_destroy:function(){this.element.removeClass("ui-buttonset"),this.buttons.map(function(){return t(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy")}})}(e),function(t,e){function i(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},t.extend(this._defaults,this.regional[""]),this.dpDiv=n(t("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function n(e){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.delegate(i,"mouseout",function(){t(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).removeClass("ui-datepicker-next-hover")}).delegate(i,"mouseover",function(){t.datepicker._isDisabledDatepicker(r.inline?e.parent()[0]:r.input[0])||(t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),t(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).addClass("ui-datepicker-next-hover"))})}function s(e,i){t.extend(e,i);for(var n in i)null==i[n]&&(e[n]=i[n]);return e}t.extend(t.ui,{datepicker:{version:"1.10.3"}});var r,o="datepicker";t.extend(i.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(t){return s(this._defaults,t||{}),this},_attachDatepicker:function(e,i){var n,s,r;n=e.nodeName.toLowerCase(),s="div"===n||"span"===n,e.id||(this.uuid+=1,e.id="dp"+this.uuid),r=this._newInst(t(e),s),r.settings=t.extend({},i||{}),"input"===n?this._connectDatepicker(e,r):s&&this._inlineDatepicker(e,r)},_newInst:function(e,i){var s=e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:s,input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?n(t("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,i){var n=t(e);i.append=t([]),i.trigger=t([]),n.hasClass(this.markerClassName)||(this._attachments(n,i),n.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp),this._autoSize(i),t.data(e,o,i),i.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,i){var n,s,r,o=this._get(i,"appendText"),a=this._get(i,"isRTL");i.append&&i.append.remove(),o&&(i.append=t("<span class='"+this._appendClass+"'>"+o+"</span>"),e[a?"before":"after"](i.append)),e.unbind("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),n=this._get(i,"showOn"),("focus"===n||"both"===n)&&e.focus(this._showDatepicker),("button"===n||"both"===n)&&(s=this._get(i,"buttonText"),r=this._get(i,"buttonImage"),i.trigger=t(this._get(i,"buttonImageOnly")?t("<img/>").addClass(this._triggerClass).attr({src:r,alt:s,title:s}):t("<button type='button'></button>").addClass(this._triggerClass).html(r?t("<img/>").attr({src:r,alt:s,title:s}):s)),e[a?"before":"after"](i.trigger),i.trigger.click(function(){return t.datepicker._datepickerShowing&&t.datepicker._lastInput===e[0]?t.datepicker._hideDatepicker():t.datepicker._datepickerShowing&&t.datepicker._lastInput!==e[0]?(t.datepicker._hideDatepicker(),t.datepicker._showDatepicker(e[0])):t.datepicker._showDatepicker(e[0]),!1}))},_autoSize:function(t){if(this._get(t,"autoSize")&&!t.inline){var e,i,n,s,r=new Date(2009,11,20),o=this._get(t,"dateFormat");o.match(/[DM]/)&&(e=function(t){for(i=0,n=0,s=0;s<t.length;s++)t[s].length>i&&(i=t[s].length,n=s);return n},r.setMonth(e(this._get(t,o.match(/MM/)?"monthNames":"monthNamesShort"))),r.setDate(e(this._get(t,o.match(/DD/)?"dayNames":"dayNamesShort"))+20-r.getDay())),t.input.attr("size",this._formatDate(t,r).length)}},_inlineDatepicker:function(e,i){var n=t(e);n.hasClass(this.markerClassName)||(n.addClass(this.markerClassName).append(i.dpDiv),t.data(e,o,i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(e),i.dpDiv.css("display","block"))},_dialogDatepicker:function(e,i,n,r,a){var l,u,h,c,d,f=this._dialogInst;return f||(this.uuid+=1,l="dp"+this.uuid,this._dialogInput=t("<input type='text' id='"+l+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.keydown(this._doKeyDown),t("body").append(this._dialogInput),f=this._dialogInst=this._newInst(this._dialogInput,!1),f.settings={},t.data(this._dialogInput[0],o,f)),s(f.settings,r||{}),i=i&&i.constructor===Date?this._formatDate(f,i):i,this._dialogInput.val(i),this._pos=a?a.length?a:[a.pageX,a.pageY]:null,this._pos||(u=document.documentElement.clientWidth,h=document.documentElement.clientHeight,c=document.documentElement.scrollLeft||document.body.scrollLeft,d=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[u/2-100+c,h/2-150+d]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),f.settings.onSelect=n,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),t.blockUI&&t.blockUI(this.dpDiv),t.data(this._dialogInput[0],o,f),this},_destroyDatepicker:function(e){var i,n=t(e),s=t.data(e,o);n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),t.removeData(e,o),"input"===i?(s.append.remove(),s.trigger.remove(),n.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):("div"===i||"span"===i)&&n.removeClass(this.markerClassName).empty())},_enableDatepicker:function(e){var i,n,s=t(e),r=t.data(e,o);s.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!1,r.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):("div"===i||"span"===i)&&(n=s.children("."+this._inlineClass),n.children().removeClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}))},_disableDatepicker:function(e){var i,n,s=t(e),r=t.data(e,o);s.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!0,r.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):("div"===i||"span"===i)&&(n=s.children("."+this._inlineClass),n.children().addClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}),this._disabledInputs[this._disabledInputs.length]=e)},_isDisabledDatepicker:function(t){if(!t)return!1;for(var e=0;e<this._disabledInputs.length;e++)if(this._disabledInputs[e]===t)return!0;return!1},_getInst:function(e){try{return t.data(e,o)}catch(i){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(i,n,r){var o,a,l,u,h=this._getInst(i);return 2===arguments.length&&"string"==typeof n?"defaults"===n?t.extend({},t.datepicker._defaults):h?"all"===n?t.extend({},h.settings):this._get(h,n):null:(o=n||{},"string"==typeof n&&(o={},o[n]=r),void(h&&(this._curInst===h&&this._hideDatepicker(),a=this._getDateDatepicker(i,!0),l=this._getMinMaxDate(h,"min"),u=this._getMinMaxDate(h,"max"),s(h.settings,o),null!==l&&o.dateFormat!==e&&o.minDate===e&&(h.settings.minDate=this._formatDate(h,l)),null!==u&&o.dateFormat!==e&&o.maxDate===e&&(h.settings.maxDate=this._formatDate(h,u)),"disabled"in o&&(o.disabled?this._disableDatepicker(i):this._enableDatepicker(i)),this._attachments(t(i),h),this._autoSize(h),this._setDate(h,a),this._updateAlternate(h),this._updateDatepicker(h))))},_changeDatepicker:function(t,e,i){this._optionDatepicker(t,e,i)},_refreshDatepicker:function(t){var e=this._getInst(t);e&&this._updateDatepicker(e)},_setDateDatepicker:function(t,e){var i=this._getInst(t);i&&(this._setDate(i,e),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(t,e){var i=this._getInst(t);return i&&!i.inline&&this._setDateFromField(i,e),i?this._getDate(i):null},_doKeyDown:function(e){var i,n,s,r=t.datepicker._getInst(e.target),o=!0,a=r.dpDiv.is(".ui-datepicker-rtl");if(r._keyEvent=!0,t.datepicker._datepickerShowing)switch(e.keyCode){case 9:t.datepicker._hideDatepicker(),o=!1;break;case 13:return s=t("td."+t.datepicker._dayOverClass+":not(."+t.datepicker._currentClass+")",r.dpDiv),s[0]&&t.datepicker._selectDay(e.target,r.selectedMonth,r.selectedYear,s[0]),i=t.datepicker._get(r,"onSelect"),i?(n=t.datepicker._formatDate(r),i.apply(r.input?r.input[0]:null,[n,r])):t.datepicker._hideDatepicker(),!1;case 27:t.datepicker._hideDatepicker();break;case 33:t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(r,"stepBigMonths"):-t.datepicker._get(r,"stepMonths"),"M");break;case 34:t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(r,"stepBigMonths"):+t.datepicker._get(r,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&t.datepicker._clearDate(e.target),o=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&t.datepicker._gotoToday(e.target),o=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,a?1:-1,"D"),o=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(r,"stepBigMonths"):-t.datepicker._get(r,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,-7,"D"),o=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,a?-1:1,"D"),o=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(r,"stepBigMonths"):+t.datepicker._get(r,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,7,"D"),o=e.ctrlKey||e.metaKey;break;default:o=!1}else 36===e.keyCode&&e.ctrlKey?t.datepicker._showDatepicker(this):o=!1;o&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var i,n,s=t.datepicker._getInst(e.target);return t.datepicker._get(s,"constrainInput")?(i=t.datepicker._possibleChars(t.datepicker._get(s,"dateFormat")),n=String.fromCharCode(null==e.charCode?e.keyCode:e.charCode),e.ctrlKey||e.metaKey||" ">n||!i||i.indexOf(n)>-1):void 0},_doKeyUp:function(e){var i,n=t.datepicker._getInst(e.target);if(n.input.val()!==n.lastVal)try{i=t.datepicker.parseDate(t.datepicker._get(n,"dateFormat"),n.input?n.input.val():null,t.datepicker._getFormatConfig(n)),i&&(t.datepicker._setDateFromField(n),t.datepicker._updateAlternate(n),t.datepicker._updateDatepicker(n))}catch(s){}return!0},_showDatepicker:function(e){if(e=e.target||e,"input"!==e.nodeName.toLowerCase()&&(e=t("input",e.parentNode)[0]),!t.datepicker._isDisabledDatepicker(e)&&t.datepicker._lastInput!==e){var i,n,r,o,a,l,u;i=t.datepicker._getInst(e),t.datepicker._curInst&&t.datepicker._curInst!==i&&(t.datepicker._curInst.dpDiv.stop(!0,!0),i&&t.datepicker._datepickerShowing&&t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])),n=t.datepicker._get(i,"beforeShow"),r=n?n.apply(e,[e,i]):{},r!==!1&&(s(i.settings,r),i.lastVal=null,t.datepicker._lastInput=e,t.datepicker._setDateFromField(i),t.datepicker._inDialog&&(e.value=""),t.datepicker._pos||(t.datepicker._pos=t.datepicker._findPos(e),t.datepicker._pos[1]+=e.offsetHeight),o=!1,t(e).parents().each(function(){return o|="fixed"===t(this).css("position"),!o}),a={left:t.datepicker._pos[0],top:t.datepicker._pos[1]},t.datepicker._pos=null,i.dpDiv.empty(),i.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),t.datepicker._updateDatepicker(i),a=t.datepicker._checkOffset(i,a,o),i.dpDiv.css({position:t.datepicker._inDialog&&t.blockUI?"static":o?"fixed":"absolute",display:"none",left:a.left+"px",top:a.top+"px"}),i.inline||(l=t.datepicker._get(i,"showAnim"),u=t.datepicker._get(i,"duration"),i.dpDiv.zIndex(t(e).zIndex()+1),t.datepicker._datepickerShowing=!0,t.effects&&t.effects.effect[l]?i.dpDiv.show(l,t.datepicker._get(i,"showOptions"),u):i.dpDiv[l||"show"](l?u:null),t.datepicker._shouldFocusInput(i)&&i.input.focus(),t.datepicker._curInst=i))}},_updateDatepicker:function(e){this.maxRows=4,r=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e),e.dpDiv.find("."+this._dayOverClass+" a").mouseover();var i,n=this._getNumberOfMonths(e),s=n[1],o=17;e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),s>1&&e.dpDiv.addClass("ui-datepicker-multi-"+s).css("width",o*s+"em"),e.dpDiv[(1!==n[0]||1!==n[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===t.datepicker._curInst&&t.datepicker._datepickerShowing&&t.datepicker._shouldFocusInput(e)&&e.input.focus(),e.yearshtml&&(i=e.yearshtml,setTimeout(function(){i===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),i=e.yearshtml=null},0))},_shouldFocusInput:function(t){return t.input&&t.input.is(":visible")&&!t.input.is(":disabled")&&!t.input.is(":focus")},_checkOffset:function(e,i,n){var s=e.dpDiv.outerWidth(),r=e.dpDiv.outerHeight(),o=e.input?e.input.outerWidth():0,a=e.input?e.input.outerHeight():0,l=document.documentElement.clientWidth+(n?0:t(document).scrollLeft()),u=document.documentElement.clientHeight+(n?0:t(document).scrollTop());return i.left-=this._get(e,"isRTL")?s-o:0,i.left-=n&&i.left===e.input.offset().left?t(document).scrollLeft():0,i.top-=n&&i.top===e.input.offset().top+a?t(document).scrollTop():0,i.left-=Math.min(i.left,i.left+s>l&&l>s?Math.abs(i.left+s-l):0),i.top-=Math.min(i.top,i.top+r>u&&u>r?Math.abs(r+a):0),i},_findPos:function(e){for(var i,n=this._getInst(e),s=this._get(n,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||t.expr.filters.hidden(e));)e=e[s?"previousSibling":"nextSibling"];return i=t(e).offset(),[i.left,i.top]},_hideDatepicker:function(e){var i,n,s,r,a=this._curInst;!a||e&&a!==t.data(e,o)||this._datepickerShowing&&(i=this._get(a,"showAnim"),n=this._get(a,"duration"),s=function(){t.datepicker._tidyDialog(a)},t.effects&&(t.effects.effect[i]||t.effects[i])?a.dpDiv.hide(i,t.datepicker._get(a,"showOptions"),n,s):a.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?n:null,s),i||s(),this._datepickerShowing=!1,r=this._get(a,"onClose"),r&&r.apply(a.input?a.input[0]:null,[a.input?a.input.val():"",a]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),t.blockUI&&(t.unblockUI(),t("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(t){t.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(e){if(t.datepicker._curInst){var i=t(e.target),n=t.datepicker._getInst(i[0]);(i[0].id!==t.datepicker._mainDivId&&0===i.parents("#"+t.datepicker._mainDivId).length&&!i.hasClass(t.datepicker.markerClassName)&&!i.closest("."+t.datepicker._triggerClass).length&&t.datepicker._datepickerShowing&&(!t.datepicker._inDialog||!t.blockUI)||i.hasClass(t.datepicker.markerClassName)&&t.datepicker._curInst!==n)&&t.datepicker._hideDatepicker()}},_adjustDate:function(e,i,n){var s=t(e),r=this._getInst(s[0]);this._isDisabledDatepicker(s[0])||(this._adjustInstDate(r,i+("M"===n?this._get(r,"showCurrentAtPos"):0),n),this._updateDatepicker(r))},_gotoToday:function(e){var i,n=t(e),s=this._getInst(n[0]);this._get(s,"gotoCurrent")&&s.currentDay?(s.selectedDay=s.currentDay,s.drawMonth=s.selectedMonth=s.currentMonth,s.drawYear=s.selectedYear=s.currentYear):(i=new Date,s.selectedDay=i.getDate(),s.drawMonth=s.selectedMonth=i.getMonth(),s.drawYear=s.selectedYear=i.getFullYear()),this._notifyChange(s),this._adjustDate(n)},_selectMonthYear:function(e,i,n){var s=t(e),r=this._getInst(s[0]);r["selected"+("M"===n?"Month":"Year")]=r["draw"+("M"===n?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(r),this._adjustDate(s)},_selectDay:function(e,i,n,s){var r,o=t(e);t(s).hasClass(this._unselectableClass)||this._isDisabledDatepicker(o[0])||(r=this._getInst(o[0]),r.selectedDay=r.currentDay=t("a",s).html(),r.selectedMonth=r.currentMonth=i,r.selectedYear=r.currentYear=n,this._selectDate(e,this._formatDate(r,r.currentDay,r.currentMonth,r.currentYear)))},_clearDate:function(e){var i=t(e);this._selectDate(i,"")},_selectDate:function(e,i){var n,s=t(e),r=this._getInst(s[0]);i=null!=i?i:this._formatDate(r),r.input&&r.input.val(i),this._updateAlternate(r),n=this._get(r,"onSelect"),n?n.apply(r.input?r.input[0]:null,[i,r]):r.input&&r.input.trigger("change"),r.inline?this._updateDatepicker(r):(this._hideDatepicker(),this._lastInput=r.input[0],"object"!=typeof r.input[0]&&r.input.focus(),this._lastInput=null)},_updateAlternate:function(e){var i,n,s,r=this._get(e,"altField");r&&(i=this._get(e,"altFormat")||this._get(e,"dateFormat"),n=this._getDate(e),s=this.formatDate(i,n,this._getFormatConfig(e)),t(r).each(function(){t(this).val(s)}))},noWeekends:function(t){var e=t.getDay();return[e>0&&6>e,""]},iso8601Week:function(t){var e,i=new Date(t.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),e=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((e-i)/864e5)/7)+1},parseDate:function(e,i,n){if(null==e||null==i)throw"Invalid arguments";if(i="object"==typeof i?i.toString():i+"",""===i)return null;var s,r,o,a,l=0,u=(n?n.shortYearCutoff:null)||this._defaults.shortYearCutoff,h="string"!=typeof u?u:(new Date).getFullYear()%100+parseInt(u,10),c=(n?n.dayNamesShort:null)||this._defaults.dayNamesShort,d=(n?n.dayNames:null)||this._defaults.dayNames,f=(n?n.monthNamesShort:null)||this._defaults.monthNamesShort,p=(n?n.monthNames:null)||this._defaults.monthNames,m=-1,g=-1,v=-1,b=-1,y=!1,_=function(t){var i=s+1<e.length&&e.charAt(s+1)===t;return i&&s++,i},w=function(t){var e=_(t),n="@"===t?14:"!"===t?20:"y"===t&&e?4:"o"===t?3:2,s=new RegExp("^\\d{1,"+n+"}"),r=i.substring(l).match(s);if(!r)throw"Missing number at position "+l;return l+=r[0].length,parseInt(r[0],10)},x=function(e,n,s){var r=-1,o=t.map(_(e)?s:n,function(t,e){return[[e,t]]}).sort(function(t,e){return-(t[1].length-e[1].length)});if(t.each(o,function(t,e){var n=e[1];return i.substr(l,n.length).toLowerCase()===n.toLowerCase()?(r=e[0],l+=n.length,!1):void 0}),-1!==r)return r+1;throw"Unknown name at position "+l},k=function(){if(i.charAt(l)!==e.charAt(s))throw"Unexpected literal at position "+l;l++};for(s=0;s<e.length;s++)if(y)"'"!==e.charAt(s)||_("'")?k():y=!1;else switch(e.charAt(s)){case"d":v=w("d");break;case"D":x("D",c,d);break;case"o":b=w("o");break;case"m":g=w("m");break;case"M":g=x("M",f,p);break;case"y":m=w("y");break;case"@":a=new Date(w("@")),m=a.getFullYear(),g=a.getMonth()+1,v=a.getDate();break;case"!":a=new Date((w("!")-this._ticksTo1970)/1e4),m=a.getFullYear(),g=a.getMonth()+1,v=a.getDate();break;case"'":_("'")?k():y=!0;break;default:k()}if(l<i.length&&(o=i.substr(l),!/^\s+/.test(o)))throw"Extra/unparsed characters found in date: "+o;if(-1===m?m=(new Date).getFullYear():100>m&&(m+=(new Date).getFullYear()-(new Date).getFullYear()%100+(h>=m?0:-100)),b>-1)for(g=1,v=b;;){if(r=this._getDaysInMonth(m,g-1),r>=v)break;g++,v-=r}if(a=this._daylightSavingAdjust(new Date(m,g-1,v)),a.getFullYear()!==m||a.getMonth()+1!==g||a.getDate()!==v)throw"Invalid date";return a},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*60*60*1e7,formatDate:function(t,e,i){if(!e)return"";var n,s=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,r=(i?i.dayNames:null)||this._defaults.dayNames,o=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,a=(i?i.monthNames:null)||this._defaults.monthNames,l=function(e){var i=n+1<t.length&&t.charAt(n+1)===e;return i&&n++,i},u=function(t,e,i){var n=""+e;if(l(t))for(;n.length<i;)n="0"+n;return n},h=function(t,e,i,n){return l(t)?n[e]:i[e]},c="",d=!1;if(e)for(n=0;n<t.length;n++)if(d)"'"!==t.charAt(n)||l("'")?c+=t.charAt(n):d=!1;else switch(t.charAt(n)){case"d":c+=u("d",e.getDate(),2);break;case"D":c+=h("D",e.getDay(),s,r);break;case"o":c+=u("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":c+=u("m",e.getMonth()+1,2);break;case"M":c+=h("M",e.getMonth(),o,a);break;case"y":c+=l("y")?e.getFullYear():(e.getYear()%100<10?"0":"")+e.getYear()%100;break;case"@":c+=e.getTime();break;case"!":c+=1e4*e.getTime()+this._ticksTo1970;break;case"'":l("'")?c+="'":d=!0;break;default:c+=t.charAt(n)}return c},_possibleChars:function(t){var e,i="",n=!1,s=function(i){var n=e+1<t.length&&t.charAt(e+1)===i;return n&&e++,n};for(e=0;e<t.length;e++)if(n)"'"!==t.charAt(e)||s("'")?i+=t.charAt(e):n=!1;else switch(t.charAt(e)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":s("'")?i+="'":n=!0;break;default:i+=t.charAt(e)}return i},_get:function(t,i){return t.settings[i]!==e?t.settings[i]:this._defaults[i]},_setDateFromField:function(t,e){if(t.input.val()!==t.lastVal){var i=this._get(t,"dateFormat"),n=t.lastVal=t.input?t.input.val():null,s=this._getDefaultDate(t),r=s,o=this._getFormatConfig(t);try{r=this.parseDate(i,n,o)||s}catch(a){n=e?"":n}t.selectedDay=r.getDate(),t.drawMonth=t.selectedMonth=r.getMonth(),t.drawYear=t.selectedYear=r.getFullYear(),t.currentDay=n?r.getDate():0,t.currentMonth=n?r.getMonth():0,t.currentYear=n?r.getFullYear():0,this._adjustInstDate(t)}},_getDefaultDate:function(t){return this._restrictMinMax(t,this._determineDate(t,this._get(t,"defaultDate"),new Date))},_determineDate:function(e,i,n){var s=function(t){var e=new Date;return e.setDate(e.getDate()+t),e},r=function(i){try{return t.datepicker.parseDate(t.datepicker._get(e,"dateFormat"),i,t.datepicker._getFormatConfig(e))}catch(n){}for(var s=(i.toLowerCase().match(/^c/)?t.datepicker._getDate(e):null)||new Date,r=s.getFullYear(),o=s.getMonth(),a=s.getDate(),l=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,u=l.exec(i);u;){switch(u[2]||"d"){case"d":case"D":a+=parseInt(u[1],10);break;case"w":case"W":a+=7*parseInt(u[1],10);break;case"m":case"M":o+=parseInt(u[1],10),a=Math.min(a,t.datepicker._getDaysInMonth(r,o));break;case"y":case"Y":r+=parseInt(u[1],10),a=Math.min(a,t.datepicker._getDaysInMonth(r,o))}u=l.exec(i)}return new Date(r,o,a)},o=null==i||""===i?n:"string"==typeof i?r(i):"number"==typeof i?isNaN(i)?n:s(i):new Date(i.getTime());return o=o&&"Invalid Date"===o.toString()?n:o,o&&(o.setHours(0),o.setMinutes(0),o.setSeconds(0),o.setMilliseconds(0)),this._daylightSavingAdjust(o)},_daylightSavingAdjust:function(t){return t?(t.setHours(t.getHours()>12?t.getHours()+2:0),t):null},_setDate:function(t,e,i){var n=!e,s=t.selectedMonth,r=t.selectedYear,o=this._restrictMinMax(t,this._determineDate(t,e,new Date));t.selectedDay=t.currentDay=o.getDate(),t.drawMonth=t.selectedMonth=t.currentMonth=o.getMonth(),t.drawYear=t.selectedYear=t.currentYear=o.getFullYear(),s===t.selectedMonth&&r===t.selectedYear||i||this._notifyChange(t),this._adjustInstDate(t),t.input&&t.input.val(n?"":this._formatDate(t))},_getDate:function(t){var e=!t.currentYear||t.input&&""===t.input.val()?null:this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return e},_attachHandlers:function(e){var i=this._get(e,"stepMonths"),n="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){t.datepicker._adjustDate(n,-i,"M")},next:function(){t.datepicker._adjustDate(n,+i,"M")},hide:function(){t.datepicker._hideDatepicker()},today:function(){t.datepicker._gotoToday(n)},selectDay:function(){return t.datepicker._selectDay(n,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return t.datepicker._selectMonthYear(n,this,"M"),!1},selectYear:function(){return t.datepicker._selectMonthYear(n,this,"Y"),!1}};t(this).bind(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(t){var e,i,n,s,r,o,a,l,u,h,c,d,f,p,m,g,v,b,y,_,w,x,k,C,D,T,S,M,I,P,E,A,N,j,z,O,H,W,F,L=new Date,Y=this._daylightSavingAdjust(new Date(L.getFullYear(),L.getMonth(),L.getDate())),R=this._get(t,"isRTL"),U=this._get(t,"showButtonPanel"),q=this._get(t,"hideIfNoPrevNext"),$=this._get(t,"navigationAsDateFormat"),B=this._getNumberOfMonths(t),V=this._get(t,"showCurrentAtPos"),G=this._get(t,"stepMonths"),X=1!==B[0]||1!==B[1],K=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),J=this._getMinMaxDate(t,"min"),Z=this._getMinMaxDate(t,"max"),Q=t.drawMonth-V,te=t.drawYear;
if(0>Q&&(Q+=12,te--),Z)for(e=this._daylightSavingAdjust(new Date(Z.getFullYear(),Z.getMonth()-B[0]*B[1]+1,Z.getDate())),e=J&&J>e?J:e;this._daylightSavingAdjust(new Date(te,Q,1))>e;)Q--,0>Q&&(Q=11,te--);for(t.drawMonth=Q,t.drawYear=te,i=this._get(t,"prevText"),i=$?this.formatDate(i,this._daylightSavingAdjust(new Date(te,Q-G,1)),this._getFormatConfig(t)):i,n=this._canAdjustMonth(t,-1,te,Q)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(R?"e":"w")+"'>"+i+"</span></a>":q?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(R?"e":"w")+"'>"+i+"</span></a>",s=this._get(t,"nextText"),s=$?this.formatDate(s,this._daylightSavingAdjust(new Date(te,Q+G,1)),this._getFormatConfig(t)):s,r=this._canAdjustMonth(t,1,te,Q)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(R?"w":"e")+"'>"+s+"</span></a>":q?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(R?"w":"e")+"'>"+s+"</span></a>",o=this._get(t,"currentText"),a=this._get(t,"gotoCurrent")&&t.currentDay?K:Y,o=$?this.formatDate(o,a,this._getFormatConfig(t)):o,l=t.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(t,"closeText")+"</button>",u=U?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(R?l:"")+(this._isInRange(t,a)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+o+"</button>":"")+(R?"":l)+"</div>":"",h=parseInt(this._get(t,"firstDay"),10),h=isNaN(h)?0:h,c=this._get(t,"showWeek"),d=this._get(t,"dayNames"),f=this._get(t,"dayNamesMin"),p=this._get(t,"monthNames"),m=this._get(t,"monthNamesShort"),g=this._get(t,"beforeShowDay"),v=this._get(t,"showOtherMonths"),b=this._get(t,"selectOtherMonths"),y=this._getDefaultDate(t),_="",x=0;x<B[0];x++){for(k="",this.maxRows=4,C=0;C<B[1];C++){if(D=this._daylightSavingAdjust(new Date(te,Q,t.selectedDay)),T=" ui-corner-all",S="",X){if(S+="<div class='ui-datepicker-group",B[1]>1)switch(C){case 0:S+=" ui-datepicker-group-first",T=" ui-corner-"+(R?"right":"left");break;case B[1]-1:S+=" ui-datepicker-group-last",T=" ui-corner-"+(R?"left":"right");break;default:S+=" ui-datepicker-group-middle",T=""}S+="'>"}for(S+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+T+"'>"+(/all|left/.test(T)&&0===x?R?r:n:"")+(/all|right/.test(T)&&0===x?R?n:r:"")+this._generateMonthYearHeader(t,Q,te,J,Z,x>0||C>0,p,m)+"</div><table class='ui-datepicker-calendar'><thead><tr>",M=c?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",w=0;7>w;w++)I=(w+h)%7,M+="<th"+((w+h+6)%7>=5?" class='ui-datepicker-week-end'":"")+"><span title='"+d[I]+"'>"+f[I]+"</span></th>";for(S+=M+"</tr></thead><tbody>",P=this._getDaysInMonth(te,Q),te===t.selectedYear&&Q===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,P)),E=(this._getFirstDayOfMonth(te,Q)-h+7)%7,A=Math.ceil((E+P)/7),N=X&&this.maxRows>A?this.maxRows:A,this.maxRows=N,j=this._daylightSavingAdjust(new Date(te,Q,1-E)),z=0;N>z;z++){for(S+="<tr>",O=c?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(j)+"</td>":"",w=0;7>w;w++)H=g?g.apply(t.input?t.input[0]:null,[j]):[!0,""],W=j.getMonth()!==Q,F=W&&!b||!H[0]||J&&J>j||Z&&j>Z,O+="<td class='"+((w+h+6)%7>=5?" ui-datepicker-week-end":"")+(W?" ui-datepicker-other-month":"")+(j.getTime()===D.getTime()&&Q===t.selectedMonth&&t._keyEvent||y.getTime()===j.getTime()&&y.getTime()===D.getTime()?" "+this._dayOverClass:"")+(F?" "+this._unselectableClass+" ui-state-disabled":"")+(W&&!v?"":" "+H[1]+(j.getTime()===K.getTime()?" "+this._currentClass:"")+(j.getTime()===Y.getTime()?" ui-datepicker-today":""))+"'"+(W&&!v||!H[2]?"":" title='"+H[2].replace(/'/g,"&#39;")+"'")+(F?"":" data-handler='selectDay' data-event='click' data-month='"+j.getMonth()+"' data-year='"+j.getFullYear()+"'")+">"+(W&&!v?"&#xa0;":F?"<span class='ui-state-default'>"+j.getDate()+"</span>":"<a class='ui-state-default"+(j.getTime()===Y.getTime()?" ui-state-highlight":"")+(j.getTime()===K.getTime()?" ui-state-active":"")+(W?" ui-priority-secondary":"")+"' href='#'>"+j.getDate()+"</a>")+"</td>",j.setDate(j.getDate()+1),j=this._daylightSavingAdjust(j);S+=O+"</tr>"}Q++,Q>11&&(Q=0,te++),S+="</tbody></table>"+(X?"</div>"+(B[0]>0&&C===B[1]-1?"<div class='ui-datepicker-row-break'></div>":""):""),k+=S}_+=k}return _+=u,t._keyEvent=!1,_},_generateMonthYearHeader:function(t,e,i,n,s,r,o,a){var l,u,h,c,d,f,p,m,g=this._get(t,"changeMonth"),v=this._get(t,"changeYear"),b=this._get(t,"showMonthAfterYear"),y="<div class='ui-datepicker-title'>",_="";if(r||!g)_+="<span class='ui-datepicker-month'>"+o[e]+"</span>";else{for(l=n&&n.getFullYear()===i,u=s&&s.getFullYear()===i,_+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",h=0;12>h;h++)(!l||h>=n.getMonth())&&(!u||h<=s.getMonth())&&(_+="<option value='"+h+"'"+(h===e?" selected='selected'":"")+">"+a[h]+"</option>");_+="</select>"}if(b||(y+=_+(!r&&g&&v?"":"&#xa0;")),!t.yearshtml)if(t.yearshtml="",r||!v)y+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(c=this._get(t,"yearRange").split(":"),d=(new Date).getFullYear(),f=function(t){var e=t.match(/c[+\-].*/)?i+parseInt(t.substring(1),10):t.match(/[+\-].*/)?d+parseInt(t,10):parseInt(t,10);return isNaN(e)?d:e},p=f(c[0]),m=Math.max(p,f(c[1]||"")),p=n?Math.max(p,n.getFullYear()):p,m=s?Math.min(m,s.getFullYear()):m,t.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";m>=p;p++)t.yearshtml+="<option value='"+p+"'"+(p===i?" selected='selected'":"")+">"+p+"</option>";t.yearshtml+="</select>",y+=t.yearshtml,t.yearshtml=null}return y+=this._get(t,"yearSuffix"),b&&(y+=(!r&&g&&v?"":"&#xa0;")+_),y+="</div>"},_adjustInstDate:function(t,e,i){var n=t.drawYear+("Y"===i?e:0),s=t.drawMonth+("M"===i?e:0),r=Math.min(t.selectedDay,this._getDaysInMonth(n,s))+("D"===i?e:0),o=this._restrictMinMax(t,this._daylightSavingAdjust(new Date(n,s,r)));t.selectedDay=o.getDate(),t.drawMonth=t.selectedMonth=o.getMonth(),t.drawYear=t.selectedYear=o.getFullYear(),("M"===i||"Y"===i)&&this._notifyChange(t)},_restrictMinMax:function(t,e){var i=this._getMinMaxDate(t,"min"),n=this._getMinMaxDate(t,"max"),s=i&&i>e?i:e;return n&&s>n?n:s},_notifyChange:function(t){var e=this._get(t,"onChangeMonthYear");e&&e.apply(t.input?t.input[0]:null,[t.selectedYear,t.selectedMonth+1,t])},_getNumberOfMonths:function(t){var e=this._get(t,"numberOfMonths");return null==e?[1,1]:"number"==typeof e?[1,e]:e},_getMinMaxDate:function(t,e){return this._determineDate(t,this._get(t,e+"Date"),null)},_getDaysInMonth:function(t,e){return 32-this._daylightSavingAdjust(new Date(t,e,32)).getDate()},_getFirstDayOfMonth:function(t,e){return new Date(t,e,1).getDay()},_canAdjustMonth:function(t,e,i,n){var s=this._getNumberOfMonths(t),r=this._daylightSavingAdjust(new Date(i,n+(0>e?e:s[0]*s[1]),1));return 0>e&&r.setDate(this._getDaysInMonth(r.getFullYear(),r.getMonth())),this._isInRange(t,r)},_isInRange:function(t,e){var i,n,s=this._getMinMaxDate(t,"min"),r=this._getMinMaxDate(t,"max"),o=null,a=null,l=this._get(t,"yearRange");return l&&(i=l.split(":"),n=(new Date).getFullYear(),o=parseInt(i[0],10),a=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(o+=n),i[1].match(/[+\-].*/)&&(a+=n)),(!s||e.getTime()>=s.getTime())&&(!r||e.getTime()<=r.getTime())&&(!o||e.getFullYear()>=o)&&(!a||e.getFullYear()<=a)},_getFormatConfig:function(t){var e=this._get(t,"shortYearCutoff");return e="string"!=typeof e?e:(new Date).getFullYear()%100+parseInt(e,10),{shortYearCutoff:e,dayNamesShort:this._get(t,"dayNamesShort"),dayNames:this._get(t,"dayNames"),monthNamesShort:this._get(t,"monthNamesShort"),monthNames:this._get(t,"monthNames")}},_formatDate:function(t,e,i,n){e||(t.currentDay=t.selectedDay,t.currentMonth=t.selectedMonth,t.currentYear=t.selectedYear);var s=e?"object"==typeof e?e:this._daylightSavingAdjust(new Date(n,i,e)):this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return this.formatDate(this._get(t,"dateFormat"),s,this._getFormatConfig(t))}}),t.fn.datepicker=function(e){if(!this.length)return this;t.datepicker.initialized||(t(document).mousedown(t.datepicker._checkExternalClick),t.datepicker.initialized=!0),0===t("#"+t.datepicker._mainDivId).length&&t("body").append(t.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!==e&&"getDate"!==e&&"widget"!==e?"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i)):this.each(function(){"string"==typeof e?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this].concat(i)):t.datepicker._attachDatepicker(this,e)}):t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i))},t.datepicker=new i,t.datepicker.initialized=!1,t.datepicker.uuid=(new Date).getTime(),t.datepicker.version="1.10.3"}(e),function(t){var e={buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},i={maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0};t.widget("ui.dialog",{version:"1.10.3",options:{appendTo:"body",autoOpen:!0,buttons:[],closeOnEscape:!0,closeText:"close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(e){var i=t(this).css(e).offset().top;0>i&&t(this).css("top",e.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),this.options.title=this.options.title||this.originalTitle,this._createWrapper(),this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&t.fn.draggable&&this._makeDraggable(),this.options.resizable&&t.fn.resizable&&this._makeResizable(),this._isOpen=!1},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var e=this.options.appendTo;return e&&(e.jquery||e.nodeType)?t(e):this.document.find(e||"body").eq(0)},_destroy:function(){var t,e=this.originalPosition;this._destroyOverlay(),this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach(),this.uiDialog.stop(!0,!0).remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),t=e.parent.children().eq(e.index),t.length&&t[0]!==this.element[0]?t.before(this.element):e.parent.append(this.element)},widget:function(){return this.uiDialog},disable:t.noop,enable:t.noop,close:function(e){var i=this;this._isOpen&&this._trigger("beforeClose",e)!==!1&&(this._isOpen=!1,this._destroyOverlay(),this.opener.filter(":focusable").focus().length||t(this.document[0].activeElement).blur(),this._hide(this.uiDialog,this.options.hide,function(){i._trigger("close",e)}))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(t,e){var i=!!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog).length;return i&&!e&&this._trigger("focus",t),i},open:function(){var e=this;return this._isOpen?void(this._moveToTop()&&this._focusTabbable()):(this._isOpen=!0,this.opener=t(this.document[0].activeElement),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this._show(this.uiDialog,this.options.show,function(){e._focusTabbable(),e._trigger("focus")}),void this._trigger("open"))},_focusTabbable:function(){var t=this.element.find("[autofocus]");t.length||(t=this.element.find(":tabbable")),t.length||(t=this.uiDialogButtonPane.find(":tabbable")),t.length||(t=this.uiDialogTitlebarClose.filter(":tabbable")),t.length||(t=this.uiDialog),t.eq(0).focus()},_keepFocus:function(e){function i(){var e=this.document[0].activeElement,i=this.uiDialog[0]===e||t.contains(this.uiDialog[0],e);i||this._focusTabbable()}e.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=t("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front "+this.options.dialogClass).hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._on(this.uiDialog,{keydown:function(e){if(this.options.closeOnEscape&&!e.isDefaultPrevented()&&e.keyCode&&e.keyCode===t.ui.keyCode.ESCAPE)return e.preventDefault(),void this.close(e);if(e.keyCode===t.ui.keyCode.TAB){var i=this.uiDialog.find(":tabbable"),n=i.filter(":first"),s=i.filter(":last");e.target!==s[0]&&e.target!==this.uiDialog[0]||e.shiftKey?e.target!==n[0]&&e.target!==this.uiDialog[0]||!e.shiftKey||(s.focus(1),e.preventDefault()):(n.focus(1),e.preventDefault())}},mousedown:function(t){this._moveToTop(t)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var e;this.uiDialogTitlebar=t("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog),this._on(this.uiDialogTitlebar,{mousedown:function(e){t(e.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.focus()}}),this.uiDialogTitlebarClose=t("<button></button>").button({label:this.options.closeText,icons:{primary:"ui-icon-closethick"},text:!1}).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar),this._on(this.uiDialogTitlebarClose,{click:function(t){t.preventDefault(),this.close(t)}}),e=t("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar),this._title(e),this.uiDialog.attr({"aria-labelledby":e.attr("id")})},_title:function(t){this.options.title||t.html("&#160;"),t.text(this.options.title)},_createButtonPane:function(){this.uiDialogButtonPane=t("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),this.uiButtonSet=t("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane),this._createButtons()},_createButtons:function(){var e=this,i=this.options.buttons;return this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),t.isEmptyObject(i)||t.isArray(i)&&!i.length?void this.uiDialog.removeClass("ui-dialog-buttons"):(t.each(i,function(i,n){var s,r;n=t.isFunction(n)?{click:n,text:i}:n,n=t.extend({type:"button"},n),s=n.click,n.click=function(){s.apply(e.element[0],arguments)},r={icons:n.icons,text:n.showText},delete n.icons,delete n.showText,t("<button></button>",n).button(r).appendTo(e.uiButtonSet)}),this.uiDialog.addClass("ui-dialog-buttons"),void this.uiDialogButtonPane.appendTo(this.uiDialog))},_makeDraggable:function(){function e(t){return{position:t.position,offset:t.offset}}var i=this,n=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(n,s){t(this).addClass("ui-dialog-dragging"),i._blockFrames(),i._trigger("dragStart",n,e(s))},drag:function(t,n){i._trigger("drag",t,e(n))},stop:function(s,r){n.position=[r.position.left-i.document.scrollLeft(),r.position.top-i.document.scrollTop()],t(this).removeClass("ui-dialog-dragging"),i._unblockFrames(),i._trigger("dragStop",s,e(r))}})},_makeResizable:function(){function e(t){return{originalPosition:t.originalPosition,originalSize:t.originalSize,position:t.position,size:t.size}}var i=this,n=this.options,s=n.resizable,r=this.uiDialog.css("position"),o="string"==typeof s?s:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:n.maxWidth,maxHeight:n.maxHeight,minWidth:n.minWidth,minHeight:this._minHeight(),handles:o,start:function(n,s){t(this).addClass("ui-dialog-resizing"),i._blockFrames(),i._trigger("resizeStart",n,e(s))},resize:function(t,n){i._trigger("resize",t,e(n))},stop:function(s,r){n.height=t(this).height(),n.width=t(this).width(),t(this).removeClass("ui-dialog-resizing"),i._unblockFrames(),i._trigger("resizeStop",s,e(r))}}).css("position",r)},_minHeight:function(){var t=this.options;return"auto"===t.height?t.minHeight:Math.min(t.minHeight,t.height)},_position:function(){var t=this.uiDialog.is(":visible");t||this.uiDialog.show(),this.uiDialog.position(this.options.position),t||this.uiDialog.hide()},_setOptions:function(n){var s=this,r=!1,o={};t.each(n,function(t,n){s._setOption(t,n),t in e&&(r=!0),t in i&&(o[t]=n)}),r&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",o)},_setOption:function(t,e){var i,n,s=this.uiDialog;"dialogClass"===t&&s.removeClass(this.options.dialogClass).addClass(e),"disabled"!==t&&(this._super(t,e),"appendTo"===t&&this.uiDialog.appendTo(this._appendTo()),"buttons"===t&&this._createButtons(),"closeText"===t&&this.uiDialogTitlebarClose.button({label:""+e}),"draggable"===t&&(i=s.is(":data(ui-draggable)"),i&&!e&&s.draggable("destroy"),!i&&e&&this._makeDraggable()),"position"===t&&this._position(),"resizable"===t&&(n=s.is(":data(ui-resizable)"),n&&!e&&s.resizable("destroy"),n&&"string"==typeof e&&s.resizable("option","handles",e),n||e===!1||this._makeResizable()),"title"===t&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var t,e,i,n=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),n.minWidth>n.width&&(n.width=n.minWidth),t=this.uiDialog.css({height:"auto",width:n.width}).outerHeight(),e=Math.max(0,n.minHeight-t),i="number"==typeof n.maxHeight?Math.max(0,n.maxHeight-t):"none","auto"===n.height?this.element.css({minHeight:e,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,n.height-t)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map(function(){var e=t(this);return t("<div>").css({position:"absolute",width:e.outerWidth(),height:e.outerHeight()}).appendTo(e.parent()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(e){return t(e.target).closest(".ui-dialog").length?!0:!!t(e.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var e=this,i=this.widgetFullName;t.ui.dialog.overlayInstances||this._delay(function(){t.ui.dialog.overlayInstances&&this.document.bind("focusin.dialog",function(n){e._allowInteraction(n)||(n.preventDefault(),t(".ui-dialog:visible:last .ui-dialog-content").data(i)._focusTabbable())})}),this.overlay=t("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo()),this._on(this.overlay,{mousedown:"_keepFocus"}),t.ui.dialog.overlayInstances++}},_destroyOverlay:function(){this.options.modal&&this.overlay&&(t.ui.dialog.overlayInstances--,t.ui.dialog.overlayInstances||this.document.unbind("focusin.dialog"),this.overlay.remove(),this.overlay=null)}}),t.ui.dialog.overlayInstances=0,t.uiBackCompat!==!1&&t.widget("ui.dialog",t.ui.dialog,{_position:function(){var e,i=this.options.position,n=[],s=[0,0];i?(("string"==typeof i||"object"==typeof i&&"0"in i)&&(n=i.split?i.split(" "):[i[0],i[1]],1===n.length&&(n[1]=n[0]),t.each(["left","top"],function(t,e){+n[t]===n[t]&&(s[t]=n[t],n[t]=e)}),i={my:n[0]+(s[0]<0?s[0]:"+"+s[0])+" "+n[1]+(s[1]<0?s[1]:"+"+s[1]),at:n.join(" ")}),i=t.extend({},t.ui.dialog.prototype.options.position,i)):i=t.ui.dialog.prototype.options.position,e=this.uiDialog.is(":visible"),e||this.uiDialog.show(),this.uiDialog.position(i),e||this.uiDialog.hide()}})}(e),function(t){var e=/up|down|vertical/,i=/up|left|vertical|horizontal/;t.effects.effect.blind=function(n,s){var r,o,a,l=t(this),u=["position","top","bottom","left","right","height","width"],h=t.effects.setMode(l,n.mode||"hide"),c=n.direction||"up",d=e.test(c),f=d?"height":"width",p=d?"top":"left",m=i.test(c),g={},v="show"===h;l.parent().is(".ui-effects-wrapper")?t.effects.save(l.parent(),u):t.effects.save(l,u),l.show(),r=t.effects.createWrapper(l).css({overflow:"hidden"}),o=r[f](),a=parseFloat(r.css(p))||0,g[f]=v?o:0,m||(l.css(d?"bottom":"right",0).css(d?"top":"left","auto").css({position:"absolute"}),g[p]=v?a:o+a),v&&(r.css(f,0),m||r.css(p,a+o)),r.animate(g,{duration:n.duration,easing:n.easing,queue:!1,complete:function(){"hide"===h&&l.hide(),t.effects.restore(l,u),t.effects.removeWrapper(l),s()}})}}(e),function(t){t.effects.effect.bounce=function(e,i){var n,s,r,o=t(this),a=["position","top","bottom","left","right","height","width"],l=t.effects.setMode(o,e.mode||"effect"),u="hide"===l,h="show"===l,c=e.direction||"up",d=e.distance,f=e.times||5,p=2*f+(h||u?1:0),m=e.duration/p,g=e.easing,v="up"===c||"down"===c?"top":"left",b="up"===c||"left"===c,y=o.queue(),_=y.length;for((h||u)&&a.push("opacity"),t.effects.save(o,a),o.show(),t.effects.createWrapper(o),d||(d=o["top"===v?"outerHeight":"outerWidth"]()/3),h&&(r={opacity:1},r[v]=0,o.css("opacity",0).css(v,b?2*-d:2*d).animate(r,m,g)),u&&(d/=Math.pow(2,f-1)),r={},r[v]=0,n=0;f>n;n++)s={},s[v]=(b?"-=":"+=")+d,o.animate(s,m,g).animate(r,m,g),d=u?2*d:d/2;u&&(s={opacity:0},s[v]=(b?"-=":"+=")+d,o.animate(s,m,g)),o.queue(function(){u&&o.hide(),t.effects.restore(o,a),t.effects.removeWrapper(o),i()}),_>1&&y.splice.apply(y,[1,0].concat(y.splice(_,p+1))),o.dequeue()}}(e),function(t){t.effects.effect.clip=function(e,i){var n,s,r,o=t(this),a=["position","top","bottom","left","right","height","width"],l=t.effects.setMode(o,e.mode||"hide"),u="show"===l,h=e.direction||"vertical",c="vertical"===h,d=c?"height":"width",f=c?"top":"left",p={};t.effects.save(o,a),o.show(),n=t.effects.createWrapper(o).css({overflow:"hidden"}),s="IMG"===o[0].tagName?n:o,r=s[d](),u&&(s.css(d,0),s.css(f,r/2)),p[d]=u?r:0,p[f]=u?0:r/2,s.animate(p,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){u||o.hide(),t.effects.restore(o,a),t.effects.removeWrapper(o),i()}})}}(e),function(t){t.effects.effect.drop=function(e,i){var n,s=t(this),r=["position","top","bottom","left","right","opacity","height","width"],o=t.effects.setMode(s,e.mode||"hide"),a="show"===o,l=e.direction||"left",u="up"===l||"down"===l?"top":"left",h="up"===l||"left"===l?"pos":"neg",c={opacity:a?1:0};t.effects.save(s,r),s.show(),t.effects.createWrapper(s),n=e.distance||s["top"===u?"outerHeight":"outerWidth"](!0)/2,a&&s.css("opacity",0).css(u,"pos"===h?-n:n),c[u]=(a?"pos"===h?"+=":"-=":"pos"===h?"-=":"+=")+n,s.animate(c,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&s.hide(),t.effects.restore(s,r),t.effects.removeWrapper(s),i()}})}}(e),function(t){t.effects.effect.explode=function(e,i){function n(){y.push(this),y.length===c*d&&s()}function s(){f.css({visibility:"visible"}),t(y).remove(),m||f.hide(),i()}var r,o,a,l,u,h,c=e.pieces?Math.round(Math.sqrt(e.pieces)):3,d=c,f=t(this),p=t.effects.setMode(f,e.mode||"hide"),m="show"===p,g=f.show().css("visibility","hidden").offset(),v=Math.ceil(f.outerWidth()/d),b=Math.ceil(f.outerHeight()/c),y=[];for(r=0;c>r;r++)for(l=g.top+r*b,h=r-(c-1)/2,o=0;d>o;o++)a=g.left+o*v,u=o-(d-1)/2,f.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-o*v,top:-r*b}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:v,height:b,left:a+(m?u*v:0),top:l+(m?h*b:0),opacity:m?0:1}).animate({left:a+(m?0:u*v),top:l+(m?0:h*b),opacity:m?1:0},e.duration||500,e.easing,n)}}(e),function(t){t.effects.effect.fade=function(e,i){var n=t(this),s=t.effects.setMode(n,e.mode||"toggle");n.animate({opacity:s},{queue:!1,duration:e.duration,easing:e.easing,complete:i})}}(e),function(t){t.effects.effect.fold=function(e,i){var n,s,r=t(this),o=["position","top","bottom","left","right","height","width"],a=t.effects.setMode(r,e.mode||"hide"),l="show"===a,u="hide"===a,h=e.size||15,c=/([0-9]+)%/.exec(h),d=!!e.horizFirst,f=l!==d,p=f?["width","height"]:["height","width"],m=e.duration/2,g={},v={};t.effects.save(r,o),r.show(),n=t.effects.createWrapper(r).css({overflow:"hidden"}),s=f?[n.width(),n.height()]:[n.height(),n.width()],c&&(h=parseInt(c[1],10)/100*s[u?0:1]),l&&n.css(d?{height:0,width:h}:{height:h,width:0}),g[p[0]]=l?s[0]:h,v[p[1]]=l?s[1]:0,n.animate(g,m,e.easing).animate(v,m,e.easing,function(){u&&r.hide(),t.effects.restore(r,o),t.effects.removeWrapper(r),i()})}}(e),function(t){t.effects.effect.highlight=function(e,i){var n=t(this),s=["backgroundImage","backgroundColor","opacity"],r=t.effects.setMode(n,e.mode||"show"),o={backgroundColor:n.css("backgroundColor")};"hide"===r&&(o.opacity=0),t.effects.save(n,s),n.show().css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(o,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===r&&n.hide(),t.effects.restore(n,s),i()}})}}(e),function(t){t.effects.effect.pulsate=function(e,i){var n,s=t(this),r=t.effects.setMode(s,e.mode||"show"),o="show"===r,a="hide"===r,l=o||"hide"===r,u=2*(e.times||5)+(l?1:0),h=e.duration/u,c=0,d=s.queue(),f=d.length;for((o||!s.is(":visible"))&&(s.css("opacity",0).show(),c=1),n=1;u>n;n++)s.animate({opacity:c},h,e.easing),c=1-c;s.animate({opacity:c},h,e.easing),s.queue(function(){a&&s.hide(),i()}),f>1&&d.splice.apply(d,[1,0].concat(d.splice(f,u+1))),s.dequeue()}}(e),function(t){t.effects.effect.puff=function(e,i){var n=t(this),s=t.effects.setMode(n,e.mode||"hide"),r="hide"===s,o=parseInt(e.percent,10)||150,a=o/100,l={height:n.height(),width:n.width(),outerHeight:n.outerHeight(),outerWidth:n.outerWidth()};t.extend(e,{effect:"scale",queue:!1,fade:!0,mode:s,complete:i,percent:r?o:100,from:r?l:{height:l.height*a,width:l.width*a,outerHeight:l.outerHeight*a,outerWidth:l.outerWidth*a}}),n.effect(e)},t.effects.effect.scale=function(e,i){var n=t(this),s=t.extend(!0,{},e),r=t.effects.setMode(n,e.mode||"effect"),o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"hide"===r?0:100),a=e.direction||"both",l=e.origin,u={height:n.height(),width:n.width(),outerHeight:n.outerHeight(),outerWidth:n.outerWidth()},h={y:"horizontal"!==a?o/100:1,x:"vertical"!==a?o/100:1};s.effect="size",s.queue=!1,s.complete=i,"effect"!==r&&(s.origin=l||["middle","center"],s.restore=!0),s.from=e.from||("show"===r?{height:0,width:0,outerHeight:0,outerWidth:0}:u),s.to={height:u.height*h.y,width:u.width*h.x,outerHeight:u.outerHeight*h.y,outerWidth:u.outerWidth*h.x},s.fade&&("show"===r&&(s.from.opacity=0,s.to.opacity=1),"hide"===r&&(s.from.opacity=1,s.to.opacity=0)),n.effect(s)},t.effects.effect.size=function(e,i){var n,s,r,o=t(this),a=["position","top","bottom","left","right","width","height","overflow","opacity"],l=["position","top","bottom","left","right","overflow","opacity"],u=["width","height","overflow"],h=["fontSize"],c=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],d=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],f=t.effects.setMode(o,e.mode||"effect"),p=e.restore||"effect"!==f,m=e.scale||"both",g=e.origin||["middle","center"],v=o.css("position"),b=p?a:l,y={height:0,width:0,outerHeight:0,outerWidth:0};"show"===f&&o.show(),n={height:o.height(),width:o.width(),outerHeight:o.outerHeight(),outerWidth:o.outerWidth()},"toggle"===e.mode&&"show"===f?(o.from=e.to||y,o.to=e.from||n):(o.from=e.from||("show"===f?y:n),o.to=e.to||("hide"===f?y:n)),r={from:{y:o.from.height/n.height,x:o.from.width/n.width},to:{y:o.to.height/n.height,x:o.to.width/n.width}},("box"===m||"both"===m)&&(r.from.y!==r.to.y&&(b=b.concat(c),o.from=t.effects.setTransition(o,c,r.from.y,o.from),o.to=t.effects.setTransition(o,c,r.to.y,o.to)),r.from.x!==r.to.x&&(b=b.concat(d),o.from=t.effects.setTransition(o,d,r.from.x,o.from),o.to=t.effects.setTransition(o,d,r.to.x,o.to))),("content"===m||"both"===m)&&r.from.y!==r.to.y&&(b=b.concat(h).concat(u),o.from=t.effects.setTransition(o,h,r.from.y,o.from),o.to=t.effects.setTransition(o,h,r.to.y,o.to)),t.effects.save(o,b),o.show(),t.effects.createWrapper(o),o.css("overflow","hidden").css(o.from),g&&(s=t.effects.getBaseline(g,n),o.from.top=(n.outerHeight-o.outerHeight())*s.y,o.from.left=(n.outerWidth-o.outerWidth())*s.x,o.to.top=(n.outerHeight-o.to.outerHeight)*s.y,o.to.left=(n.outerWidth-o.to.outerWidth)*s.x),o.css(o.from),("content"===m||"both"===m)&&(c=c.concat(["marginTop","marginBottom"]).concat(h),d=d.concat(["marginLeft","marginRight"]),u=a.concat(c).concat(d),o.find("*[width]").each(function(){var i=t(this),n={height:i.height(),width:i.width(),outerHeight:i.outerHeight(),outerWidth:i.outerWidth()};p&&t.effects.save(i,u),i.from={height:n.height*r.from.y,width:n.width*r.from.x,outerHeight:n.outerHeight*r.from.y,outerWidth:n.outerWidth*r.from.x},i.to={height:n.height*r.to.y,width:n.width*r.to.x,outerHeight:n.height*r.to.y,outerWidth:n.width*r.to.x},r.from.y!==r.to.y&&(i.from=t.effects.setTransition(i,c,r.from.y,i.from),i.to=t.effects.setTransition(i,c,r.to.y,i.to)),r.from.x!==r.to.x&&(i.from=t.effects.setTransition(i,d,r.from.x,i.from),i.to=t.effects.setTransition(i,d,r.to.x,i.to)),i.css(i.from),i.animate(i.to,e.duration,e.easing,function(){p&&t.effects.restore(i,u)})})),o.animate(o.to,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){0===o.to.opacity&&o.css("opacity",o.from.opacity),"hide"===f&&o.hide(),t.effects.restore(o,b),p||("static"===v?o.css({position:"relative",top:o.to.top,left:o.to.left}):t.each(["top","left"],function(t,e){o.css(e,function(e,i){var n=parseInt(i,10),s=t?o.to.left:o.to.top;return"auto"===i?s+"px":n+s+"px"})})),t.effects.removeWrapper(o),i()}})}}(e),function(t){t.effects.effect.shake=function(e,i){var n,s=t(this),r=["position","top","bottom","left","right","height","width"],o=t.effects.setMode(s,e.mode||"effect"),a=e.direction||"left",l=e.distance||20,u=e.times||3,h=2*u+1,c=Math.round(e.duration/h),d="up"===a||"down"===a?"top":"left",f="up"===a||"left"===a,p={},m={},g={},v=s.queue(),b=v.length;for(t.effects.save(s,r),s.show(),t.effects.createWrapper(s),p[d]=(f?"-=":"+=")+l,m[d]=(f?"+=":"-=")+2*l,g[d]=(f?"-=":"+=")+2*l,s.animate(p,c,e.easing),n=1;u>n;n++)s.animate(m,c,e.easing).animate(g,c,e.easing);s.animate(m,c,e.easing).animate(p,c/2,e.easing).queue(function(){"hide"===o&&s.hide(),t.effects.restore(s,r),t.effects.removeWrapper(s),i()}),b>1&&v.splice.apply(v,[1,0].concat(v.splice(b,h+1))),s.dequeue()}}(e),function(t){t.effects.effect.slide=function(e,i){var n,s=t(this),r=["position","top","bottom","left","right","width","height"],o=t.effects.setMode(s,e.mode||"show"),a="show"===o,l=e.direction||"left",u="up"===l||"down"===l?"top":"left",h="up"===l||"left"===l,c={};t.effects.save(s,r),s.show(),n=e.distance||s["top"===u?"outerHeight":"outerWidth"](!0),t.effects.createWrapper(s).css({overflow:"hidden"}),a&&s.css(u,h?isNaN(n)?"-"+n:-n:n),c[u]=(a?h?"+=":"-=":h?"-=":"+=")+n,s.animate(c,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&s.hide(),t.effects.restore(s,r),t.effects.removeWrapper(s),i()}})}}(e),function(t){t.effects.effect.transfer=function(e,i){var n=t(this),s=t(e.to),r="fixed"===s.css("position"),o=t("body"),a=r?o.scrollTop():0,l=r?o.scrollLeft():0,u=s.offset(),h={top:u.top-a,left:u.left-l,height:s.innerHeight(),width:s.innerWidth()},c=n.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(e.className).css({top:c.top-a,left:c.left-l,height:n.innerHeight(),width:n.innerWidth(),position:r?"fixed":"absolute"}).animate(h,e.duration,e.easing,function(){d.remove(),i()
})}}(e),function(t){t.widget("ui.menu",{version:"1.10.3",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-carat-1-e"},menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length).attr({role:this.options.role,tabIndex:0}).bind("click"+this.eventNamespace,t.proxy(function(t){this.options.disabled&&t.preventDefault()},this)),this.options.disabled&&this.element.addClass("ui-state-disabled").attr("aria-disabled","true"),this._on({"mousedown .ui-menu-item > a":function(t){t.preventDefault()},"click .ui-state-disabled > a":function(t){t.preventDefault()},"click .ui-menu-item:has(a)":function(e){var i=t(e.target).closest(".ui-menu-item");!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.mouseHandled=!0,this.select(e),i.has(".ui-menu").length?this.expand(e):this.element.is(":focus")||(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){var i=t(e.currentTarget);i.siblings().children(".ui-state-active").removeClass("ui-state-active"),this.focus(e,i)},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.children(".ui-menu-item").eq(0);e||this.focus(t,i)},blur:function(e){this._delay(function(){t.contains(this.element[0],this.document[0].activeElement)||this.collapseAll(e)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(e){t(e.target).closest(".ui-menu").length||this.collapseAll(e),this.mouseHandled=!1}})},_destroy:function(){this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(),this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function(){var e=t(this);e.data("ui-menu-submenu-carat")&&e.remove()}),this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")},_keydown:function(e){function i(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}var n,s,r,o,a,l=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:l=!1,s=this.previousFilter||"",r=String.fromCharCode(e.keyCode),o=!1,clearTimeout(this.filterTimer),r===s?o=!0:r=s+r,a=new RegExp("^"+i(r),"i"),n=this.activeMenu.children(".ui-menu-item").filter(function(){return a.test(t(this).children("a").text())}),n=o&&-1!==n.index(this.active.next())?this.active.nextAll(".ui-menu-item"):n,n.length||(r=String.fromCharCode(e.keyCode),a=new RegExp("^"+i(r),"i"),n=this.activeMenu.children(".ui-menu-item").filter(function(){return a.test(t(this).children("a").text())})),n.length?(this.focus(e,n),n.length>1?(this.previousFilter=r,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter):delete this.previousFilter}l&&e.preventDefault()},_activate:function(t){this.active.is(".ui-state-disabled")||(this.active.children("a[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i=this.options.icons.submenu,n=this.element.find(this.options.menus);n.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var e=t(this),n=e.prev("a"),s=t("<span>").addClass("ui-menu-icon ui-icon "+i).data("ui-menu-submenu-carat",!0);n.attr("aria-haspopup","true").prepend(s),e.attr("aria-labelledby",n.attr("id"))}),e=n.add(this.element),e.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","presentation").children("a").uniqueId().addClass("ui-corner-all").attr({tabIndex:-1,role:this._itemRole()}),e.children(":not(.ui-menu-item)").each(function(){var e=t(this);/[^\-\u2014\u2013\s]/.test(e.text())||e.addClass("ui-widget-content ui-menu-divider")}),e.children(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){"icons"===t&&this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(e.submenu),this._super(t,e)},focus:function(t,e){var i,n;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),n=this.active.children("a").addClass("ui-state-focus"),this.options.role&&this.element.attr("aria-activedescendant",n.attr("id")),this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=e.children(".ui-menu"),i.length&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,n,s,r,o,a;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,n=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,s=e.offset().top-this.activeMenu.offset().top-i-n,r=this.activeMenu.scrollTop(),o=this.activeMenu.height(),a=e.height(),0>s?this.activeMenu.scrollTop(r+s):s+a>o&&this.activeMenu.scrollTop(r+s-o+a))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this.active.children("a").removeClass("ui-state-focus"),this.active=null,this._trigger("blur",t,{item:this.active}))},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(t)},this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay(function(){var n=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));n.length||(n=this.element),this._close(n),this.blur(e),this.activeMenu=n},this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false").end().find("a.ui-state-active").removeClass("ui-state-active")},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").children(".ui-menu-item").first();e&&e.length&&(this._open(e.parent()),this._delay(function(){this.focus(t,e)}))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var n;this.active&&(n="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),n&&n.length&&this.active||(n=this.activeMenu.children(".ui-menu-item")[e]()),this.focus(i,n)},nextPage:function(e){var i,n,s;return this.active?void(this.isLastItem()||(this._hasScroll()?(n=this.active.offset().top,s=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=t(this),i.offset().top-n-s<0}),this.focus(e,i)):this.focus(e,this.activeMenu.children(".ui-menu-item")[this.active?"last":"first"]()))):void this.next(e)},previousPage:function(e){var i,n,s;return this.active?void(this.isFirstItem()||(this._hasScroll()?(n=this.active.offset().top,s=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=t(this),i.offset().top-n+s>0}),this.focus(e,i)):this.focus(e,this.activeMenu.children(".ui-menu-item").first()))):void this.next(e)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)}})}(e),function(t,e){function i(t,e,i){return[parseFloat(t[0])*(f.test(t[0])?e/100:1),parseFloat(t[1])*(f.test(t[1])?i/100:1)]}function n(e,i){return parseInt(t.css(e,i),10)||0}function s(e){var i=e[0];return 9===i.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:t.isWindow(i)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}t.ui=t.ui||{};var r,o=Math.max,a=Math.abs,l=Math.round,u=/left|center|right/,h=/top|center|bottom/,c=/[\+\-]\d+(\.[\d]+)?%?/,d=/^\w+/,f=/%$/,p=t.fn.position;t.position={scrollbarWidth:function(){if(r!==e)return r;var i,n,s=t("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=s.children()[0];return t("body").append(s),i=o.offsetWidth,s.css("overflow","scroll"),n=o.offsetWidth,i===n&&(n=s[0].clientWidth),s.remove(),r=i-n},getScrollInfo:function(e){var i=e.isWindow?"":e.element.css("overflow-x"),n=e.isWindow?"":e.element.css("overflow-y"),s="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth,r="scroll"===n||"auto"===n&&e.height<e.element[0].scrollHeight;return{width:r?t.position.scrollbarWidth():0,height:s?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),n=t.isWindow(i[0]);return{element:i,isWindow:n,offset:i.offset()||{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:n?i.width():i.outerWidth(),height:n?i.height():i.outerHeight()}}},t.fn.position=function(e){if(!e||!e.of)return p.apply(this,arguments);e=t.extend({},e);var r,f,m,g,v,b,y=t(e.of),_=t.position.getWithinInfo(e.within),w=t.position.getScrollInfo(_),x=(e.collision||"flip").split(" "),k={};return b=s(y),y[0].preventDefault&&(e.at="left top"),f=b.width,m=b.height,g=b.offset,v=t.extend({},g),t.each(["my","at"],function(){var t,i,n=(e[this]||"").split(" ");1===n.length&&(n=u.test(n[0])?n.concat(["center"]):h.test(n[0])?["center"].concat(n):["center","center"]),n[0]=u.test(n[0])?n[0]:"center",n[1]=h.test(n[1])?n[1]:"center",t=c.exec(n[0]),i=c.exec(n[1]),k[this]=[t?t[0]:0,i?i[0]:0],e[this]=[d.exec(n[0])[0],d.exec(n[1])[0]]}),1===x.length&&(x[1]=x[0]),"right"===e.at[0]?v.left+=f:"center"===e.at[0]&&(v.left+=f/2),"bottom"===e.at[1]?v.top+=m:"center"===e.at[1]&&(v.top+=m/2),r=i(k.at,f,m),v.left+=r[0],v.top+=r[1],this.each(function(){var s,u,h=t(this),c=h.outerWidth(),d=h.outerHeight(),p=n(this,"marginLeft"),b=n(this,"marginTop"),C=c+p+n(this,"marginRight")+w.width,D=d+b+n(this,"marginBottom")+w.height,T=t.extend({},v),S=i(k.my,h.outerWidth(),h.outerHeight());"right"===e.my[0]?T.left-=c:"center"===e.my[0]&&(T.left-=c/2),"bottom"===e.my[1]?T.top-=d:"center"===e.my[1]&&(T.top-=d/2),T.left+=S[0],T.top+=S[1],t.support.offsetFractions||(T.left=l(T.left),T.top=l(T.top)),s={marginLeft:p,marginTop:b},t.each(["left","top"],function(i,n){t.ui.position[x[i]]&&t.ui.position[x[i]][n](T,{targetWidth:f,targetHeight:m,elemWidth:c,elemHeight:d,collisionPosition:s,collisionWidth:C,collisionHeight:D,offset:[r[0]+S[0],r[1]+S[1]],my:e.my,at:e.at,within:_,elem:h})}),e.using&&(u=function(t){var i=g.left-T.left,n=i+f-c,s=g.top-T.top,r=s+m-d,l={target:{element:y,left:g.left,top:g.top,width:f,height:m},element:{element:h,left:T.left,top:T.top,width:c,height:d},horizontal:0>n?"left":i>0?"right":"center",vertical:0>r?"top":s>0?"bottom":"middle"};c>f&&a(i+n)<f&&(l.horizontal="center"),d>m&&a(s+r)<m&&(l.vertical="middle"),l.important=o(a(i),a(n))>o(a(s),a(r))?"horizontal":"vertical",e.using.call(this,t,l)}),h.offset(t.extend(T,{using:u}))})},t.ui.position={fit:{left:function(t,e){var i,n=e.within,s=n.isWindow?n.scrollLeft:n.offset.left,r=n.width,a=t.left-e.collisionPosition.marginLeft,l=s-a,u=a+e.collisionWidth-r-s;e.collisionWidth>r?l>0&&0>=u?(i=t.left+l+e.collisionWidth-r-s,t.left+=l-i):t.left=u>0&&0>=l?s:l>u?s+r-e.collisionWidth:s:l>0?t.left+=l:u>0?t.left-=u:t.left=o(t.left-a,t.left)},top:function(t,e){var i,n=e.within,s=n.isWindow?n.scrollTop:n.offset.top,r=e.within.height,a=t.top-e.collisionPosition.marginTop,l=s-a,u=a+e.collisionHeight-r-s;e.collisionHeight>r?l>0&&0>=u?(i=t.top+l+e.collisionHeight-r-s,t.top+=l-i):t.top=u>0&&0>=l?s:l>u?s+r-e.collisionHeight:s:l>0?t.top+=l:u>0?t.top-=u:t.top=o(t.top-a,t.top)}},flip:{left:function(t,e){var i,n,s=e.within,r=s.offset.left+s.scrollLeft,o=s.width,l=s.isWindow?s.scrollLeft:s.offset.left,u=t.left-e.collisionPosition.marginLeft,h=u-l,c=u+e.collisionWidth-o-l,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,f="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,p=-2*e.offset[0];0>h?(i=t.left+d+f+p+e.collisionWidth-o-r,(0>i||i<a(h))&&(t.left+=d+f+p)):c>0&&(n=t.left-e.collisionPosition.marginLeft+d+f+p-l,(n>0||a(n)<c)&&(t.left+=d+f+p))},top:function(t,e){var i,n,s=e.within,r=s.offset.top+s.scrollTop,o=s.height,l=s.isWindow?s.scrollTop:s.offset.top,u=t.top-e.collisionPosition.marginTop,h=u-l,c=u+e.collisionHeight-o-l,d="top"===e.my[1],f=d?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,p="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,m=-2*e.offset[1];0>h?(n=t.top+f+p+m+e.collisionHeight-o-r,t.top+f+p+m>h&&(0>n||n<a(h))&&(t.top+=f+p+m)):c>0&&(i=t.top-e.collisionPosition.marginTop+f+p+m-l,t.top+f+p+m>c&&(i>0||a(i)<c)&&(t.top+=f+p+m))}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}},function(){var e,i,n,s,r,o=document.getElementsByTagName("body")[0],a=document.createElement("div");e=document.createElement(o?"div":"body"),n={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},o&&t.extend(n,{position:"absolute",left:"-1000px",top:"-1000px"});for(r in n)e.style[r]=n[r];e.appendChild(a),i=o||document.documentElement,i.insertBefore(e,i.firstChild),a.style.cssText="position: absolute; left: 10.7432222px;",s=t(a).offset().left,t.support.offsetFractions=s>10&&11>s,e.innerHTML="",i.removeChild(e)}()}(e),function(t,e){t.widget("ui.progressbar",{version:"1.10.3",options:{max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min}),this.valueDiv=t("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element),this._refreshValue()},_destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.valueDiv.remove()},value:function(t){return t===e?this.options.value:(this.options.value=this._constrainedValue(t),void this._refreshValue())},_constrainedValue:function(t){return t===e&&(t=this.options.value),this.indeterminate=t===!1,"number"!=typeof t&&(t=0),this.indeterminate?!1:Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).toggleClass("ui-corner-right",e===this.options.max).width(i.toFixed(0)+"%"),this.element.toggleClass("ui-progressbar-indeterminate",this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}})}(e),function(t){var e=5;t.widget("ui.slider",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget ui-widget-content ui-corner-all"),this._refresh(),this._setOption("disabled",this.options.disabled),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,n=this.options,s=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),r="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",o=[];for(i=n.values&&n.values.length||1,s.length>i&&(s.slice(i).remove(),s=s.slice(0,i)),e=s.length;i>e;e++)o.push(r);this.handles=s.add(t(o.join("")).appendTo(this.element)),this.handle=this.handles.eq(0),this.handles.each(function(e){t(this).data("ui-slider-handle-index",e)})},_createRange:function(){var e=this.options,i="";e.range?(e.range===!0&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({left:"",bottom:""}):(this.range=t("<div></div>").appendTo(this.element),i="ui-slider-range ui-widget-header ui-corner-all"),this.range.addClass(i+("min"===e.range||"max"===e.range?" ui-slider-range-"+e.range:""))):this.range=t([])},_setupEvents:function(){var t=this.handles.add(this.range).filter("a");this._off(t),this._on(t,this._handleEvents),this._hoverable(t),this._focusable(t)},_destroy:function(){this.handles.remove(),this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"),this._mouseDestroy()},_mouseCapture:function(e){var i,n,s,r,o,a,l,u,h=this,c=this.options;return c.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},n=this._normValueFromMouse(i),s=this._valueMax()-this._valueMin()+1,this.handles.each(function(e){var i=Math.abs(n-h.values(e));(s>i||s===i&&(e===h._lastChangedValue||h.values(e)===c.min))&&(s=i,r=t(this),o=e)}),a=this._start(e,o),a===!1?!1:(this._mouseSliding=!0,this._handleIndex=o,r.addClass("ui-state-active").focus(),l=r.offset(),u=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=u?{left:0,top:0}:{left:e.pageX-l.left-r.width()/2,top:e.pageY-l.top-r.height()/2-(parseInt(r.css("borderTopWidth"),10)||0)-(parseInt(r.css("borderBottomWidth"),10)||0)+(parseInt(r.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,o,n),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,n,s,r;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),n=i/e,n>1&&(n=1),0>n&&(n=0),"vertical"===this.orientation&&(n=1-n),s=this._valueMax()-this._valueMin(),r=this._valueMin()+n*s,this._trimAlignValue(r)},_start:function(t,e){var i={handle:this.handles[e],value:this.value()};return this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._trigger("start",t,i)},_slide:function(t,e,i){var n,s,r;this.options.values&&this.options.values.length?(n=this.values(e?0:1),2===this.options.values.length&&this.options.range===!0&&(0===e&&i>n||1===e&&n>i)&&(i=n),i!==this.values(e)&&(s=this.values(),s[e]=i,r=this._trigger("slide",t,{handle:this.handles[e],value:i,values:s}),n=this.values(e?0:1),r!==!1&&this.values(e,i,!0))):i!==this.value()&&(r=this._trigger("slide",t,{handle:this.handles[e],value:i}),r!==!1&&this.value(i))},_stop:function(t,e){var i={handle:this.handles[e],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._trigger("stop",t,i)},_change:function(t,e){if(!this._keySliding&&!this._mouseSliding){var i={handle:this.handles[e],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._lastChangedValue=e,this._trigger("change",t,i)}},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),void this._change(null,0)):this._value()},values:function(e,i){var n,s,r;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),void this._change(null,e);if(!arguments.length)return this._values();if(!t.isArray(arguments[0]))return this.options.values&&this.options.values.length?this._values(e):this.value();for(n=this.options.values,s=arguments[0],r=0;r<n.length;r+=1)n[r]=this._trimAlignValue(s[r]),this._change(null,r);this._refreshValue()},_setOption:function(e,i){var n,s=0;switch("range"===e&&this.options.range===!0&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(s=this.options.values.length),t.Widget.prototype._setOption.apply(this,arguments),e){case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue();break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),n=0;s>n;n+=1)this._change(null,n);this._animateOff=!1;break;case"min":case"max":this._animateOff=!0,this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_value:function(){var t=this.options.value;return t=this._trimAlignValue(t)},_values:function(t){var e,i,n;if(arguments.length)return e=this.options.values[t],e=this._trimAlignValue(e);if(this.options.values&&this.options.values.length){for(i=this.options.values.slice(),n=0;n<i.length;n+=1)i[n]=this._trimAlignValue(i[n]);return i}return[]},_trimAlignValue:function(t){if(t<=this._valueMin())return this._valueMin();if(t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,n=t-i;return 2*Math.abs(i)>=e&&(n+=i>0?e:-e),parseFloat(n.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var e,i,n,s,r,o=this.options.range,a=this.options,l=this,u=this._animateOff?!1:a.animate,h={};this.options.values&&this.options.values.length?this.handles.each(function(n){i=(l.values(n)-l._valueMin())/(l._valueMax()-l._valueMin())*100,h["horizontal"===l.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[u?"animate":"css"](h,a.animate),l.options.range===!0&&("horizontal"===l.orientation?(0===n&&l.range.stop(1,1)[u?"animate":"css"]({left:i+"%"},a.animate),1===n&&l.range[u?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:a.animate})):(0===n&&l.range.stop(1,1)[u?"animate":"css"]({bottom:i+"%"},a.animate),1===n&&l.range[u?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:a.animate}))),e=i}):(n=this.value(),s=this._valueMin(),r=this._valueMax(),i=r!==s?(n-s)/(r-s)*100:0,h["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[u?"animate":"css"](h,a.animate),"min"===o&&"horizontal"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({width:i+"%"},a.animate),"max"===o&&"horizontal"===this.orientation&&this.range[u?"animate":"css"]({width:100-i+"%"},{queue:!1,duration:a.animate}),"min"===o&&"vertical"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({height:i+"%"},a.animate),"max"===o&&"vertical"===this.orientation&&this.range[u?"animate":"css"]({height:100-i+"%"},{queue:!1,duration:a.animate}))},_handleEvents:{keydown:function(i){var n,s,r,o,a=t(i.target).data("ui-slider-handle-index");switch(i.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(i.preventDefault(),!this._keySliding&&(this._keySliding=!0,t(i.target).addClass("ui-state-active"),n=this._start(i,a),n===!1))return}switch(o=this.options.step,s=r=this.options.values&&this.options.values.length?this.values(a):this.value(),i.keyCode){case t.ui.keyCode.HOME:r=this._valueMin();break;case t.ui.keyCode.END:r=this._valueMax();break;case t.ui.keyCode.PAGE_UP:r=this._trimAlignValue(s+(this._valueMax()-this._valueMin())/e);break;case t.ui.keyCode.PAGE_DOWN:r=this._trimAlignValue(s-(this._valueMax()-this._valueMin())/e);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if(s===this._valueMax())return;r=this._trimAlignValue(s+o);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(s===this._valueMin())return;r=this._trimAlignValue(s-o)}this._slide(i,a,r)},click:function(t){t.preventDefault()},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),t(e.target).removeClass("ui-state-active"))}}})}(e),function(t){function e(t){return function(){var e=this.element.val();t.apply(this,arguments),this._refresh(),e!==this.element.val()&&this._trigger("change")}}t.widget("ui.spinner",{version:"1.10.3",defaultElement:"<input>",widgetEventPrefix:"spin",options:{culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var e={},i=this.element;return t.each(["min","max","step"],function(t,n){var s=i.attr(n);void 0!==s&&s.length&&(e[n]=s)}),e},_events:{keydown:function(t){this._start(t)&&this._keydown(t)&&t.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(t){return this.cancelBlur?void delete this.cancelBlur:(this._stop(),this._refresh(),void(this.previous!==this.element.val()&&this._trigger("change",t)))},mousewheel:function(t,e){if(e){if(!this.spinning&&!this._start(t))return!1;this._spin((e>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(t)},100),t.preventDefault()}},"mousedown .ui-spinner-button":function(e){function i(){var t=this.element[0]===this.document[0].activeElement;t||(this.element.focus(),this.previous=n,this._delay(function(){this.previous=n}))}var n;n=this.element[0]===this.document[0].activeElement?this.previous:this.element.val(),e.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,i.call(this)}),this._start(e)!==!1&&this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(e){return t(e.currentTarget).hasClass("ui-state-active")?this._start(e)===!1?!1:void this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e):void 0},"mouseleave .ui-spinner-button":"_stop"},_draw:function(){var t=this.uiSpinner=this.element.addClass("ui-spinner-input").attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());this.element.attr("role","spinbutton"),this.buttons=t.find(".ui-spinner-button").attr("tabIndex",-1).button().removeClass("ui-corner-all"),this.buttons.height()>Math.ceil(.5*t.height())&&t.height()>0&&t.height(t.height()),this.options.disabled&&this.disable()},_keydown:function(e){var i=this.options,n=t.ui.keyCode;switch(e.keyCode){case n.UP:return this._repeat(null,1,e),!0;case n.DOWN:return this._repeat(null,-1,e),!0;case n.PAGE_UP:return this._repeat(null,i.page,e),!0;case n.PAGE_DOWN:return this._repeat(null,-i.page,e),!0}return!1},_uiSpinnerHtml:function(){return"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"},_buttonHtml:function(){return"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon "+this.options.icons.up+"'>&#9650;</span></a><a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon "+this.options.icons.down+"'>&#9660;</span></a>"},_start:function(t){return this.spinning||this._trigger("start",t)!==!1?(this.counter||(this.counter=1),this.spinning=!0,!0):!1},_repeat:function(t,e,i){t=t||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,e,i)},t),this._spin(e*this.options.step,i)},_spin:function(t,e){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+t*this._increment(this.counter)),this.spinning&&this._trigger("spin",e,{value:i})===!1||(this._value(i),this.counter++)},_increment:function(e){var i=this.options.incremental;return i?t.isFunction(i)?i(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=t.toString(),i=e.indexOf(".");return-1===i?0:e.length-i-1},_adjustValue:function(t){var e,i,n=this.options;return e=null!==n.min?n.min:0,i=t-e,i=Math.round(i/n.step)*n.step,t=e+i,t=parseFloat(t.toFixed(this._precision())),null!==n.max&&t>n.max?n.max:null!==n.min&&t<n.min?n.min:t},_stop:function(t){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",t))
},_setOption:function(t,e){if("culture"===t||"numberFormat"===t){var i=this._parse(this.element.val());return this.options[t]=e,void this.element.val(this._format(i))}("max"===t||"min"===t||"step"===t)&&"string"==typeof e&&(e=this._parse(e)),"icons"===t&&(this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(e.up),this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(e.down)),this._super(t,e),"disabled"===t&&(e?(this.element.prop("disabled",!0),this.buttons.button("disable")):(this.element.prop("disabled",!1),this.buttons.button("enable")))},_setOptions:e(function(t){this._super(t),this._value(this.element.val())}),_parse:function(t){return"string"==typeof t&&""!==t&&(t=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(t,10,this.options.culture):+t),""===t||isNaN(t)?null:t},_format:function(t){return""===t?"":window.Globalize&&this.options.numberFormat?Globalize.format(t,this.options.numberFormat,this.options.culture):t},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},_value:function(t,e){var i;""!==t&&(i=this._parse(t),null!==i&&(e||(i=this._adjustValue(i)),t=this._format(i))),this.element.val(t),this._refresh()},_destroy:function(){this.element.removeClass("ui-spinner-input").prop("disabled",!1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:e(function(t){this._stepUp(t)}),_stepUp:function(t){this._start()&&(this._spin((t||1)*this.options.step),this._stop())},stepDown:e(function(t){this._stepDown(t)}),_stepDown:function(t){this._start()&&(this._spin((t||1)*-this.options.step),this._stop())},pageUp:e(function(t){this._stepUp((t||1)*this.options.page)}),pageDown:e(function(t){this._stepDown((t||1)*this.options.page)}),value:function(t){return arguments.length?void e(this._value).call(this,t):this._parse(this.element.val())},widget:function(){return this.uiSpinner}})}(e),function(t,e){function i(){return++s}function n(t){return t.hash.length>1&&decodeURIComponent(t.href.replace(r,""))===decodeURIComponent(location.href.replace(r,""))}var s=0,r=/#.*$/;t.widget("ui.tabs",{version:"1.10.3",delay:300,options:{active:null,collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_create:function(){var e=this,i=this.options;this.running=!1,this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible",i.collapsible).delegate(".ui-tabs-nav > li","mousedown"+this.eventNamespace,function(e){t(this).is(".ui-state-disabled")&&e.preventDefault()}).delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){t(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this._processTabs(),i.active=this._initialActive(),t.isArray(i.disabled)&&(i.disabled=t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"),function(t){return e.tabs.index(t)}))).sort()),this.active=this.options.active!==!1&&this.anchors.length?this._findActive(i.active):t(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var e=this.options.active,i=this.options.collapsible,n=location.hash.substring(1);return null===e&&(n&&this.tabs.each(function(i,s){return t(s).attr("aria-controls")===n?(e=i,!1):void 0}),null===e&&(e=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),(null===e||-1===e)&&(e=this.tabs.length?0:!1)),e!==!1&&(e=this.tabs.index(this.tabs.eq(e)),-1===e&&(e=i?!1:0)),!i&&e===!1&&this.anchors.length&&(e=0),e},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):t()}},_tabKeydown:function(e){var i=t(this.document[0].activeElement).closest("li"),n=this.tabs.index(i),s=!0;if(!this._handlePageNav(e)){switch(e.keyCode){case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:n++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:s=!1,n--;break;case t.ui.keyCode.END:n=this.anchors.length-1;break;case t.ui.keyCode.HOME:n=0;break;case t.ui.keyCode.SPACE:return e.preventDefault(),clearTimeout(this.activating),void this._activate(n);case t.ui.keyCode.ENTER:return e.preventDefault(),clearTimeout(this.activating),void this._activate(n===this.options.active?!1:n);default:return}e.preventDefault(),clearTimeout(this.activating),n=this._focusNextTab(n,s),e.ctrlKey||(i.attr("aria-selected","false"),this.tabs.eq(n).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",n)},this.delay))}},_panelKeydown:function(e){this._handlePageNav(e)||e.ctrlKey&&e.keyCode===t.ui.keyCode.UP&&(e.preventDefault(),this.active.focus())},_handlePageNav:function(e){return e.altKey&&e.keyCode===t.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):e.altKey&&e.keyCode===t.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):void 0},_findNextTab:function(e,i){function n(){return e>s&&(e=0),0>e&&(e=s),e}for(var s=this.tabs.length-1;-1!==t.inArray(n(),this.options.disabled);)e=i?e+1:e-1;return e},_focusNextTab:function(t,e){return t=this._findNextTab(t,e),this.tabs.eq(t).focus(),t},_setOption:function(t,e){return"active"===t?void this._activate(e):"disabled"===t?void this._setupDisabled(e):(this._super(t,e),"collapsible"===t&&(this.element.toggleClass("ui-tabs-collapsible",e),e||this.options.active!==!1||this._activate(0)),"event"===t&&this._setupEvents(e),void("heightStyle"===t&&this._setupHeightStyle(e)))},_tabId:function(t){return t.attr("aria-controls")||"ui-tabs-"+i()},_sanitizeSelector:function(t){return t?t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var e=this.options,i=this.tablist.children(":has(a[href])");e.disabled=t.map(i.filter(".ui-state-disabled"),function(t){return i.index(t)}),this._processTabs(),e.active!==!1&&this.anchors.length?this.active.length&&!t.contains(this.tablist[0],this.active[0])?this.tabs.length===e.disabled.length?(e.active=!1,this.active=t()):this._activate(this._findNextTab(Math.max(0,e.active-1),!1)):e.active=this.tabs.index(this.active):(e.active=!1,this.active=t()),this._refresh()},_refresh:function(){this._setupDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-expanded":"false","aria-hidden":"true"}),this.active.length?(this.active.addClass("ui-tabs-active ui-state-active").attr({"aria-selected":"true",tabIndex:0}),this._getPanelForTab(this.active).show().attr({"aria-expanded":"true","aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var e=this;this.tablist=this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role","tablist"),this.tabs=this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({role:"tab",tabIndex:-1}),this.anchors=this.tabs.map(function(){return t("a",this)[0]}).addClass("ui-tabs-anchor").attr({role:"presentation",tabIndex:-1}),this.panels=t(),this.anchors.each(function(i,s){var r,o,a,l=t(s).uniqueId().attr("id"),u=t(s).closest("li"),h=u.attr("aria-controls");n(s)?(r=s.hash,o=e.element.find(e._sanitizeSelector(r))):(a=e._tabId(u),r="#"+a,o=e.element.find(r),o.length||(o=e._createPanel(a),o.insertAfter(e.panels[i-1]||e.tablist)),o.attr("aria-live","polite")),o.length&&(e.panels=e.panels.add(o)),h&&u.data("ui-tabs-aria-controls",h),u.attr({"aria-controls":r.substring(1),"aria-labelledby":l}),o.attr("aria-labelledby",l)}),this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role","tabpanel")},_getList:function(){return this.element.find("ol,ul").eq(0)},_createPanel:function(e){return t("<div>").attr("id",e).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)},_setupDisabled:function(e){t.isArray(e)&&(e.length?e.length===this.anchors.length&&(e=!0):e=!1);for(var i,n=0;i=this.tabs[n];n++)e===!0||-1!==t.inArray(n,e)?t(i).addClass("ui-state-disabled").attr("aria-disabled","true"):t(i).removeClass("ui-state-disabled").removeAttr("aria-disabled");this.options.disabled=e},_setupEvents:function(e){var i={click:function(t){t.preventDefault()}};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(e){var i,n=this.element.parent();"fill"===e?(i=n.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each(function(){var e=t(this),n=e.css("position");"absolute"!==n&&"fixed"!==n&&(i-=e.outerHeight(!0))}),this.element.children().not(this.panels).each(function(){i-=t(this).outerHeight(!0)}),this.panels.each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===e&&(i=0,this.panels.each(function(){i=Math.max(i,t(this).height("").height())}).height(i))},_eventHandler:function(e){var i=this.options,n=this.active,s=t(e.currentTarget),r=s.closest("li"),o=r[0]===n[0],a=o&&i.collapsible,l=a?t():this._getPanelForTab(r),u=n.length?this._getPanelForTab(n):t(),h={oldTab:n,oldPanel:u,newTab:a?t():r,newPanel:l};e.preventDefault(),r.hasClass("ui-state-disabled")||r.hasClass("ui-tabs-loading")||this.running||o&&!i.collapsible||this._trigger("beforeActivate",e,h)===!1||(i.active=a?!1:this.tabs.index(r),this.active=o?t():r,this.xhr&&this.xhr.abort(),u.length||l.length||t.error("jQuery UI Tabs: Mismatching fragment identifier."),l.length&&this.load(this.tabs.index(r),e),this._toggle(e,h))},_toggle:function(e,i){function n(){r.running=!1,r._trigger("activate",e,i)}function s(){i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),o.length&&r.options.show?r._show(o,r.options.show,n):(o.show(),n())}var r=this,o=i.newPanel,a=i.oldPanel;this.running=!0,a.length&&this.options.hide?this._hide(a,this.options.hide,function(){i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),s()}):(i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),a.hide(),s()),a.attr({"aria-expanded":"false","aria-hidden":"true"}),i.oldTab.attr("aria-selected","false"),o.length&&a.length?i.oldTab.attr("tabIndex",-1):o.length&&this.tabs.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),o.attr({"aria-expanded":"true","aria-hidden":"false"}),i.newTab.attr({"aria-selected":"true",tabIndex:0})},_activate:function(e){var i,n=this._findActive(e);n[0]!==this.active[0]&&(n.length||(n=this.active),i=n.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return e===!1?t():this.tabs.eq(e)},_getIndex:function(t){return"string"==typeof t&&(t=this.anchors.index(this.anchors.filter("[href$='"+t+"']"))),t},_destroy:function(){this.xhr&&this.xhr.abort(),this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"),this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"),this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId(),this.tabs.add(this.panels).each(function(){t.data(this,"ui-tabs-destroy")?t(this).remove():t(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")}),this.tabs.each(function(){var e=t(this),i=e.data("ui-tabs-aria-controls");i?e.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):e.removeAttr("aria-controls")}),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(i){var n=this.options.disabled;n!==!1&&(i===e?n=!1:(i=this._getIndex(i),n=t.isArray(n)?t.map(n,function(t){return t!==i?t:null}):t.map(this.tabs,function(t,e){return e!==i?e:null})),this._setupDisabled(n))},disable:function(i){var n=this.options.disabled;if(n!==!0){if(i===e)n=!0;else{if(i=this._getIndex(i),-1!==t.inArray(i,n))return;n=t.isArray(n)?t.merge([i],n).sort():[i]}this._setupDisabled(n)}},load:function(e,i){e=this._getIndex(e);var s=this,r=this.tabs.eq(e),o=r.find(".ui-tabs-anchor"),a=this._getPanelForTab(r),l={tab:r,panel:a};n(o[0])||(this.xhr=t.ajax(this._ajaxSettings(o,i,l)),this.xhr&&"canceled"!==this.xhr.statusText&&(r.addClass("ui-tabs-loading"),a.attr("aria-busy","true"),this.xhr.success(function(t){setTimeout(function(){a.html(t),s._trigger("load",i,l)},1)}).complete(function(t,e){setTimeout(function(){"abort"===e&&s.panels.stop(!1,!0),r.removeClass("ui-tabs-loading"),a.removeAttr("aria-busy"),t===s.xhr&&delete s.xhr},1)})))},_ajaxSettings:function(e,i,n){var s=this;return{url:e.attr("href"),beforeSend:function(e,r){return s._trigger("beforeLoad",i,t.extend({jqXHR:e,ajaxSettings:r},n))}}},_getPanelForTab:function(e){var i=t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}})}(e),function(t){function e(e,i){var n=(e.attr("aria-describedby")||"").split(/\s+/);n.push(i),e.data("ui-tooltip-id",i).attr("aria-describedby",t.trim(n.join(" ")))}function i(e){var i=e.data("ui-tooltip-id"),n=(e.attr("aria-describedby")||"").split(/\s+/),s=t.inArray(i,n);-1!==s&&n.splice(s,1),e.removeData("ui-tooltip-id"),n=t.trim(n.join(" ")),n?e.attr("aria-describedby",n):e.removeAttr("aria-describedby")}var n=0;t.widget("ui.tooltip",{version:"1.10.3",options:{content:function(){var e=t(this).attr("title")||"";return t("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,tooltipClass:null,track:!1,close:null,open:null},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.options.disabled&&this._disable()},_setOption:function(e,i){var n=this;return"disabled"===e?(this[i?"_disable":"_enable"](),void(this.options[e]=i)):(this._super(e,i),void("content"===e&&t.each(this.tooltips,function(t,e){n._updateContent(e)})))},_disable:function(){var e=this;t.each(this.tooltips,function(i,n){var s=t.Event("blur");s.target=s.currentTarget=n[0],e.close(s,!0)}),this.element.find(this.options.items).addBack().each(function(){var e=t(this);e.is("[title]")&&e.data("ui-tooltip-title",e.attr("title")).attr("title","")})},_enable:function(){this.element.find(this.options.items).addBack().each(function(){var e=t(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))})},open:function(e){var i=this,n=t(e?e.target:this.element).closest(this.options.items);n.length&&!n.data("ui-tooltip-id")&&(n.attr("title")&&n.data("ui-tooltip-title",n.attr("title")),n.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&n.parents().each(function(){var e,n=t(this);n.data("ui-tooltip-open")&&(e=t.Event("blur"),e.target=e.currentTarget=this,i.close(e,!0)),n.attr("title")&&(n.uniqueId(),i.parents[this.id]={element:this,title:n.attr("title")},n.attr("title",""))}),this._updateContent(n,e))},_updateContent:function(t,e){var i,n=this.options.content,s=this,r=e?e.type:null;return"string"==typeof n?this._open(e,t,n):(i=n.call(t[0],function(i){t.data("ui-tooltip-open")&&s._delay(function(){e&&(e.type=r),this._open(e,t,i)})}),void(i&&this._open(e,t,i)))},_open:function(i,n,s){function r(t){u.of=t,o.is(":hidden")||o.position(u)}var o,a,l,u=t.extend({},this.options.position);if(s){if(o=this._find(n),o.length)return void o.find(".ui-tooltip-content").html(s);n.is("[title]")&&(i&&"mouseover"===i.type?n.attr("title",""):n.removeAttr("title")),o=this._tooltip(n),e(n,o.attr("id")),o.find(".ui-tooltip-content").html(s),this.options.track&&i&&/^mouse/.test(i.type)?(this._on(this.document,{mousemove:r}),r(i)):o.position(t.extend({of:n},this.options.position)),o.hide(),this._show(o,this.options.show),this.options.show&&this.options.show.delay&&(l=this.delayedShow=setInterval(function(){o.is(":visible")&&(r(u.of),clearInterval(l))},t.fx.interval)),this._trigger("open",i,{tooltip:o}),a={keyup:function(e){if(e.keyCode===t.ui.keyCode.ESCAPE){var i=t.Event(e);i.currentTarget=n[0],this.close(i,!0)}},remove:function(){this._removeTooltip(o)}},i&&"mouseover"!==i.type||(a.mouseleave="close"),i&&"focusin"!==i.type||(a.focusout="close"),this._on(!0,n,a)}},close:function(e){var n=this,s=t(e?e.currentTarget:this.element),r=this._find(s);this.closing||(clearInterval(this.delayedShow),s.data("ui-tooltip-title")&&s.attr("title",s.data("ui-tooltip-title")),i(s),r.stop(!0),this._hide(r,this.options.hide,function(){n._removeTooltip(t(this))}),s.removeData("ui-tooltip-open"),this._off(s,"mouseleave focusout keyup"),s[0]!==this.element[0]&&this._off(s,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&t.each(this.parents,function(e,i){t(i.element).attr("title",i.title),delete n.parents[e]}),this.closing=!0,this._trigger("close",e,{tooltip:r}),this.closing=!1)},_tooltip:function(e){var i="ui-tooltip-"+n++,s=t("<div>").attr({id:i,role:"tooltip"}).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+(this.options.tooltipClass||""));return t("<div>").addClass("ui-tooltip-content").appendTo(s),s.appendTo(this.document[0].body),this.tooltips[i]=e,s},_find:function(e){var i=e.data("ui-tooltip-id");return i?t("#"+i):t()},_removeTooltip:function(t){t.remove(),delete this.tooltips[t.attr("id")]},_destroy:function(){var e=this;t.each(this.tooltips,function(i,n){var s=t.Event("blur");s.target=s.currentTarget=n[0],e.close(s,!0),t("#"+i).remove(),n.data("ui-tooltip-title")&&(n.attr("title",n.data("ui-tooltip-title")),n.removeData("ui-tooltip-title"))})}})}(e)},{jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js"}],"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js":[function(t,e){!function(t,i){"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?i(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(t)}("undefined"!=typeof window?window:this,function(t,e){function i(t){var e=t.length,i=Q.type(t);return"function"===i||Q.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t}function n(t,e,i){if(Q.isFunction(e))return Q.grep(t,function(t,n){return!!e.call(t,n,t)!==i});if(e.nodeType)return Q.grep(t,function(t){return t===e!==i});if("string"==typeof e){if(ae.test(e))return Q.filter(e,t,i);e=Q.filter(e,t)}return Q.grep(t,function(t){return B.call(e,t)>=0!==i})}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function r(t){var e=pe[t]={};return Q.each(t.match(fe)||[],function(t,i){e[i]=!0}),e}function o(){J.removeEventListener("DOMContentLoaded",o,!1),t.removeEventListener("load",o,!1),Q.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Q.expando+a.uid++}function l(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(_e,"-$1").toLowerCase(),i=t.getAttribute(n),"string"==typeof i){try{i="true"===i?!0:"false"===i?!1:"null"===i?null:+i+""===i?+i:ye.test(i)?Q.parseJSON(i):i}catch(s){}be.set(t,e,i)}else i=void 0;return i}function u(){return!0}function h(){return!1}function c(){try{return J.activeElement}catch(t){}}function d(t,e){return Q.nodeName(t,"table")&&Q.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function f(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function p(t){var e=Oe.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function m(t,e){for(var i=0,n=t.length;n>i;i++)ve.set(t[i],"globalEval",!e||ve.get(e[i],"globalEval"))}function g(t,e){var i,n,s,r,o,a,l,u;if(1===e.nodeType){if(ve.hasData(t)&&(r=ve.access(t),o=ve.set(e,r),u=r.events)){delete o.handle,o.events={};for(s in u)for(i=0,n=u[s].length;n>i;i++)Q.event.add(e,s,u[s][i])}be.hasData(t)&&(a=be.access(t),l=Q.extend({},a),be.set(e,l))}}function v(t,e){var i=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&Q.nodeName(t,e)?Q.merge([t],i):i}function b(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Ce.test(t.type)?e.checked=t.checked:("input"===i||"textarea"===i)&&(e.defaultValue=t.defaultValue)}function y(e,i){var n,s=Q(i.createElement(e)).appendTo(i.body),r=t.getDefaultComputedStyle&&(n=t.getDefaultComputedStyle(s[0]))?n.display:Q.css(s[0],"display");return s.detach(),r}function _(t){var e=J,i=Le[t];return i||(i=y(t,e),"none"!==i&&i||(Fe=(Fe||Q("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Fe[0].contentDocument,e.write(),e.close(),i=y(t,e),Fe.detach()),Le[t]=i),i}function w(t,e,i){var n,s,r,o,a=t.style;return i=i||Ue(t),i&&(o=i.getPropertyValue(e)||i[e]),i&&(""!==o||Q.contains(t.ownerDocument,t)||(o=Q.style(t,e)),Re.test(o)&&Ye.test(e)&&(n=a.width,s=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=s,a.maxWidth=r)),void 0!==o?o+"":o}function x(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function k(t,e){if(e in t)return e;for(var i=e[0].toUpperCase()+e.slice(1),n=e,s=Xe.length;s--;)if(e=Xe[s]+i,e in t)return e;return n}function C(t,e,i){var n=$e.exec(e);return n?Math.max(0,n[1]-(i||0))+(n[2]||"px"):e}function D(t,e,i,n,s){for(var r=i===(n?"border":"content")?4:"width"===e?1:0,o=0;4>r;r+=2)"margin"===i&&(o+=Q.css(t,i+xe[r],!0,s)),n?("content"===i&&(o-=Q.css(t,"padding"+xe[r],!0,s)),"margin"!==i&&(o-=Q.css(t,"border"+xe[r]+"Width",!0,s))):(o+=Q.css(t,"padding"+xe[r],!0,s),"padding"!==i&&(o+=Q.css(t,"border"+xe[r]+"Width",!0,s)));return o}function T(t,e,i){var n=!0,s="width"===e?t.offsetWidth:t.offsetHeight,r=Ue(t),o="border-box"===Q.css(t,"boxSizing",!1,r);if(0>=s||null==s){if(s=w(t,e,r),(0>s||null==s)&&(s=t.style[e]),Re.test(s))return s;n=o&&(K.boxSizingReliable()||s===t.style[e]),s=parseFloat(s)||0}return s+D(t,e,i||(o?"border":"content"),n,r)+"px"}function S(t,e){for(var i,n,s,r=[],o=0,a=t.length;a>o;o++)n=t[o],n.style&&(r[o]=ve.get(n,"olddisplay"),i=n.style.display,e?(r[o]||"none"!==i||(n.style.display=""),""===n.style.display&&ke(n)&&(r[o]=ve.access(n,"olddisplay",_(n.nodeName)))):(s=ke(n),"none"===i&&s||ve.set(n,"olddisplay",s?i:Q.css(n,"display"))));for(o=0;a>o;o++)n=t[o],n.style&&(e&&"none"!==n.style.display&&""!==n.style.display||(n.style.display=e?r[o]||"":"none"));return t}function M(t,e,i,n,s){return new M.prototype.init(t,e,i,n,s)}function I(){return setTimeout(function(){Ke=void 0}),Ke=Q.now()}function P(t,e){var i,n=0,s={height:t};for(e=e?1:0;4>n;n+=2-e)i=xe[n],s["margin"+i]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function E(t,e,i){for(var n,s=(ii[e]||[]).concat(ii["*"]),r=0,o=s.length;o>r;r++)if(n=s[r].call(i,e,t))return n}function A(t,e,i){var n,s,r,o,a,l,u,h,c=this,d={},f=t.style,p=t.nodeType&&ke(t),m=ve.get(t,"fxshow");i.queue||(a=Q._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,c.always(function(){c.always(function(){a.unqueued--,Q.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],u=Q.css(t,"display"),h="none"===u?ve.get(t,"olddisplay")||_(t.nodeName):u,"inline"===h&&"none"===Q.css(t,"float")&&(f.display="inline-block")),i.overflow&&(f.overflow="hidden",c.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}));for(n in e)if(s=e[n],Ze.exec(s)){if(delete e[n],r=r||"toggle"===s,s===(p?"hide":"show")){if("show"!==s||!m||void 0===m[n])continue;p=!0}d[n]=m&&m[n]||Q.style(t,n)}else u=void 0;if(Q.isEmptyObject(d))"inline"===("none"===u?_(t.nodeName):u)&&(f.display=u);else{m?"hidden"in m&&(p=m.hidden):m=ve.access(t,"fxshow",{}),r&&(m.hidden=!p),p?Q(t).show():c.done(function(){Q(t).hide()}),c.done(function(){var e;ve.remove(t,"fxshow");for(e in d)Q.style(t,e,d[e])});for(n in d)o=E(p?m[n]:0,n,c),n in m||(m[n]=o.start,p&&(o.end=o.start,o.start="width"===n||"height"===n?1:0))}}function N(t,e){var i,n,s,r,o;for(i in t)if(n=Q.camelCase(i),s=e[n],r=t[i],Q.isArray(r)&&(s=r[1],r=t[i]=r[0]),i!==n&&(t[n]=r,delete t[i]),o=Q.cssHooks[n],o&&"expand"in o){r=o.expand(r),delete t[n];for(i in r)i in t||(t[i]=r[i],e[i]=s)}else e[n]=s}function j(t,e,i){var n,s,r=0,o=ei.length,a=Q.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=Ke||I(),i=Math.max(0,u.startTime+u.duration-e),n=i/u.duration||0,r=1-n,o=0,l=u.tweens.length;l>o;o++)u.tweens[o].run(r);return a.notifyWith(t,[u,r,i]),1>r&&l?i:(a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:Q.extend({},e),opts:Q.extend(!0,{specialEasing:{}},i),originalProperties:e,originalOptions:i,startTime:Ke||I(),duration:i.duration,tweens:[],createTween:function(e,i){var n=Q.Tween(t,u.opts,e,i,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var i=0,n=e?u.tweens.length:0;if(s)return this;for(s=!0;n>i;i++)u.tweens[i].run(1);return e?a.resolveWith(t,[u,e]):a.rejectWith(t,[u,e]),this}}),h=u.props;for(N(h,u.opts.specialEasing);o>r;r++)if(n=ei[r].call(u,t,h,u.opts))return n;return Q.map(h,E,u),Q.isFunction(u.opts.start)&&u.opts.start.call(t,u),Q.fx.timer(Q.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function z(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,r=e.toLowerCase().match(fe)||[];if(Q.isFunction(i))for(;n=r[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function O(t,e,i,n){function s(a){var l;return r[a]=!0,Q.each(t[a]||[],function(t,a){var u=a(e,i,n);return"string"!=typeof u||o||r[u]?o?!(l=u):void 0:(e.dataTypes.unshift(u),s(u),!1)}),l}var r={},o=t===yi;return s(e.dataTypes[0])||!r["*"]&&s("*")}function H(t,e){var i,n,s=Q.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&Q.extend(!0,t,n),t}function W(t,e,i){for(var n,s,r,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)r=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){r=s;break}o||(o=s)}r=r||o}return r?(r!==l[0]&&l.unshift(r),i[r]):void 0}function F(t,e,i,n){var s,r,o,a,l,u={},h=t.dataTypes.slice();if(h[1])for(o in t.converters)u[o.toLowerCase()]=t.converters[o];for(r=h.shift();r;)if(t.responseFields[r]&&(i[t.responseFields[r]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=h.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(o=u[l+" "+r]||u["* "+r],!o)for(s in u)if(a=s.split(" "),a[1]===r&&(o=u[l+" "+a[0]]||u["* "+a[0]])){o===!0?o=u[s]:u[s]!==!0&&(r=a[0],h.unshift(a[1]));break}if(o!==!0)if(o&&t["throws"])e=o(e);else try{e=o(e)}catch(c){return{state:"parsererror",error:o?c:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}function L(t,e,i,n){var s;if(Q.isArray(e))Q.each(e,function(e,s){i||Ci.test(t)?n(t,s):L(t+"["+("object"==typeof s?e:"")+"]",s,i,n)});else if(i||"object"!==Q.type(e))n(t,e);else for(s in e)L(t+"["+s+"]",e[s],i,n)}function Y(t){return Q.isWindow(t)?t:9===t.nodeType&&t.defaultView}var R=[],U=R.slice,q=R.concat,$=R.push,B=R.indexOf,V={},G=V.toString,X=V.hasOwnProperty,K={},J=t.document,Z="2.1.3",Q=function(t,e){return new Q.fn.init(t,e)},te=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ee=/^-ms-/,ie=/-([\da-z])/gi,ne=function(t,e){return e.toUpperCase()};Q.fn=Q.prototype={jquery:Z,constructor:Q,selector:"",length:0,toArray:function(){return U.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:U.call(this)},pushStack:function(t){var e=Q.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return Q.each(this,t,e)},map:function(t){return this.pushStack(Q.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(U.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(0>t?e:0);return this.pushStack(i>=0&&e>i?[this[i]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:$,sort:R.sort,splice:R.splice},Q.extend=Q.fn.extend=function(){var t,e,i,n,s,r,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||Q.isFunction(o)||(o={}),a===l&&(o=this,a--);l>a;a++)if(null!=(t=arguments[a]))for(e in t)i=o[e],n=t[e],o!==n&&(u&&n&&(Q.isPlainObject(n)||(s=Q.isArray(n)))?(s?(s=!1,r=i&&Q.isArray(i)?i:[]):r=i&&Q.isPlainObject(i)?i:{},o[e]=Q.extend(u,r,n)):void 0!==n&&(o[e]=n));return o},Q.extend({expando:"jQuery"+(Z+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===Q.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!Q.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"!==Q.type(t)||t.nodeType||Q.isWindow(t)?!1:t.constructor&&!X.call(t.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?V[G.call(t)]||"object":typeof t},globalEval:function(t){var e,i=eval;t=Q.trim(t),t&&(1===t.indexOf("use strict")?(e=J.createElement("script"),e.text=t,J.head.appendChild(e).parentNode.removeChild(e)):i(t))},camelCase:function(t){return t.replace(ee,"ms-").replace(ie,ne)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,n){var s,r=0,o=t.length,a=i(t);if(n){if(a)for(;o>r&&(s=e.apply(t[r],n),s!==!1);r++);else for(r in t)if(s=e.apply(t[r],n),s===!1)break}else if(a)for(;o>r&&(s=e.call(t[r],r,t[r]),s!==!1);r++);else for(r in t)if(s=e.call(t[r],r,t[r]),s===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(te,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(i(Object(t))?Q.merge(n,"string"==typeof t?[t]:t):$.call(n,t)),n},inArray:function(t,e,i){return null==e?-1:B.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;i>n;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n,s=[],r=0,o=t.length,a=!i;o>r;r++)n=!e(t[r],r),n!==a&&s.push(t[r]);return s},map:function(t,e,n){var s,r=0,o=t.length,a=i(t),l=[];if(a)for(;o>r;r++)s=e(t[r],r,n),null!=s&&l.push(s);else for(r in t)s=e(t[r],r,n),null!=s&&l.push(s);return q.apply([],l)},guid:1,proxy:function(t,e){var i,n,s;return"string"==typeof e&&(i=t[e],e=t,t=i),Q.isFunction(t)?(n=U.call(arguments,2),s=function(){return t.apply(e||this,n.concat(U.call(arguments)))},s.guid=t.guid=t.guid||Q.guid++,s):void 0},now:Date.now,support:K}),Q.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){V["[object "+e+"]"]=e.toLowerCase()});var se=function(t){function e(t,e,i,n){var s,r,o,a,l,u,c,f,p,m;if((e?e.ownerDocument||e:L)!==A&&E(e),e=e||A,i=i||[],a=e.nodeType,"string"!=typeof t||!t||1!==a&&9!==a&&11!==a)return i;if(!n&&j){if(11!==a&&(s=be.exec(t)))if(o=s[1]){if(9===a){if(r=e.getElementById(o),!r||!r.parentNode)return i;if(r.id===o)return i.push(r),i}else if(e.ownerDocument&&(r=e.ownerDocument.getElementById(o))&&W(e,r)&&r.id===o)return i.push(r),i}else{if(s[2])return Z.apply(i,e.getElementsByTagName(t)),i;
if((o=s[3])&&w.getElementsByClassName)return Z.apply(i,e.getElementsByClassName(o)),i}if(w.qsa&&(!z||!z.test(t))){if(f=c=F,p=e,m=1!==a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(u=D(t),(c=e.getAttribute("id"))?f=c.replace(_e,"\\$&"):e.setAttribute("id",f),f="[id='"+f+"'] ",l=u.length;l--;)u[l]=f+d(u[l]);p=ye.test(t)&&h(e.parentNode)||e,m=u.join(",")}if(m)try{return Z.apply(i,p.querySelectorAll(m)),i}catch(g){}finally{c||e.removeAttribute("id")}}}return S(t.replace(le,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>x.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[F]=!0,t}function s(t){var e=A.createElement("div");try{return!!t(e)}catch(i){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function r(t,e){for(var i=t.split("|"),n=t.length;n--;)x.attrHandle[i[n]]=e}function o(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function u(t){return n(function(e){return e=+e,n(function(i,n){for(var s,r=t([],i.length,e),o=r.length;o--;)i[s=r[o]]&&(i[s]=!(n[s]=i[s]))})})}function h(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function c(){}function d(t){for(var e=0,i=t.length,n="";i>e;e++)n+=t[e].value;return n}function f(t,e,i){var n=e.dir,s=i&&"parentNode"===n,r=R++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||s)return t(e,i,r)}:function(e,i,o){var a,l,u=[Y,r];if(o){for(;e=e[n];)if((1===e.nodeType||s)&&t(e,i,o))return!0}else for(;e=e[n];)if(1===e.nodeType||s){if(l=e[F]||(e[F]={}),(a=l[n])&&a[0]===Y&&a[1]===r)return u[2]=a[2];if(l[n]=u,u[2]=t(e,i,o))return!0}}}function p(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function m(t,i,n){for(var s=0,r=i.length;r>s;s++)e(t,i[s],n);return n}function g(t,e,i,n,s){for(var r,o=[],a=0,l=t.length,u=null!=e;l>a;a++)(r=t[a])&&(!i||i(r,n,s))&&(o.push(r),u&&e.push(a));return o}function v(t,e,i,s,r,o){return s&&!s[F]&&(s=v(s)),r&&!r[F]&&(r=v(r,o)),n(function(n,o,a,l){var u,h,c,d=[],f=[],p=o.length,v=n||m(e||"*",a.nodeType?[a]:a,[]),b=!t||!n&&e?v:g(v,d,t,a,l),y=i?r||(n?t:p||s)?[]:o:b;if(i&&i(b,y,a,l),s)for(u=g(y,f),s(u,[],a,l),h=u.length;h--;)(c=u[h])&&(y[f[h]]=!(b[f[h]]=c));if(n){if(r||t){if(r){for(u=[],h=y.length;h--;)(c=y[h])&&u.push(b[h]=c);r(null,y=[],u,l)}for(h=y.length;h--;)(c=y[h])&&(u=r?te(n,c):d[h])>-1&&(n[u]=!(o[u]=c))}}else y=g(y===o?y.splice(p,y.length):y),r?r(null,o,y,l):Z.apply(o,y)})}function b(t){for(var e,i,n,s=t.length,r=x.relative[t[0].type],o=r||x.relative[" "],a=r?1:0,l=f(function(t){return t===e},o,!0),u=f(function(t){return te(e,t)>-1},o,!0),h=[function(t,i,n){var s=!r&&(n||i!==M)||((e=i).nodeType?l(t,i,n):u(t,i,n));return e=null,s}];s>a;a++)if(i=x.relative[t[a].type])h=[f(p(h),i)];else{if(i=x.filter[t[a].type].apply(null,t[a].matches),i[F]){for(n=++a;s>n&&!x.relative[t[n].type];n++);return v(a>1&&p(h),a>1&&d(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(le,"$1"),i,n>a&&b(t.slice(a,n)),s>n&&b(t=t.slice(n)),s>n&&d(t))}h.push(i)}return p(h)}function y(t,i){var s=i.length>0,r=t.length>0,o=function(n,o,a,l,u){var h,c,d,f=0,p="0",m=n&&[],v=[],b=M,y=n||r&&x.find.TAG("*",u),_=Y+=null==b?1:Math.random()||.1,w=y.length;for(u&&(M=o!==A&&o);p!==w&&null!=(h=y[p]);p++){if(r&&h){for(c=0;d=t[c++];)if(d(h,o,a)){l.push(h);break}u&&(Y=_)}s&&((h=!d&&h)&&f--,n&&m.push(h))}if(f+=p,s&&p!==f){for(c=0;d=i[c++];)d(m,v,o,a);if(n){if(f>0)for(;p--;)m[p]||v[p]||(v[p]=K.call(l));v=g(v)}Z.apply(l,v),u&&!n&&v.length>0&&f+i.length>1&&e.uniqueSort(l)}return u&&(Y=_,M=b),m};return s?n(o):o}var _,w,x,k,C,D,T,S,M,I,P,E,A,N,j,z,O,H,W,F="sizzle"+1*new Date,L=t.document,Y=0,R=0,U=i(),q=i(),$=i(),B=function(t,e){return t===e&&(P=!0),0},V=1<<31,G={}.hasOwnProperty,X=[],K=X.pop,J=X.push,Z=X.push,Q=X.slice,te=function(t,e){for(var i=0,n=t.length;n>i;i++)if(t[i]===e)return i;return-1},ee="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ie="[\\x20\\t\\r\\n\\f]",ne="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",se=ne.replace("w","w#"),re="\\["+ie+"*("+ne+")(?:"+ie+"*([*^$|!~]?=)"+ie+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+se+"))|)"+ie+"*\\]",oe=":("+ne+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+re+")*)|.*)\\)|)",ae=new RegExp(ie+"+","g"),le=new RegExp("^"+ie+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ie+"+$","g"),ue=new RegExp("^"+ie+"*,"+ie+"*"),he=new RegExp("^"+ie+"*([>+~]|"+ie+")"+ie+"*"),ce=new RegExp("="+ie+"*([^\\]'\"]*?)"+ie+"*\\]","g"),de=new RegExp(oe),fe=new RegExp("^"+se+"$"),pe={ID:new RegExp("^#("+ne+")"),CLASS:new RegExp("^\\.("+ne+")"),TAG:new RegExp("^("+ne.replace("w","w*")+")"),ATTR:new RegExp("^"+re),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ie+"*(even|odd|(([+-]|)(\\d*)n|)"+ie+"*(?:([+-]|)"+ie+"*(\\d+)|))"+ie+"*\\)|)","i"),bool:new RegExp("^(?:"+ee+")$","i"),needsContext:new RegExp("^"+ie+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ie+"*((?:-\\d)?\\d*)"+ie+"*\\)|)(?=[^-]|$)","i")},me=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,be=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,_e=/'|\\/g,we=new RegExp("\\\\([\\da-f]{1,6}"+ie+"?|("+ie+")|.)","ig"),xe=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:0>n?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},ke=function(){E()};try{Z.apply(X=Q.call(L.childNodes),L.childNodes),X[L.childNodes.length].nodeType}catch(Ce){Z={apply:X.length?function(t,e){J.apply(t,Q.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}w=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},E=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:L;return n!==A&&9===n.nodeType&&n.documentElement?(A=n,N=n.documentElement,i=n.defaultView,i&&i!==i.top&&(i.addEventListener?i.addEventListener("unload",ke,!1):i.attachEvent&&i.attachEvent("onunload",ke)),j=!C(n),w.attributes=s(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=s(function(t){return t.appendChild(n.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=ve.test(n.getElementsByClassName),w.getById=s(function(t){return N.appendChild(t).id=F,!n.getElementsByName||!n.getElementsByName(F).length}),w.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&j){var i=e.getElementById(t);return i&&i.parentNode?[i]:[]}},x.filter.ID=function(t){var e=t.replace(we,xe);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(we,xe);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}}),x.find.TAG=w.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],s=0,r=e.getElementsByTagName(t);if("*"===t){for(;i=r[s++];)1===i.nodeType&&n.push(i);return n}return r},x.find.CLASS=w.getElementsByClassName&&function(t,e){return j?e.getElementsByClassName(t):void 0},O=[],z=[],(w.qsa=ve.test(n.querySelectorAll))&&(s(function(t){N.appendChild(t).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&z.push("[*^$]="+ie+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||z.push("\\["+ie+"*(?:value|"+ee+")"),t.querySelectorAll("[id~="+F+"-]").length||z.push("~="),t.querySelectorAll(":checked").length||z.push(":checked"),t.querySelectorAll("a#"+F+"+*").length||z.push(".#.+[+~]")}),s(function(t){var e=n.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&z.push("name"+ie+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||z.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),z.push(",.*:")})),(w.matchesSelector=ve.test(H=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&s(function(t){w.disconnectedMatch=H.call(t,"div"),H.call(t,"[s!='']:x"),O.push("!=",oe)}),z=z.length&&new RegExp(z.join("|")),O=O.length&&new RegExp(O.join("|")),e=ve.test(N.compareDocumentPosition),W=e||ve.test(N.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},B=e?function(t,e){if(t===e)return P=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!w.sortDetached&&e.compareDocumentPosition(t)===i?t===n||t.ownerDocument===L&&W(L,t)?-1:e===n||e.ownerDocument===L&&W(L,e)?1:I?te(I,t)-te(I,e):0:4&i?-1:1)}:function(t,e){if(t===e)return P=!0,0;var i,s=0,r=t.parentNode,a=e.parentNode,l=[t],u=[e];if(!r||!a)return t===n?-1:e===n?1:r?-1:a?1:I?te(I,t)-te(I,e):0;if(r===a)return o(t,e);for(i=t;i=i.parentNode;)l.unshift(i);for(i=e;i=i.parentNode;)u.unshift(i);for(;l[s]===u[s];)s++;return s?o(l[s],u[s]):l[s]===L?-1:u[s]===L?1:0},n):A},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==A&&E(t),i=i.replace(ce,"='$1']"),!(!w.matchesSelector||!j||O&&O.test(i)||z&&z.test(i)))try{var n=H.call(t,i);if(n||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(s){}return e(i,A,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==A&&E(t),W(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==A&&E(t);var i=x.attrHandle[e.toLowerCase()],n=i&&G.call(x.attrHandle,e.toLowerCase())?i(t,e,!j):void 0;return void 0!==n?n:w.attributes||!j?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,s=0;if(P=!w.detectDuplicates,I=!w.sortStable&&t.slice(0),t.sort(B),P){for(;e=t[s++];)e===t[s]&&(n=i.push(s));for(;n--;)t.splice(i[n],1)}return I=null,t},k=e.getText=function(t){var e,i="",n=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=k(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[n++];)i+=k(e);return i},x=e.selectors={cacheLength:50,createPseudo:n,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(we,xe),t[3]=(t[3]||t[4]||t[5]||"").replace(we,xe),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return pe.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&de.test(i)&&(e=D(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(we,xe).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=U[t+" "];return e||(e=new RegExp("(^|"+ie+")"+t+"("+ie+"|$)"))&&U(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(s){var r=e.attr(s,t);return null==r?"!="===i:i?(r+="","="===i?r===n:"!="===i?r!==n:"^="===i?n&&0===r.indexOf(n):"*="===i?n&&r.indexOf(n)>-1:"$="===i?n&&r.slice(-n.length)===n:"~="===i?(" "+r.replace(ae," ")+" ").indexOf(n)>-1:"|="===i?r===n||r.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(t,e,i,n,s){var r="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var u,h,c,d,f,p,m=r!==o?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),b=!l&&!a;if(g){if(r){for(;m;){for(c=e;c=c[m];)if(a?c.nodeName.toLowerCase()===v:1===c.nodeType)return!1;p=m="only"===t&&!p&&"nextSibling"}return!0}if(p=[o?g.firstChild:g.lastChild],o&&b){for(h=g[F]||(g[F]={}),u=h[t]||[],f=u[0]===Y&&u[1],d=u[0]===Y&&u[2],c=f&&g.childNodes[f];c=++f&&c&&c[m]||(d=f=0)||p.pop();)if(1===c.nodeType&&++d&&c===e){h[t]=[Y,f,d];break}}else if(b&&(u=(e[F]||(e[F]={}))[t])&&u[0]===Y)d=u[1];else for(;(c=++f&&c&&c[m]||(d=f=0)||p.pop())&&((a?c.nodeName.toLowerCase()!==v:1!==c.nodeType)||!++d||(b&&((c[F]||(c[F]={}))[t]=[Y,d]),c!==e)););return d-=s,d===n||d%n===0&&d/n>=0}}},PSEUDO:function(t,i){var s,r=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return r[F]?r(i):r.length>1?(s=[t,t,"",i],x.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,s=r(t,i),o=s.length;o--;)n=te(t,s[o]),t[n]=!(e[n]=s[o])}):function(t){return r(t,0,s)}):r}},pseudos:{not:n(function(t){var e=[],i=[],s=T(t.replace(le,"$1"));return s[F]?n(function(t,e,i,n){for(var r,o=s(t,null,n,[]),a=t.length;a--;)(r=o[a])&&(t[a]=!(e[a]=r))}):function(t,n,r){return e[0]=t,s(e,null,r,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(we,xe),function(e){return(e.textContent||e.innerText||k(e)).indexOf(t)>-1}}),lang:n(function(t){return fe.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(we,xe).toLowerCase(),function(e){var i;do if(i=j?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===N},focus:function(t){return t===A.activeElement&&(!A.hasFocus||A.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return ge.test(t.nodeName)},input:function(t){return me.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,i){return[0>i?i+e:i]}),even:u(function(t,e){for(var i=0;e>i;i+=2)t.push(i);return t}),odd:u(function(t,e){for(var i=1;e>i;i+=2)t.push(i);return t}),lt:u(function(t,e,i){for(var n=0>i?i+e:i;--n>=0;)t.push(n);return t}),gt:u(function(t,e,i){for(var n=0>i?i+e:i;++n<e;)t.push(n);return t})}},x.pseudos.nth=x.pseudos.eq;for(_ in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[_]=a(_);for(_ in{submit:!0,reset:!0})x.pseudos[_]=l(_);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,D=e.tokenize=function(t,i){var n,s,r,o,a,l,u,h=q[t+" "];if(h)return i?0:h.slice(0);for(a=t,l=[],u=x.preFilter;a;){(!n||(s=ue.exec(a)))&&(s&&(a=a.slice(s[0].length)||a),l.push(r=[])),n=!1,(s=he.exec(a))&&(n=s.shift(),r.push({value:n,type:s[0].replace(le," ")}),a=a.slice(n.length));for(o in x.filter)!(s=pe[o].exec(a))||u[o]&&!(s=u[o](s))||(n=s.shift(),r.push({value:n,type:o,matches:s}),a=a.slice(n.length));if(!n)break}return i?a.length:a?e.error(t):q(t,l).slice(0)},T=e.compile=function(t,e){var i,n=[],s=[],r=$[t+" "];if(!r){for(e||(e=D(t)),i=e.length;i--;)r=b(e[i]),r[F]?n.push(r):s.push(r);r=$(t,y(s,n)),r.selector=t}return r},S=e.select=function(t,e,i,n){var s,r,o,a,l,u="function"==typeof t&&t,c=!n&&D(t=u.selector||t);if(i=i||[],1===c.length){if(r=c[0]=c[0].slice(0),r.length>2&&"ID"===(o=r[0]).type&&w.getById&&9===e.nodeType&&j&&x.relative[r[1].type]){if(e=(x.find.ID(o.matches[0].replace(we,xe),e)||[])[0],!e)return i;u&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(s=pe.needsContext.test(t)?0:r.length;s--&&(o=r[s],!x.relative[a=o.type]);)if((l=x.find[a])&&(n=l(o.matches[0].replace(we,xe),ye.test(r[0].type)&&h(e.parentNode)||e))){if(r.splice(s,1),t=n.length&&d(r),!t)return Z.apply(i,n),i;break}}return(u||T(t,c))(n,e,!j,i,ye.test(t)&&h(e.parentNode)||e),i},w.sortStable=F.split("").sort(B).join("")===F,w.detectDuplicates=!!P,E(),w.sortDetached=s(function(t){return 1&t.compareDocumentPosition(A.createElement("div"))}),s(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||r("type|href|height|width",function(t,e,i){return i?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&s(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||r("value",function(t,e,i){return i||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),s(function(t){return null==t.getAttribute("disabled")})||r(ee,function(t,e,i){var n;return i?void 0:t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);Q.find=se,Q.expr=se.selectors,Q.expr[":"]=Q.expr.pseudos,Q.unique=se.uniqueSort,Q.text=se.getText,Q.isXMLDoc=se.isXML,Q.contains=se.contains;var re=Q.expr.match.needsContext,oe=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ae=/^.[^:#\[\.,]*$/;Q.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?Q.find.matchesSelector(n,t)?[n]:[]:Q.find.matches(t,Q.grep(e,function(t){return 1===t.nodeType}))},Q.fn.extend({find:function(t){var e,i=this.length,n=[],s=this;if("string"!=typeof t)return this.pushStack(Q(t).filter(function(){for(e=0;i>e;e++)if(Q.contains(s[e],this))return!0}));for(e=0;i>e;e++)Q.find(t,s[e],n);return n=this.pushStack(i>1?Q.unique(n):n),n.selector=this.selector?this.selector+" "+t:t,n},filter:function(t){return this.pushStack(n(this,t||[],!1))},not:function(t){return this.pushStack(n(this,t||[],!0))},is:function(t){return!!n(this,"string"==typeof t&&re.test(t)?Q(t):t||[],!1).length}});var le,ue=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,he=Q.fn.init=function(t,e){var i,n;if(!t)return this;if("string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ue.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||le).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof Q?e[0]:e,Q.merge(this,Q.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:J,!0)),oe.test(i[1])&&Q.isPlainObject(e))for(i in e)Q.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return n=J.getElementById(i[2]),n&&n.parentNode&&(this.length=1,this[0]=n),this.context=J,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):Q.isFunction(t)?"undefined"!=typeof le.ready?le.ready(t):t(Q):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),Q.makeArray(t,this))};he.prototype=Q.fn,le=Q(J);var ce=/^(?:parents|prev(?:Until|All))/,de={children:!0,contents:!0,next:!0,prev:!0};Q.extend({dir:function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&Q(t).is(i))break;n.push(t)}return n},sibling:function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}}),Q.fn.extend({has:function(t){var e=Q(t,this),i=e.length;return this.filter(function(){for(var t=0;i>t;t++)if(Q.contains(this,e[t]))return!0})},closest:function(t,e){for(var i,n=0,s=this.length,r=[],o=re.test(t)||"string"!=typeof t?Q(t,e||this.context):0;s>n;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&Q.find.matchesSelector(i,t))){r.push(i);break}return this.pushStack(r.length>1?Q.unique(r):r)},index:function(t){return t?"string"==typeof t?B.call(Q(t),this[0]):B.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(Q.unique(Q.merge(this.get(),Q(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),Q.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Q.dir(t,"parentNode")},parentsUntil:function(t,e,i){return Q.dir(t,"parentNode",i)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return Q.dir(t,"nextSibling")},prevAll:function(t){return Q.dir(t,"previousSibling")},nextUntil:function(t,e,i){return Q.dir(t,"nextSibling",i)},prevUntil:function(t,e,i){return Q.dir(t,"previousSibling",i)},siblings:function(t){return Q.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return Q.sibling(t.firstChild)},contents:function(t){return t.contentDocument||Q.merge([],t.childNodes)}},function(t,e){Q.fn[t]=function(i,n){var s=Q.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=Q.filter(n,s)),this.length>1&&(de[t]||Q.unique(s),ce.test(t)&&s.reverse()),this.pushStack(s)}});var fe=/\S+/g,pe={};Q.Callbacks=function(t){t="string"==typeof t?pe[t]||r(t):Q.extend({},t);var e,i,n,s,o,a,l=[],u=!t.once&&[],h=function(r){for(e=t.memory&&r,i=!0,a=s||0,s=0,o=l.length,n=!0;l&&o>a;a++)if(l[a].apply(r[0],r[1])===!1&&t.stopOnFalse){e=!1;break}n=!1,l&&(u?u.length&&h(u.shift()):e?l=[]:c.disable())},c={add:function(){if(l){var i=l.length;!function r(e){Q.each(e,function(e,i){var n=Q.type(i);"function"===n?t.unique&&c.has(i)||l.push(i):i&&i.length&&"string"!==n&&r(i)})}(arguments),n?o=l.length:e&&(s=i,h(e))}return this},remove:function(){return l&&Q.each(arguments,function(t,e){for(var i;(i=Q.inArray(e,l,i))>-1;)l.splice(i,1),n&&(o>=i&&o--,a>=i&&a--)}),this},has:function(t){return t?Q.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],o=0,this},disable:function(){return l=u=e=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,e||c.disable(),this},locked:function(){return!u},fireWith:function(t,e){return!l||i&&!u||(e=e||[],e=[t,e.slice?e.slice():e],n?u.push(e):h(e)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},Q.extend({Deferred:function(t){var e=[["resolve","done",Q.Callbacks("once memory"),"resolved"],["reject","fail",Q.Callbacks("once memory"),"rejected"],["notify","progress",Q.Callbacks("memory")]],i="pending",n={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},then:function(){var t=arguments;return Q.Deferred(function(i){Q.each(e,function(e,r){var o=Q.isFunction(t[e])&&t[e];s[r[1]](function(){var t=o&&o.apply(this,arguments);t&&Q.isFunction(t.promise)?t.promise().done(i.resolve).fail(i.reject).progress(i.notify):i[r[0]+"With"](this===n?i.promise():this,o?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?Q.extend(t,n):n}},s={};return n.pipe=n.then,Q.each(e,function(t,r){var o=r[2],a=r[3];n[r[1]]=o.add,a&&o.add(function(){i=a},e[1^t][2].disable,e[2][2].lock),s[r[0]]=function(){return s[r[0]+"With"](this===s?n:this,arguments),this},s[r[0]+"With"]=o.fireWith}),n.promise(s),t&&t.call(s,s),s},when:function(t){var e,i,n,s=0,r=U.call(arguments),o=r.length,a=1!==o||t&&Q.isFunction(t.promise)?o:0,l=1===a?t:Q.Deferred(),u=function(t,i,n){return function(s){i[t]=this,n[t]=arguments.length>1?U.call(arguments):s,n===e?l.notifyWith(i,n):--a||l.resolveWith(i,n)}};if(o>1)for(e=new Array(o),i=new Array(o),n=new Array(o);o>s;s++)r[s]&&Q.isFunction(r[s].promise)?r[s].promise().done(u(s,n,r)).fail(l.reject).progress(u(s,i,e)):--a;return a||l.resolveWith(n,r),l.promise()}});var me;Q.fn.ready=function(t){return Q.ready.promise().done(t),this},Q.extend({isReady:!1,readyWait:1,holdReady:function(t){t?Q.readyWait++:Q.ready(!0)},ready:function(t){(t===!0?--Q.readyWait:Q.isReady)||(Q.isReady=!0,t!==!0&&--Q.readyWait>0||(me.resolveWith(J,[Q]),Q.fn.triggerHandler&&(Q(J).triggerHandler("ready"),Q(J).off("ready"))))}}),Q.ready.promise=function(e){return me||(me=Q.Deferred(),"complete"===J.readyState?setTimeout(Q.ready):(J.addEventListener("DOMContentLoaded",o,!1),t.addEventListener("load",o,!1))),me.promise(e)},Q.ready.promise();var ge=Q.access=function(t,e,i,n,s,r,o){var a=0,l=t.length,u=null==i;if("object"===Q.type(i)){s=!0;for(a in i)Q.access(t,e,a,i[a],!0,r,o)}else if(void 0!==n&&(s=!0,Q.isFunction(n)||(o=!0),u&&(o?(e.call(t,n),e=null):(u=e,e=function(t,e,i){return u.call(Q(t),i)})),e))for(;l>a;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return s?t:u?e.call(t):l?e(t[0],i):r};Q.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},a.uid=1,a.accepts=Q.acceptData,a.prototype={key:function(t){if(!a.accepts(t))return 0;var e={},i=t[this.expando];if(!i){i=a.uid++;try{e[this.expando]={value:i},Object.defineProperties(t,e)}catch(n){e[this.expando]=i,Q.extend(t,e)}}return this.cache[i]||(this.cache[i]={}),i},set:function(t,e,i){var n,s=this.key(t),r=this.cache[s];if("string"==typeof e)r[e]=i;else if(Q.isEmptyObject(r))Q.extend(this.cache[s],e);else for(n in e)r[n]=e[n];return r},get:function(t,e){var i=this.cache[this.key(t)];return void 0===e?i:i[e]},access:function(t,e,i){var n;return void 0===e||e&&"string"==typeof e&&void 0===i?(n=this.get(t,e),void 0!==n?n:this.get(t,Q.camelCase(e))):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n,s,r=this.key(t),o=this.cache[r];if(void 0===e)this.cache[r]={};else{Q.isArray(e)?n=e.concat(e.map(Q.camelCase)):(s=Q.camelCase(e),e in o?n=[e,s]:(n=s,n=n in o?[n]:n.match(fe)||[])),i=n.length;for(;i--;)delete o[n[i]]}},hasData:function(t){return!Q.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var ve=new a,be=new a,ye=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,_e=/([A-Z])/g;Q.extend({hasData:function(t){return be.hasData(t)||ve.hasData(t)},data:function(t,e,i){return be.access(t,e,i)},removeData:function(t,e){be.remove(t,e)},_data:function(t,e,i){return ve.access(t,e,i)},_removeData:function(t,e){ve.remove(t,e)}}),Q.fn.extend({data:function(t,e){var i,n,s,r=this[0],o=r&&r.attributes;if(void 0===t){if(this.length&&(s=be.get(r),1===r.nodeType&&!ve.get(r,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&(n=o[i].name,0===n.indexOf("data-")&&(n=Q.camelCase(n.slice(5)),l(r,n,s[n])));ve.set(r,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each(function(){be.set(this,t)}):ge(this,function(e){var i,n=Q.camelCase(t);if(r&&void 0===e){if(i=be.get(r,t),void 0!==i)return i;if(i=be.get(r,n),void 0!==i)return i;if(i=l(r,n,void 0),void 0!==i)return i}else this.each(function(){var i=be.get(this,n);be.set(this,n,e),-1!==t.indexOf("-")&&void 0!==i&&be.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){be.remove(this,t)})}}),Q.extend({queue:function(t,e,i){var n;return t?(e=(e||"fx")+"queue",n=ve.get(t,e),i&&(!n||Q.isArray(i)?n=ve.access(t,e,Q.makeArray(i)):n.push(i)),n||[]):void 0},dequeue:function(t,e){e=e||"fx";var i=Q.queue(t,e),n=i.length,s=i.shift(),r=Q._queueHooks(t,e),o=function(){Q.dequeue(t,e)};"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete r.stop,s.call(t,o,r)),!n&&r&&r.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return ve.get(t,i)||ve.access(t,i,{empty:Q.Callbacks("once memory").add(function(){ve.remove(t,[e+"queue",i])})})}}),Q.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?Q.queue(this[0],t):void 0===e?this:this.each(function(){var i=Q.queue(this,t,e);Q._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&Q.dequeue(this,t)})},dequeue:function(t){return this.each(function(){Q.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=Q.Deferred(),r=this,o=this.length,a=function(){--n||s.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)i=ve.get(r[o],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var we=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,xe=["Top","Right","Bottom","Left"],ke=function(t,e){return t=e||t,"none"===Q.css(t,"display")||!Q.contains(t.ownerDocument,t)},Ce=/^(?:checkbox|radio)$/i;!function(){var t=J.createDocumentFragment(),e=t.appendChild(J.createElement("div")),i=J.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),K.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",K.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var De="undefined";K.focusinBubbles="onfocusin"in t;var Te=/^key/,Se=/^(?:mouse|pointer|contextmenu)|click/,Me=/^(?:focusinfocus|focusoutblur)$/,Ie=/^([^.]*)(?:\.(.+)|)$/;Q.event={global:{},add:function(t,e,i,n,s){var r,o,a,l,u,h,c,d,f,p,m,g=ve.get(t);if(g)for(i.handler&&(r=i,i=r.handler,s=r.selector),i.guid||(i.guid=Q.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(e){return typeof Q!==De&&Q.event.triggered!==e.type?Q.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(fe)||[""],u=e.length;u--;)a=Ie.exec(e[u])||[],f=m=a[1],p=(a[2]||"").split(".").sort(),f&&(c=Q.event.special[f]||{},f=(s?c.delegateType:c.bindType)||f,c=Q.event.special[f]||{},h=Q.extend({type:f,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&Q.expr.match.needsContext.test(s),namespace:p.join(".")},r),(d=l[f])||(d=l[f]=[],d.delegateCount=0,c.setup&&c.setup.call(t,n,p,o)!==!1||t.addEventListener&&t.addEventListener(f,o,!1)),c.add&&(c.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),s?d.splice(d.delegateCount++,0,h):d.push(h),Q.event.global[f]=!0)},remove:function(t,e,i,n,s){var r,o,a,l,u,h,c,d,f,p,m,g=ve.hasData(t)&&ve.get(t);if(g&&(l=g.events)){for(e=(e||"").match(fe)||[""],u=e.length;u--;)if(a=Ie.exec(e[u])||[],f=m=a[1],p=(a[2]||"").split(".").sort(),f){for(c=Q.event.special[f]||{},f=(n?c.delegateType:c.bindType)||f,d=l[f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=r=d.length;r--;)h=d[r],!s&&m!==h.origType||i&&i.guid!==h.guid||a&&!a.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(d.splice(r,1),h.selector&&d.delegateCount--,c.remove&&c.remove.call(t,h));o&&!d.length&&(c.teardown&&c.teardown.call(t,p,g.handle)!==!1||Q.removeEvent(t,f,g.handle),delete l[f])}else for(f in l)Q.event.remove(t,f+e[u],i,n,!0);Q.isEmptyObject(l)&&(delete g.handle,ve.remove(t,"events"))}},trigger:function(e,i,n,s){var r,o,a,l,u,h,c,d=[n||J],f=X.call(e,"type")?e.type:e,p=X.call(e,"namespace")?e.namespace.split("."):[];if(o=a=n=n||J,3!==n.nodeType&&8!==n.nodeType&&!Me.test(f+Q.event.triggered)&&(f.indexOf(".")>=0&&(p=f.split("."),f=p.shift(),p.sort()),u=f.indexOf(":")<0&&"on"+f,e=e[Q.expando]?e:new Q.Event(f,"object"==typeof e&&e),e.isTrigger=s?2:3,e.namespace=p.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:Q.makeArray(i,[e]),c=Q.event.special[f]||{},s||!c.trigger||c.trigger.apply(n,i)!==!1)){if(!s&&!c.noBubble&&!Q.isWindow(n)){for(l=c.delegateType||f,Me.test(l+f)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(n.ownerDocument||J)&&d.push(a.defaultView||a.parentWindow||t)}for(r=0;(o=d[r++])&&!e.isPropagationStopped();)e.type=r>1?l:c.bindType||f,h=(ve.get(o,"events")||{})[e.type]&&ve.get(o,"handle"),h&&h.apply(o,i),h=u&&o[u],h&&h.apply&&Q.acceptData(o)&&(e.result=h.apply(o,i),e.result===!1&&e.preventDefault());
return e.type=f,s||e.isDefaultPrevented()||c._default&&c._default.apply(d.pop(),i)!==!1||!Q.acceptData(n)||u&&Q.isFunction(n[f])&&!Q.isWindow(n)&&(a=n[u],a&&(n[u]=null),Q.event.triggered=f,n[f](),Q.event.triggered=void 0,a&&(n[u]=a)),e.result}},dispatch:function(t){t=Q.event.fix(t);var e,i,n,s,r,o=[],a=U.call(arguments),l=(ve.get(this,"events")||{})[t.type]||[],u=Q.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,t)!==!1){for(o=Q.event.handlers.call(this,t,l),e=0;(s=o[e++])&&!t.isPropagationStopped();)for(t.currentTarget=s.elem,i=0;(r=s.handlers[i++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(r.namespace))&&(t.handleObj=r,t.data=r.data,n=((Q.event.special[r.origType]||{}).handle||r.handler).apply(s.elem,a),void 0!==n&&(t.result=n)===!1&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,n,s,r,o=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(n=[],i=0;a>i;i++)r=e[i],s=r.selector+" ",void 0===n[s]&&(n[s]=r.needsContext?Q(s,this).index(l)>=0:Q.find(s,this,null,[l]).length),n[s]&&n.push(r);n.length&&o.push({elem:l,handlers:n})}return a<e.length&&o.push({elem:this,handlers:e.slice(a)}),o},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,n,s,r=e.button;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||J,n=i.documentElement,s=i.body,t.pageX=e.clientX+(n&&n.scrollLeft||s&&s.scrollLeft||0)-(n&&n.clientLeft||s&&s.clientLeft||0),t.pageY=e.clientY+(n&&n.scrollTop||s&&s.scrollTop||0)-(n&&n.clientTop||s&&s.clientTop||0)),t.which||void 0===r||(t.which=1&r?1:2&r?3:4&r?2:0),t}},fix:function(t){if(t[Q.expando])return t;var e,i,n,s=t.type,r=t,o=this.fixHooks[s];for(o||(this.fixHooks[s]=o=Se.test(s)?this.mouseHooks:Te.test(s)?this.keyHooks:{}),n=o.props?this.props.concat(o.props):this.props,t=new Q.Event(r),e=n.length;e--;)i=n[e],t[i]=r[i];return t.target||(t.target=J),3===t.target.nodeType&&(t.target=t.target.parentNode),o.filter?o.filter(t,r):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==c()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===c()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&Q.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return Q.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,i,n){var s=Q.extend(new Q.Event,i,{type:t,isSimulated:!0,originalEvent:{}});n?Q.event.trigger(s,null,e):Q.event.dispatch.call(e,s),s.isDefaultPrevented()&&i.preventDefault()}},Q.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i,!1)},Q.Event=function(t,e){return this instanceof Q.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?u:h):this.type=t,e&&Q.extend(this,e),this.timeStamp=t&&t.timeStamp||Q.now(),void(this[Q.expando]=!0)):new Q.Event(t,e)},Q.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=u,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=u,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=u,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},Q.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){Q.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,s=t.relatedTarget,r=t.handleObj;return(!s||s!==n&&!Q.contains(n,s))&&(t.type=r.origType,i=r.handler.apply(this,arguments),t.type=e),i}}}),K.focusinBubbles||Q.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){Q.event.simulate(e,t.target,Q.event.fix(t),!0)};Q.event.special[e]={setup:function(){var n=this.ownerDocument||this,s=ve.access(n,e);s||n.addEventListener(t,i,!0),ve.access(n,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this,s=ve.access(n,e)-1;s?ve.access(n,e,s):(n.removeEventListener(t,i,!0),ve.remove(n,e))}}}),Q.fn.extend({on:function(t,e,i,n,s){var r,o;if("object"==typeof t){"string"!=typeof e&&(i=i||e,e=void 0);for(o in t)this.on(o,e,i,t[o],s);return this}if(null==i&&null==n?(n=e,i=e=void 0):null==n&&("string"==typeof e?(n=i,i=void 0):(n=i,i=e,e=void 0)),n===!1)n=h;else if(!n)return this;return 1===s&&(r=n,n=function(t){return Q().off(t),r.apply(this,arguments)},n.guid=r.guid||(r.guid=Q.guid++)),this.each(function(){Q.event.add(this,t,n,i,e)})},one:function(t,e,i,n){return this.on(t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,Q(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return(e===!1||"function"==typeof e)&&(i=e,e=void 0),i===!1&&(i=h),this.each(function(){Q.event.remove(this,t,i,e)})},trigger:function(t,e){return this.each(function(){Q.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];return i?Q.event.trigger(t,e,i,!0):void 0}});var Pe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ee=/<([\w:]+)/,Ae=/<|&#?\w+;/,Ne=/<(?:script|style|link)/i,je=/checked\s*(?:[^=]|=\s*.checked.)/i,ze=/^$|\/(?:java|ecma)script/i,Oe=/^true\/(.*)/,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,We={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};We.optgroup=We.option,We.tbody=We.tfoot=We.colgroup=We.caption=We.thead,We.th=We.td,Q.extend({clone:function(t,e,i){var n,s,r,o,a=t.cloneNode(!0),l=Q.contains(t.ownerDocument,t);if(!(K.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||Q.isXMLDoc(t)))for(o=v(a),r=v(t),n=0,s=r.length;s>n;n++)b(r[n],o[n]);if(e)if(i)for(r=r||v(t),o=o||v(a),n=0,s=r.length;s>n;n++)g(r[n],o[n]);else g(t,a);return o=v(a,"script"),o.length>0&&m(o,!l&&v(t,"script")),a},buildFragment:function(t,e,i,n){for(var s,r,o,a,l,u,h=e.createDocumentFragment(),c=[],d=0,f=t.length;f>d;d++)if(s=t[d],s||0===s)if("object"===Q.type(s))Q.merge(c,s.nodeType?[s]:s);else if(Ae.test(s)){for(r=r||h.appendChild(e.createElement("div")),o=(Ee.exec(s)||["",""])[1].toLowerCase(),a=We[o]||We._default,r.innerHTML=a[1]+s.replace(Pe,"<$1></$2>")+a[2],u=a[0];u--;)r=r.lastChild;Q.merge(c,r.childNodes),r=h.firstChild,r.textContent=""}else c.push(e.createTextNode(s));for(h.textContent="",d=0;s=c[d++];)if((!n||-1===Q.inArray(s,n))&&(l=Q.contains(s.ownerDocument,s),r=v(h.appendChild(s),"script"),l&&m(r),i))for(u=0;s=r[u++];)ze.test(s.type||"")&&i.push(s);return h},cleanData:function(t){for(var e,i,n,s,r=Q.event.special,o=0;void 0!==(i=t[o]);o++){if(Q.acceptData(i)&&(s=i[ve.expando],s&&(e=ve.cache[s]))){if(e.events)for(n in e.events)r[n]?Q.event.remove(i,n):Q.removeEvent(i,n,e.handle);ve.cache[s]&&delete ve.cache[s]}delete be.cache[i[be.expando]]}}}),Q.fn.extend({text:function(t){return ge(this,function(t){return void 0===t?Q.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=d(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=d(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var i,n=t?Q.filter(t,this):this,s=0;null!=(i=n[s]);s++)e||1!==i.nodeType||Q.cleanData(v(i)),i.parentNode&&(e&&Q.contains(i.ownerDocument,i)&&m(v(i,"script")),i.parentNode.removeChild(i));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(Q.cleanData(v(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return Q.clone(this,t,e)})},html:function(t){return ge(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ne.test(t)&&!We[(Ee.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Pe,"<$1></$2>");try{for(;n>i;i++)e=this[i]||{},1===e.nodeType&&(Q.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(s){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,Q.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=q.apply([],t);var i,n,s,r,o,a,l=0,u=this.length,h=this,c=u-1,d=t[0],m=Q.isFunction(d);if(m||u>1&&"string"==typeof d&&!K.checkClone&&je.test(d))return this.each(function(i){var n=h.eq(i);m&&(t[0]=d.call(this,i,n.html())),n.domManip(t,e)});if(u&&(i=Q.buildFragment(t,this[0].ownerDocument,!1,this),n=i.firstChild,1===i.childNodes.length&&(i=n),n)){for(s=Q.map(v(i,"script"),f),r=s.length;u>l;l++)o=i,l!==c&&(o=Q.clone(o,!0,!0),r&&Q.merge(s,v(o,"script"))),e.call(this[l],o,l);if(r)for(a=s[s.length-1].ownerDocument,Q.map(s,p),l=0;r>l;l++)o=s[l],ze.test(o.type||"")&&!ve.access(o,"globalEval")&&Q.contains(a,o)&&(o.src?Q._evalUrl&&Q._evalUrl(o.src):Q.globalEval(o.textContent.replace(He,"")))}return this}}),Q.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){Q.fn[t]=function(t){for(var i,n=[],s=Q(t),r=s.length-1,o=0;r>=o;o++)i=o===r?this:this.clone(!0),Q(s[o])[e](i),$.apply(n,i.get());return this.pushStack(n)}});var Fe,Le={},Ye=/^margin/,Re=new RegExp("^("+we+")(?!px)[a-z%]+$","i"),Ue=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){o.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o.innerHTML="",s.appendChild(r);var e=t.getComputedStyle(o,null);i="1%"!==e.top,n="4px"===e.width,s.removeChild(r)}var i,n,s=J.documentElement,r=J.createElement("div"),o=J.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",K.clearCloneStyle="content-box"===o.style.backgroundClip,r.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",r.appendChild(o),t.getComputedStyle&&Q.extend(K,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return null==n&&e(),n},reliableMarginRight:function(){var e,i=o.appendChild(J.createElement("div"));return i.style.cssText=o.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",o.style.width="1px",s.appendChild(r),e=!parseFloat(t.getComputedStyle(i,null).marginRight),s.removeChild(r),o.removeChild(i),e}}))}(),Q.swap=function(t,e,i,n){var s,r,o={};for(r in e)o[r]=t.style[r],t.style[r]=e[r];s=i.apply(t,n||[]);for(r in e)t.style[r]=o[r];return s};var qe=/^(none|table(?!-c[ea]).+)/,$e=new RegExp("^("+we+")(.*)$","i"),Be=new RegExp("^([+-])=("+we+")","i"),Ve={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Xe=["Webkit","O","Moz","ms"];Q.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=w(t,"opacity");return""===i?"1":i}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,r,o,a=Q.camelCase(e),l=t.style;return e=Q.cssProps[a]||(Q.cssProps[a]=k(l,a)),o=Q.cssHooks[e]||Q.cssHooks[a],void 0===i?o&&"get"in o&&void 0!==(s=o.get(t,!1,n))?s:l[e]:(r=typeof i,"string"===r&&(s=Be.exec(i))&&(i=(s[1]+1)*s[2]+parseFloat(Q.css(t,e)),r="number"),null!=i&&i===i&&("number"!==r||Q.cssNumber[a]||(i+="px"),K.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l[e]=i)),void 0)}},css:function(t,e,i,n){var s,r,o,a=Q.camelCase(e);return e=Q.cssProps[a]||(Q.cssProps[a]=k(t.style,a)),o=Q.cssHooks[e]||Q.cssHooks[a],o&&"get"in o&&(s=o.get(t,!0,i)),void 0===s&&(s=w(t,e,n)),"normal"===s&&e in Ge&&(s=Ge[e]),""===i||i?(r=parseFloat(s),i===!0||Q.isNumeric(r)?r||0:s):s}}),Q.each(["height","width"],function(t,e){Q.cssHooks[e]={get:function(t,i,n){return i?qe.test(Q.css(t,"display"))&&0===t.offsetWidth?Q.swap(t,Ve,function(){return T(t,e,n)}):T(t,e,n):void 0},set:function(t,i,n){var s=n&&Ue(t);return C(t,i,n?D(t,e,n,"border-box"===Q.css(t,"boxSizing",!1,s),s):0)}}}),Q.cssHooks.marginRight=x(K.reliableMarginRight,function(t,e){return e?Q.swap(t,{display:"inline-block"},w,[t,"marginRight"]):void 0}),Q.each({margin:"",padding:"",border:"Width"},function(t,e){Q.cssHooks[t+e]={expand:function(i){for(var n=0,s={},r="string"==typeof i?i.split(" "):[i];4>n;n++)s[t+xe[n]+e]=r[n]||r[n-2]||r[0];return s}},Ye.test(t)||(Q.cssHooks[t+e].set=C)}),Q.fn.extend({css:function(t,e){return ge(this,function(t,e,i){var n,s,r={},o=0;if(Q.isArray(e)){for(n=Ue(t),s=e.length;s>o;o++)r[e[o]]=Q.css(t,e[o],!1,n);return r}return void 0!==i?Q.style(t,e,i):Q.css(t,e)},t,e,arguments.length>1)},show:function(){return S(this,!0)},hide:function(){return S(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){ke(this)?Q(this).show():Q(this).hide()})}}),Q.Tween=M,M.prototype={constructor:M,init:function(t,e,i,n,s,r){this.elem=t,this.prop=i,this.easing=s||"swing",this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=r||(Q.cssNumber[i]?"":"px")},cur:function(){var t=M.propHooks[this.prop];return t&&t.get?t.get(this):M.propHooks._default.get(this)},run:function(t){var e,i=M.propHooks[this.prop];return this.pos=e=this.options.duration?Q.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):M.propHooks._default.set(this),this}},M.prototype.init.prototype=M.prototype,M.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=Q.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){Q.fx.step[t.prop]?Q.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[Q.cssProps[t.prop]]||Q.cssHooks[t.prop])?Q.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},M.propHooks.scrollTop=M.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},Q.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},Q.fx=M.prototype.init,Q.fx.step={};var Ke,Je,Ze=/^(?:toggle|show|hide)$/,Qe=new RegExp("^(?:([+-])=|)("+we+")([a-z%]*)$","i"),ti=/queueHooks$/,ei=[A],ii={"*":[function(t,e){var i=this.createTween(t,e),n=i.cur(),s=Qe.exec(e),r=s&&s[3]||(Q.cssNumber[t]?"":"px"),o=(Q.cssNumber[t]||"px"!==r&&+n)&&Qe.exec(Q.css(i.elem,t)),a=1,l=20;if(o&&o[3]!==r){r=r||o[3],s=s||[],o=+n||1;do a=a||".5",o/=a,Q.style(i.elem,t,o+r);while(a!==(a=i.cur()/n)&&1!==a&&--l)}return s&&(o=i.start=+o||+n||0,i.unit=r,i.end=s[1]?o+(s[1]+1)*s[2]:+s[2]),i}]};Q.Animation=Q.extend(j,{tweener:function(t,e){Q.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var i,n=0,s=t.length;s>n;n++)i=t[n],ii[i]=ii[i]||[],ii[i].unshift(e)},prefilter:function(t,e){e?ei.unshift(t):ei.push(t)}}),Q.speed=function(t,e,i){var n=t&&"object"==typeof t?Q.extend({},t):{complete:i||!i&&e||Q.isFunction(t)&&t,duration:t,easing:i&&e||e&&!Q.isFunction(e)&&e};return n.duration=Q.fx.off?0:"number"==typeof n.duration?n.duration:n.duration in Q.fx.speeds?Q.fx.speeds[n.duration]:Q.fx.speeds._default,(null==n.queue||n.queue===!0)&&(n.queue="fx"),n.old=n.complete,n.complete=function(){Q.isFunction(n.old)&&n.old.call(this),n.queue&&Q.dequeue(this,n.queue)},n},Q.fn.extend({fadeTo:function(t,e,i,n){return this.filter(ke).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=Q.isEmptyObject(t),r=Q.speed(e,i,n),o=function(){var e=j(this,Q.extend({},t),r);(s||ve.get(this,"finish"))&&e.stop(!0)};return o.finish=o,s||r.queue===!1?this.each(o):this.queue(r.queue,o)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,s=null!=t&&t+"queueHooks",r=Q.timers,o=ve.get(this);if(s)o[s]&&o[s].stop&&n(o[s]);else for(s in o)o[s]&&o[s].stop&&ti.test(s)&&n(o[s]);for(s=r.length;s--;)r[s].elem!==this||null!=t&&r[s].queue!==t||(r[s].anim.stop(i),e=!1,r.splice(s,1));(e||!i)&&Q.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,i=ve.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],r=Q.timers,o=n?n.length:0;for(i.finish=!0,Q.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;o>e;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),Q.each(["toggle","show","hide"],function(t,e){var i=Q.fn[e];Q.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(P(e,!0),t,n,s)}}),Q.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){Q.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),Q.timers=[],Q.fx.tick=function(){var t,e=0,i=Q.timers;for(Ke=Q.now();e<i.length;e++)t=i[e],t()||i[e]!==t||i.splice(e--,1);i.length||Q.fx.stop(),Ke=void 0},Q.fx.timer=function(t){Q.timers.push(t),t()?Q.fx.start():Q.timers.pop()},Q.fx.interval=13,Q.fx.start=function(){Je||(Je=setInterval(Q.fx.tick,Q.fx.interval))},Q.fx.stop=function(){clearInterval(Je),Je=null},Q.fx.speeds={slow:600,fast:200,_default:400},Q.fn.delay=function(t,e){return t=Q.fx?Q.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,i){var n=setTimeout(e,t);i.stop=function(){clearTimeout(n)}})},function(){var t=J.createElement("input"),e=J.createElement("select"),i=e.appendChild(J.createElement("option"));t.type="checkbox",K.checkOn=""!==t.value,K.optSelected=i.selected,e.disabled=!0,K.optDisabled=!i.disabled,t=J.createElement("input"),t.value="t",t.type="radio",K.radioValue="t"===t.value}();var ni,si,ri=Q.expr.attrHandle;Q.fn.extend({attr:function(t,e){return ge(this,Q.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){Q.removeAttr(this,t)})}}),Q.extend({attr:function(t,e,i){var n,s,r=t.nodeType;if(t&&3!==r&&8!==r&&2!==r)return typeof t.getAttribute===De?Q.prop(t,e,i):(1===r&&Q.isXMLDoc(t)||(e=e.toLowerCase(),n=Q.attrHooks[e]||(Q.expr.match.bool.test(e)?si:ni)),void 0===i?n&&"get"in n&&null!==(s=n.get(t,e))?s:(s=Q.find.attr(t,e),null==s?void 0:s):null!==i?n&&"set"in n&&void 0!==(s=n.set(t,i,e))?s:(t.setAttribute(e,i+""),i):void Q.removeAttr(t,e))},removeAttr:function(t,e){var i,n,s=0,r=e&&e.match(fe);if(r&&1===t.nodeType)for(;i=r[s++];)n=Q.propFix[i]||i,Q.expr.match.bool.test(i)&&(t[n]=!1),t.removeAttribute(i)},attrHooks:{type:{set:function(t,e){if(!K.radioValue&&"radio"===e&&Q.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}}}),si={set:function(t,e,i){return e===!1?Q.removeAttr(t,i):t.setAttribute(i,i),i}},Q.each(Q.expr.match.bool.source.match(/\w+/g),function(t,e){var i=ri[e]||Q.find.attr;ri[e]=function(t,e,n){var s,r;return n||(r=ri[e],ri[e]=s,s=null!=i(t,e,n)?e.toLowerCase():null,ri[e]=r),s}});var oi=/^(?:input|select|textarea|button)$/i;Q.fn.extend({prop:function(t,e){return ge(this,Q.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[Q.propFix[t]||t]})}}),Q.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,i){var n,s,r,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return r=1!==o||!Q.isXMLDoc(t),r&&(e=Q.propFix[e]||e,s=Q.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||oi.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),K.optSelected||(Q.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),Q.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Q.propFix[this.toLowerCase()]=this});var ai=/[\t\r\n\f]/g;Q.fn.extend({addClass:function(t){var e,i,n,s,r,o,a="string"==typeof t&&t,l=0,u=this.length;if(Q.isFunction(t))return this.each(function(e){Q(this).addClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(fe)||[];u>l;l++)if(i=this[l],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(ai," "):" ")){for(r=0;s=e[r++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o=Q.trim(n),i.className!==o&&(i.className=o)}return this},removeClass:function(t){var e,i,n,s,r,o,a=0===arguments.length||"string"==typeof t&&t,l=0,u=this.length;if(Q.isFunction(t))return this.each(function(e){Q(this).removeClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(fe)||[];u>l;l++)if(i=this[l],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(ai," "):"")){for(r=0;s=e[r++];)for(;n.indexOf(" "+s+" ")>=0;)n=n.replace(" "+s+" "," ");o=t?Q.trim(n):"",i.className!==o&&(i.className=o)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):this.each(Q.isFunction(t)?function(i){Q(this).toggleClass(t.call(this,i,this.className,e),e)}:function(){if("string"===i)for(var e,n=0,s=Q(this),r=t.match(fe)||[];e=r[n++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else(i===De||"boolean"===i)&&(this.className&&ve.set(this,"__className__",this.className),this.className=this.className||t===!1?"":ve.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",i=0,n=this.length;n>i;i++)if(1===this[i].nodeType&&(" "+this[i].className+" ").replace(ai," ").indexOf(e)>=0)return!0;return!1}});var li=/\r/g;Q.fn.extend({val:function(t){var e,i,n,s=this[0];{if(arguments.length)return n=Q.isFunction(t),this.each(function(i){var s;1===this.nodeType&&(s=n?t.call(this,i,Q(this).val()):t,null==s?s="":"number"==typeof s?s+="":Q.isArray(s)&&(s=Q.map(s,function(t){return null==t?"":t+""})),e=Q.valHooks[this.type]||Q.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))});if(s)return e=Q.valHooks[s.type]||Q.valHooks[s.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:(i=s.value,"string"==typeof i?i.replace(li,""):null==i?"":i)}}}),Q.extend({valHooks:{option:{get:function(t){var e=Q.find.attr(t,"value");return null!=e?e:Q.trim(Q.text(t))}},select:{get:function(t){for(var e,i,n=t.options,s=t.selectedIndex,r="select-one"===t.type||0>s,o=r?null:[],a=r?s+1:n.length,l=0>s?a:r?s:0;a>l;l++)if(i=n[l],!(!i.selected&&l!==s||(K.optDisabled?i.disabled:null!==i.getAttribute("disabled"))||i.parentNode.disabled&&Q.nodeName(i.parentNode,"optgroup"))){if(e=Q(i).val(),r)return e;o.push(e)}return o},set:function(t,e){for(var i,n,s=t.options,r=Q.makeArray(e),o=s.length;o--;)n=s[o],(n.selected=Q.inArray(n.value,r)>=0)&&(i=!0);return i||(t.selectedIndex=-1),r}}}}),Q.each(["radio","checkbox"],function(){Q.valHooks[this]={set:function(t,e){return Q.isArray(e)?t.checked=Q.inArray(Q(t).val(),e)>=0:void 0}},K.checkOn||(Q.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),Q.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){Q.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),Q.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}});var ui=Q.now(),hi=/\?/;Q.parseJSON=function(t){return JSON.parse(t+"")},Q.parseXML=function(t){var e,i;if(!t||"string"!=typeof t)return null;try{i=new DOMParser,e=i.parseFromString(t,"text/xml")}catch(n){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&Q.error("Invalid XML: "+t),e};var ci=/#.*$/,di=/([?&])_=[^&]*/,fi=/^(.*?):[ \t]*([^\r\n]*)$/gm,pi=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,mi=/^(?:GET|HEAD)$/,gi=/^\/\//,vi=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,bi={},yi={},_i="*/".concat("*"),wi=t.location.href,xi=vi.exec(wi.toLowerCase())||[];Q.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wi,type:"GET",isLocal:pi.test(xi[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_i,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Q.parseJSON,"text xml":Q.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?H(H(t,Q.ajaxSettings),e):H(Q.ajaxSettings,t)},ajaxPrefilter:z(bi),ajaxTransport:z(yi),ajax:function(t,e){function i(t,e,i,o){var l,h,v,b,_,x=e;2!==y&&(y=2,a&&clearTimeout(a),n=void 0,r=o||"",w.readyState=t>0?4:0,l=t>=200&&300>t||304===t,i&&(b=W(c,w,i)),b=F(c,b,w,l),l?(c.ifModified&&(_=w.getResponseHeader("Last-Modified"),_&&(Q.lastModified[s]=_),_=w.getResponseHeader("etag"),_&&(Q.etag[s]=_)),204===t||"HEAD"===c.type?x="nocontent":304===t?x="notmodified":(x=b.state,h=b.data,v=b.error,l=!v)):(v=x,(t||!x)&&(x="error",0>t&&(t=0))),w.status=t,w.statusText=(e||x)+"",l?p.resolveWith(d,[h,x,w]):p.rejectWith(d,[w,x,v]),w.statusCode(g),g=void 0,u&&f.trigger(l?"ajaxSuccess":"ajaxError",[w,c,l?h:v]),m.fireWith(d,[w,x]),u&&(f.trigger("ajaxComplete",[w,c]),--Q.active||Q.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,s,r,o,a,l,u,h,c=Q.ajaxSetup({},e),d=c.context||c,f=c.context&&(d.nodeType||d.jquery)?Q(d):Q.event,p=Q.Deferred(),m=Q.Callbacks("once memory"),g=c.statusCode||{},v={},b={},y=0,_="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(2===y){if(!o)for(o={};e=fi.exec(r);)o[e[1].toLowerCase()]=e[2];e=o[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===y?r:null},setRequestHeader:function(t,e){var i=t.toLowerCase();return y||(t=b[i]=b[i]||t,v[t]=e),this},overrideMimeType:function(t){return y||(c.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>y)for(e in t)g[e]=[g[e],t[e]];else w.always(t[w.status]);return this},abort:function(t){var e=t||_;return n&&n.abort(e),i(0,e),this}};if(p.promise(w).complete=m.add,w.success=w.done,w.error=w.fail,c.url=((t||c.url||wi)+"").replace(ci,"").replace(gi,xi[1]+"//"),c.type=e.method||e.type||c.method||c.type,c.dataTypes=Q.trim(c.dataType||"*").toLowerCase().match(fe)||[""],null==c.crossDomain&&(l=vi.exec(c.url.toLowerCase()),c.crossDomain=!(!l||l[1]===xi[1]&&l[2]===xi[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(xi[3]||("http:"===xi[1]?"80":"443")))),c.data&&c.processData&&"string"!=typeof c.data&&(c.data=Q.param(c.data,c.traditional)),O(bi,c,e,w),2===y)return w;u=Q.event&&c.global,u&&0===Q.active++&&Q.event.trigger("ajaxStart"),c.type=c.type.toUpperCase(),c.hasContent=!mi.test(c.type),s=c.url,c.hasContent||(c.data&&(s=c.url+=(hi.test(s)?"&":"?")+c.data,delete c.data),c.cache===!1&&(c.url=di.test(s)?s.replace(di,"$1_="+ui++):s+(hi.test(s)?"&":"?")+"_="+ui++)),c.ifModified&&(Q.lastModified[s]&&w.setRequestHeader("If-Modified-Since",Q.lastModified[s]),Q.etag[s]&&w.setRequestHeader("If-None-Match",Q.etag[s])),(c.data&&c.hasContent&&c.contentType!==!1||e.contentType)&&w.setRequestHeader("Content-Type",c.contentType),w.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+("*"!==c.dataTypes[0]?", "+_i+"; q=0.01":""):c.accepts["*"]);for(h in c.headers)w.setRequestHeader(h,c.headers[h]);if(c.beforeSend&&(c.beforeSend.call(d,w,c)===!1||2===y))return w.abort();_="abort";for(h in{success:1,error:1,complete:1})w[h](c[h]);if(n=O(yi,c,e,w)){w.readyState=1,u&&f.trigger("ajaxSend",[w,c]),c.async&&c.timeout>0&&(a=setTimeout(function(){w.abort("timeout")},c.timeout));try{y=1,n.send(v,i)}catch(x){if(!(2>y))throw x;i(-1,x)}}else i(-1,"No Transport");return w},getJSON:function(t,e,i){return Q.get(t,e,i,"json")},getScript:function(t,e){return Q.get(t,void 0,e,"script")}}),Q.each(["get","post"],function(t,e){Q[e]=function(t,i,n,s){return Q.isFunction(i)&&(s=s||n,n=i,i=void 0),Q.ajax({url:t,type:e,dataType:s,data:i,success:n})}}),Q._evalUrl=function(t){return Q.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Q.fn.extend({wrapAll:function(t){var e;return Q.isFunction(t)?this.each(function(e){Q(this).wrapAll(t.call(this,e))}):(this[0]&&(e=Q(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return this.each(Q.isFunction(t)?function(e){Q(this).wrapInner(t.call(this,e))}:function(){var e=Q(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=Q.isFunction(t);return this.each(function(i){Q(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(){return this.parent().each(function(){Q.nodeName(this,"body")||Q(this).replaceWith(this.childNodes)}).end()}}),Q.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},Q.expr.filters.visible=function(t){return!Q.expr.filters.hidden(t)};var ki=/%20/g,Ci=/\[\]$/,Di=/\r?\n/g,Ti=/^(?:submit|button|image|reset|file)$/i,Si=/^(?:input|select|textarea|keygen)/i;Q.param=function(t,e){var i,n=[],s=function(t,e){e=Q.isFunction(e)?e():null==e?"":e,n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=Q.ajaxSettings&&Q.ajaxSettings.traditional),Q.isArray(t)||t.jquery&&!Q.isPlainObject(t))Q.each(t,function(){s(this.name,this.value)});else for(i in t)L(i,t[i],e,s);return n.join("&").replace(ki,"+")},Q.fn.extend({serialize:function(){return Q.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=Q.prop(this,"elements");return t?Q.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!Q(this).is(":disabled")&&Si.test(this.nodeName)&&!Ti.test(t)&&(this.checked||!Ce.test(t))
}).map(function(t,e){var i=Q(this).val();return null==i?null:Q.isArray(i)?Q.map(i,function(t){return{name:e.name,value:t.replace(Di,"\r\n")}}):{name:e.name,value:i.replace(Di,"\r\n")}}).get()}}),Q.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Mi=0,Ii={},Pi={0:200,1223:204},Ei=Q.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Ii)Ii[t]()}),K.cors=!!Ei&&"withCredentials"in Ei,K.ajax=Ei=!!Ei,Q.ajaxTransport(function(t){var e;return K.cors||Ei&&!t.crossDomain?{send:function(i,n){var s,r=t.xhr(),o=++Mi;if(r.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)r[s]=t.xhrFields[s];t.mimeType&&r.overrideMimeType&&r.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)r.setRequestHeader(s,i[s]);e=function(t){return function(){e&&(delete Ii[o],e=r.onload=r.onerror=null,"abort"===t?r.abort():"error"===t?n(r.status,r.statusText):n(Pi[r.status]||r.status,r.statusText,"string"==typeof r.responseText?{text:r.responseText}:void 0,r.getAllResponseHeaders()))}},r.onload=e(),r.onerror=e("error"),e=Ii[o]=e("abort");try{r.send(t.hasContent&&t.data||null)}catch(a){if(e)throw a}},abort:function(){e&&e()}}:void 0}),Q.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return Q.globalEval(t),t}}}),Q.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),Q.ajaxTransport("script",function(t){if(t.crossDomain){var e,i;return{send:function(n,s){e=Q("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),J.head.appendChild(e[0])},abort:function(){i&&i()}}}});var Ai=[],Ni=/(=)\?(?=&|$)|\?\?/;Q.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ai.pop()||Q.expando+"_"+ui++;return this[t]=!0,t}}),Q.ajaxPrefilter("json jsonp",function(e,i,n){var s,r,o,a=e.jsonp!==!1&&(Ni.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ni.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(s=e.jsonpCallback=Q.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ni,"$1"+s):e.jsonp!==!1&&(e.url+=(hi.test(e.url)?"&":"?")+e.jsonp+"="+s),e.converters["script json"]=function(){return o||Q.error(s+" was not called"),o[0]},e.dataTypes[0]="json",r=t[s],t[s]=function(){o=arguments},n.always(function(){t[s]=r,e[s]&&(e.jsonpCallback=i.jsonpCallback,Ai.push(s)),o&&Q.isFunction(r)&&r(o[0]),o=r=void 0}),"script"):void 0}),Q.parseHTML=function(t,e,i){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(i=e,e=!1),e=e||J;var n=oe.exec(t),s=!i&&[];return n?[e.createElement(n[1])]:(n=Q.buildFragment([t],e,s),s&&s.length&&Q(s).remove(),Q.merge([],n.childNodes))};var ji=Q.fn.load;Q.fn.load=function(t,e,i){if("string"!=typeof t&&ji)return ji.apply(this,arguments);var n,s,r,o=this,a=t.indexOf(" ");return a>=0&&(n=Q.trim(t.slice(a)),t=t.slice(0,a)),Q.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),o.length>0&&Q.ajax({url:t,type:s,dataType:"html",data:e}).done(function(t){r=arguments,o.html(n?Q("<div>").append(Q.parseHTML(t)).find(n):t)}).complete(i&&function(t,e){o.each(i,r||[t.responseText,e,t])}),this},Q.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){Q.fn[e]=function(t){return this.on(e,t)}}),Q.expr.filters.animated=function(t){return Q.grep(Q.timers,function(e){return t===e.elem}).length};var zi=t.document.documentElement;Q.offset={setOffset:function(t,e,i){var n,s,r,o,a,l,u,h=Q.css(t,"position"),c=Q(t),d={};"static"===h&&(t.style.position="relative"),a=c.offset(),r=Q.css(t,"top"),l=Q.css(t,"left"),u=("absolute"===h||"fixed"===h)&&(r+l).indexOf("auto")>-1,u?(n=c.position(),o=n.top,s=n.left):(o=parseFloat(r)||0,s=parseFloat(l)||0),Q.isFunction(e)&&(e=e.call(t,i,a)),null!=e.top&&(d.top=e.top-a.top+o),null!=e.left&&(d.left=e.left-a.left+s),"using"in e?e.using.call(t,d):c.css(d)}},Q.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){Q.offset.setOffset(this,t,e)});var e,i,n=this[0],s={top:0,left:0},r=n&&n.ownerDocument;if(r)return e=r.documentElement,Q.contains(e,n)?(typeof n.getBoundingClientRect!==De&&(s=n.getBoundingClientRect()),i=Y(r),{top:s.top+i.pageYOffset-e.clientTop,left:s.left+i.pageXOffset-e.clientLeft}):s},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===Q.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),Q.nodeName(t[0],"html")||(n=t.offset()),n.top+=Q.css(t[0],"borderTopWidth",!0),n.left+=Q.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-Q.css(i,"marginTop",!0),left:e.left-n.left-Q.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||zi;t&&!Q.nodeName(t,"html")&&"static"===Q.css(t,"position");)t=t.offsetParent;return t||zi})}}),Q.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,i){var n="pageYOffset"===i;Q.fn[e]=function(s){return ge(this,function(e,s,r){var o=Y(e);return void 0===r?o?o[i]:e[s]:void(o?o.scrollTo(n?t.pageXOffset:r,n?r:t.pageYOffset):e[s]=r)},e,s,arguments.length,null)}}),Q.each(["top","left"],function(t,e){Q.cssHooks[e]=x(K.pixelPosition,function(t,i){return i?(i=w(t,e),Re.test(i)?Q(t).position()[e]+"px":i):void 0})}),Q.each({Height:"height",Width:"width"},function(t,e){Q.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){Q.fn[n]=function(n,s){var r=arguments.length&&(i||"boolean"!=typeof n),o=i||(n===!0||s===!0?"margin":"border");return ge(this,function(e,i,n){var s;return Q.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===n?Q.css(e,i,o):Q.style(e,i,n,o)},e,r?n:void 0,r,null)}})}),Q.fn.size=function(){return this.length},Q.fn.andSelf=Q.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Q});var Oi=t.jQuery,Hi=t.$;return Q.noConflict=function(e){return t.$===Q&&(t.$=Hi),e&&t.jQuery===Q&&(t.jQuery=Oi),Q},typeof e===De&&(t.jQuery=t.$=Q),Q})},{}],"/Users/zhihao/backbone/src/node_modules/lodash/dist/lodash.js":[function(t,e,i){(function(t){(function(){function n(t,e,i){for(var n=(i||0)-1,s=t?t.length:0;++n<s;)if(t[n]===e)return n;return-1}function s(t,e){var i=typeof e;if(t=t.cache,"boolean"==i||null==e)return t[e]?0:-1;"number"!=i&&"string"!=i&&(i="object");var s="number"==i?e:_+e;return t=(t=t[i])&&t[s],"object"==i?t&&n(t,e)>-1?0:-1:t?0:-1}function r(t){var e=this.cache,i=typeof t;if("boolean"==i||null==t)e[t]=!0;else{"number"!=i&&"string"!=i&&(i="object");var n="number"==i?t:_+t,s=e[i]||(e[i]={});"object"==i?(s[n]||(s[n]=[])).push(t):s[n]=!0}}function o(t){return t.charCodeAt(0)}function a(t,e){for(var i=t.criteria,n=e.criteria,s=-1,r=i.length;++s<r;){var o=i[s],a=n[s];if(o!==a){if(o>a||"undefined"==typeof o)return 1;if(a>o||"undefined"==typeof a)return-1}}return t.index-e.index}function l(t){var e=-1,i=t.length,n=t[0],s=t[i/2|0],o=t[i-1];if(n&&"object"==typeof n&&s&&"object"==typeof s&&o&&"object"==typeof o)return!1;var a=c();a["false"]=a["null"]=a["true"]=a.undefined=!1;var l=c();for(l.array=t,l.cache=a,l.push=r;++e<i;)l.push(t[e]);return l}function u(t){return"\\"+K[t]}function h(){return v.pop()||[]}function c(){return b.pop()||{array:null,cache:null,criteria:null,"false":!1,index:0,"null":!1,number:null,object:null,push:null,string:null,"true":!1,undefined:!1,value:null}}function d(t){t.length=0,v.length<x&&v.push(t)}function f(t){var e=t.cache;e&&f(e),t.array=t.cache=t.criteria=t.object=t.number=t.string=t.value=null,b.length<x&&b.push(t)}function p(t,e,i){e||(e=0),"undefined"==typeof i&&(i=t?t.length:0);for(var n=-1,s=i-e||0,r=Array(0>s?0:s);++n<s;)r[n]=t[e+n];return r}function m(t){function e(t){return t&&"object"==typeof t&&!Zn(t)&&jn.call(t,"__wrapped__")?t:new i(t)}function i(t,e){this.__chain__=!!e,this.__wrapped__=t}function r(t){function e(){if(n){var t=p(n);zn.apply(t,arguments)}if(this instanceof e){var r=b(i.prototype),o=i.apply(r,t||arguments);return Pe(o)?o:r}return i.apply(s,t||arguments)}var i=t[0],n=t[2],s=t[4];return Jn(e,t),e}function v(t,e,i,n,s){if(i){var r=i(t);if("undefined"!=typeof r)return r}var o=Pe(t);if(!o)return t;var a=Sn.call(t);if(!B[a])return t;var l=Xn[a];switch(a){case F:case L:return new l(+t);case R:case $:return new l(t);case q:return r=l(t.source,M.exec(t)),r.lastIndex=t.lastIndex,r}var u=Zn(t);if(e){var c=!n;n||(n=h()),s||(s=h());for(var f=n.length;f--;)if(n[f]==t)return s[f];r=u?l(t.length):{}}else r=u?p(t):rs({},t);return u&&(jn.call(t,"index")&&(r.index=t.index),jn.call(t,"input")&&(r.input=t.input)),e?(n.push(t),s.push(r),(u?Ke:ls)(t,function(t,o){r[o]=v(t,e,i,n,s)}),c&&(d(n),d(s)),r):r}function b(t){return Pe(t)?Ln(t):{}}function x(t,e,i){if("function"!=typeof t)return Ji;if("undefined"==typeof e||!("prototype"in t))return t;var n=t.__bindData__;if("undefined"==typeof n&&(Kn.funcNames&&(n=!t.name),n=n||!Kn.funcDecomp,!n)){var s=An.call(t);Kn.funcNames||(n=!I.test(s)),n||(n=N.test(s),Jn(t,n))}if(n===!1||n!==!0&&1&n[1])return t;switch(i){case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,s){return t.call(e,i,n,s)};case 4:return function(i,n,s,r){return t.call(e,i,n,s,r)}}return ji(t,e)}function K(t){function e(){var t=l?o:this;if(s){var f=p(s);zn.apply(f,arguments)}if((r||h)&&(f||(f=p(arguments)),r&&zn.apply(f,r),h&&f.length<a))return n|=16,K([i,c?n:-4&n,f,null,o,a]);if(f||(f=arguments),u&&(i=t[d]),this instanceof e){t=b(i.prototype);var m=i.apply(t,f);return Pe(m)?m:t}return i.apply(t,f)}var i=t[0],n=t[1],s=t[2],r=t[3],o=t[4],a=t[5],l=1&n,u=2&n,h=4&n,c=8&n,d=i;return Jn(e,t),e}function Z(t,e){var i=-1,r=le(),o=t?t.length:0,a=o>=w&&r===n,u=[];if(a){var h=l(e);h?(r=s,e=h):a=!1}for(;++i<o;){var c=t[i];r(e,c)<0&&u.push(c)}return a&&f(e),u}function Q(t,e,i,n){for(var s=(n||0)-1,r=t?t.length:0,o=[];++s<r;){var a=t[s];if(a&&"object"==typeof a&&"number"==typeof a.length&&(Zn(a)||de(a))){e||(a=Q(a,e,i));var l=-1,u=a.length,h=o.length;for(o.length+=u;++l<u;)o[h++]=a[l]}else i||o.push(a)}return o}function te(t,e,i,n,s,r){if(i){var o=i(t,e);if("undefined"!=typeof o)return!!o}if(t===e)return 0!==t||1/t==1/e;var a=typeof t,l=typeof e;if(!(t!==t||t&&X[a]||e&&X[l]))return!1;if(null==t||null==e)return t===e;var u=Sn.call(t),c=Sn.call(e);if(u==H&&(u=U),c==H&&(c=U),u!=c)return!1;switch(u){case F:case L:return+t==+e;case R:return t!=+t?e!=+e:0==t?1/t==1/e:t==+e;case q:case $:return t==xn(e)}var f=u==W;if(!f){var p=jn.call(t,"__wrapped__"),m=jn.call(e,"__wrapped__");if(p||m)return te(p?t.__wrapped__:t,m?e.__wrapped__:e,i,n,s,r);if(u!=U)return!1;var g=t.constructor,v=e.constructor;if(g!=v&&!(Ie(g)&&g instanceof g&&Ie(v)&&v instanceof v)&&"constructor"in t&&"constructor"in e)return!1}var b=!s;s||(s=h()),r||(r=h());for(var y=s.length;y--;)if(s[y]==t)return r[y]==e;var _=0;if(o=!0,s.push(t),r.push(e),f){if(y=t.length,_=e.length,o=_==y,o||n)for(;_--;){var w=y,x=e[_];if(n)for(;w--&&!(o=te(t[w],x,i,n,s,r)););else if(!(o=te(t[_],x,i,n,s,r)))break}}else as(e,function(e,a,l){return jn.call(l,a)?(_++,o=jn.call(t,a)&&te(t[a],e,i,n,s,r)):void 0}),o&&!n&&as(t,function(t,e,i){return jn.call(i,e)?o=--_>-1:void 0});return s.pop(),r.pop(),b&&(d(s),d(r)),o}function ee(t,e,i,n,s){(Zn(e)?Ke:ls)(e,function(e,r){var o,a,l=e,u=t[r];if(e&&((a=Zn(e))||us(e))){for(var h=n.length;h--;)if(o=n[h]==e){u=s[h];break}if(!o){var c;i&&(l=i(u,e),(c="undefined"!=typeof l)&&(u=l)),c||(u=a?Zn(u)?u:[]:us(u)?u:{}),n.push(e),s.push(u),c||ee(u,e,i,n,s)}}else i&&(l=i(u,e),"undefined"==typeof l&&(l=e)),"undefined"!=typeof l&&(u=l);t[r]=u})}function ne(t,e){return t+En(Gn()*(e-t+1))}function se(t,e,i){var r=-1,o=le(),a=t?t.length:0,u=[],c=!e&&a>=w&&o===n,p=i||c?h():u;if(c){var m=l(p);o=s,p=m}for(;++r<a;){var g=t[r],v=i?i(g,r,t):g;(e?!r||p[p.length-1]!==v:o(p,v)<0)&&((i||c)&&p.push(v),u.push(g))}return c?(d(p.array),f(p)):i&&d(p),u}function re(t){return function(i,n,s){var r={};n=e.createCallback(n,s,3);var o=-1,a=i?i.length:0;if("number"==typeof a)for(;++o<a;){var l=i[o];t(r,l,n(l,o,i),i)}else ls(i,function(e,i,s){t(r,e,n(e,i,s),s)});return r}}function oe(t,e,i,n,s,o){var a=1&e,l=2&e,u=4&e,h=16&e,c=32&e;if(!l&&!Ie(t))throw new kn;h&&!i.length&&(e&=-17,h=i=!1),c&&!n.length&&(e&=-33,c=n=!1);var d=t&&t.__bindData__;if(d&&d!==!0)return d=p(d),d[2]&&(d[2]=p(d[2])),d[3]&&(d[3]=p(d[3])),!a||1&d[1]||(d[4]=s),!a&&1&d[1]&&(e|=8),!u||4&d[1]||(d[5]=o),h&&zn.apply(d[2]||(d[2]=[]),i),c&&Wn.apply(d[3]||(d[3]=[]),n),d[1]|=e,oe.apply(null,d);var f=1==e||17===e?r:K;return f([t,e,i,n,s,o])}function ae(t){return es[t]}function le(){var t=(t=e.indexOf)===vi?n:t;return t}function ue(t){return"function"==typeof t&&Mn.test(t)}function he(t){var e,i;return t&&Sn.call(t)==U&&(e=t.constructor,!Ie(e)||e instanceof e)?(as(t,function(t,e){i=e}),"undefined"==typeof i||jn.call(t,i)):!1}function ce(t){return is[t]}function de(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Sn.call(t)==H||!1}function fe(t,e,i,n){return"boolean"!=typeof e&&null!=e&&(n=i,i=e,e=!1),v(t,e,"function"==typeof i&&x(i,n,1))}function pe(t,e,i){return v(t,!0,"function"==typeof e&&x(e,i,1))}function me(t,e){var i=b(t);return e?rs(i,e):i}function ge(t,i,n){var s;return i=e.createCallback(i,n,3),ls(t,function(t,e,n){return i(t,e,n)?(s=e,!1):void 0}),s}function ve(t,i,n){var s;return i=e.createCallback(i,n,3),ye(t,function(t,e,n){return i(t,e,n)?(s=e,!1):void 0}),s}function be(t,e,i){var n=[];as(t,function(t,e){n.push(e,t)});var s=n.length;for(e=x(e,i,3);s--&&e(n[s--],n[s],t)!==!1;);return t}function ye(t,e,i){var n=ts(t),s=n.length;for(e=x(e,i,3);s--;){var r=n[s];if(e(t[r],r,t)===!1)break}return t}function _e(t){var e=[];return as(t,function(t,i){Ie(t)&&e.push(i)}),e.sort()}function we(t,e){return t?jn.call(t,e):!1}function xe(t){for(var e=-1,i=ts(t),n=i.length,s={};++e<n;){var r=i[e];s[t[r]]=r}return s}function ke(t){return t===!0||t===!1||t&&"object"==typeof t&&Sn.call(t)==F||!1}function Ce(t){return t&&"object"==typeof t&&Sn.call(t)==L||!1}function De(t){return t&&1===t.nodeType||!1}function Te(t){var e=!0;if(!t)return e;var i=Sn.call(t),n=t.length;return i==W||i==$||i==H||i==U&&"number"==typeof n&&Ie(t.splice)?!n:(ls(t,function(){return e=!1}),e)}function Se(t,e,i,n){return te(t,e,"function"==typeof i&&x(i,n,2))}function Me(t){return Rn(t)&&!Un(parseFloat(t))}function Ie(t){return"function"==typeof t}function Pe(t){return!(!t||!X[typeof t])}function Ee(t){return Ne(t)&&t!=+t}function Ae(t){return null===t}function Ne(t){return"number"==typeof t||t&&"object"==typeof t&&Sn.call(t)==R||!1}function je(t){return t&&"object"==typeof t&&Sn.call(t)==q||!1}function ze(t){return"string"==typeof t||t&&"object"==typeof t&&Sn.call(t)==$||!1}function Oe(t){return"undefined"==typeof t}function He(t,i,n){var s={};return i=e.createCallback(i,n,3),ls(t,function(t,e,n){s[e]=i(t,e,n)}),s}function We(t){var e=arguments,i=2;if(!Pe(t))return t;if("number"!=typeof e[2]&&(i=e.length),i>3&&"function"==typeof e[i-2])var n=x(e[--i-1],e[i--],2);else i>2&&"function"==typeof e[i-1]&&(n=e[--i]);for(var s=p(arguments,1,i),r=-1,o=h(),a=h();++r<i;)ee(t,s[r],n,o,a);return d(o),d(a),t}function Fe(t,i,n){var s={};if("function"!=typeof i){var r=[];as(t,function(t,e){r.push(e)}),r=Z(r,Q(arguments,!0,!1,1));for(var o=-1,a=r.length;++o<a;){var l=r[o];s[l]=t[l]}}else i=e.createCallback(i,n,3),as(t,function(t,e,n){i(t,e,n)||(s[e]=t)});return s}function Le(t){for(var e=-1,i=ts(t),n=i.length,s=pn(n);++e<n;){var r=i[e];s[e]=[r,t[r]]}return s}function Ye(t,i,n){var s={};if("function"!=typeof i)for(var r=-1,o=Q(arguments,!0,!1,1),a=Pe(t)?o.length:0;++r<a;){var l=o[r];l in t&&(s[l]=t[l])}else i=e.createCallback(i,n,3),as(t,function(t,e,n){i(t,e,n)&&(s[e]=t)});return s}function Re(t,i,n,s){var r=Zn(t);if(null==n)if(r)n=[];else{var o=t&&t.constructor,a=o&&o.prototype;n=b(a)}return i&&(i=e.createCallback(i,s,4),(r?Ke:ls)(t,function(t,e,s){return i(n,t,e,s)})),n}function Ue(t){for(var e=-1,i=ts(t),n=i.length,s=pn(n);++e<n;)s[e]=t[i[e]];return s}function qe(t){for(var e=arguments,i=-1,n=Q(e,!0,!1,1),s=e[2]&&e[2][e[1]]===t?1:n.length,r=pn(s);++i<s;)r[i]=t[n[i]];return r}function $e(t,e,i){var n=-1,s=le(),r=t?t.length:0,o=!1;return i=(0>i?$n(0,r+i):i)||0,Zn(t)?o=s(t,e,i)>-1:"number"==typeof r?o=(ze(t)?t.indexOf(e,i):s(t,e,i))>-1:ls(t,function(t){return++n>=i?!(o=t===e):void 0}),o}function Be(t,i,n){var s=!0;i=e.createCallback(i,n,3);var r=-1,o=t?t.length:0;if("number"==typeof o)for(;++r<o&&(s=!!i(t[r],r,t)););else ls(t,function(t,e,n){return s=!!i(t,e,n)});return s}function Ve(t,i,n){var s=[];i=e.createCallback(i,n,3);var r=-1,o=t?t.length:0;if("number"==typeof o)for(;++r<o;){var a=t[r];i(a,r,t)&&s.push(a)}else ls(t,function(t,e,n){i(t,e,n)&&s.push(t)});return s}function Ge(t,i,n){i=e.createCallback(i,n,3);var s=-1,r=t?t.length:0;if("number"!=typeof r){var o;return ls(t,function(t,e,n){return i(t,e,n)?(o=t,!1):void 0}),o}for(;++s<r;){var a=t[s];if(i(a,s,t))return a}}function Xe(t,i,n){var s;return i=e.createCallback(i,n,3),Je(t,function(t,e,n){return i(t,e,n)?(s=t,!1):void 0}),s}function Ke(t,e,i){var n=-1,s=t?t.length:0;if(e=e&&"undefined"==typeof i?e:x(e,i,3),"number"==typeof s)for(;++n<s&&e(t[n],n,t)!==!1;);else ls(t,e);return t}function Je(t,e,i){var n=t?t.length:0;if(e=e&&"undefined"==typeof i?e:x(e,i,3),"number"==typeof n)for(;n--&&e(t[n],n,t)!==!1;);else{var s=ts(t);n=s.length,ls(t,function(t,i,r){return i=s?s[--n]:--n,e(r[i],i,r)})}return t}function Ze(t,e){var i=p(arguments,2),n=-1,s="function"==typeof e,r=t?t.length:0,o=pn("number"==typeof r?r:0);return Ke(t,function(t){o[++n]=(s?e:t[e]).apply(t,i)}),o}function Qe(t,i,n){var s=-1,r=t?t.length:0;if(i=e.createCallback(i,n,3),"number"==typeof r)for(var o=pn(r);++s<r;)o[s]=i(t[s],s,t);else o=[],ls(t,function(t,e,n){o[++s]=i(t,e,n)});return o}function ti(t,i,n){var s=-1/0,r=s;if("function"!=typeof i&&n&&n[i]===t&&(i=null),null==i&&Zn(t))for(var a=-1,l=t.length;++a<l;){var u=t[a];u>r&&(r=u)}else i=null==i&&ze(t)?o:e.createCallback(i,n,3),Ke(t,function(t,e,n){var o=i(t,e,n);o>s&&(s=o,r=t)});return r}function ei(t,i,n){var s=1/0,r=s;if("function"!=typeof i&&n&&n[i]===t&&(i=null),null==i&&Zn(t))for(var a=-1,l=t.length;++a<l;){var u=t[a];r>u&&(r=u)}else i=null==i&&ze(t)?o:e.createCallback(i,n,3),Ke(t,function(t,e,n){var o=i(t,e,n);s>o&&(s=o,r=t)});return r}function ii(t,i,n,s){if(!t)return n;var r=arguments.length<3;i=e.createCallback(i,s,4);var o=-1,a=t.length;if("number"==typeof a)for(r&&(n=t[++o]);++o<a;)n=i(n,t[o],o,t);else ls(t,function(t,e,s){n=r?(r=!1,t):i(n,t,e,s)});return n}function ni(t,i,n,s){var r=arguments.length<3;return i=e.createCallback(i,s,4),Je(t,function(t,e,s){n=r?(r=!1,t):i(n,t,e,s)}),n}function si(t,i,n){return i=e.createCallback(i,n,3),Ve(t,function(t,e,n){return!i(t,e,n)})}function ri(t,e,i){if(t&&"number"!=typeof t.length&&(t=Ue(t)),null==e||i)return t?t[ne(0,t.length-1)]:g;var n=oi(t);return n.length=Bn($n(0,e),n.length),n}function oi(t){var e=-1,i=t?t.length:0,n=pn("number"==typeof i?i:0);return Ke(t,function(t){var i=ne(0,++e);n[e]=n[i],n[i]=t}),n}function ai(t){var e=t?t.length:0;return"number"==typeof e?e:ts(t).length}function li(t,i,n){var s;i=e.createCallback(i,n,3);var r=-1,o=t?t.length:0;if("number"==typeof o)for(;++r<o&&!(s=i(t[r],r,t)););else ls(t,function(t,e,n){return!(s=i(t,e,n))});return!!s}function ui(t,i,n){var s=-1,r=Zn(i),o=t?t.length:0,l=pn("number"==typeof o?o:0);for(r||(i=e.createCallback(i,n,3)),Ke(t,function(t,e,n){var o=l[++s]=c();r?o.criteria=Qe(i,function(e){return t[e]}):(o.criteria=h())[0]=i(t,e,n),o.index=s,o.value=t}),o=l.length,l.sort(a);o--;){var u=l[o];l[o]=u.value,r||d(u.criteria),f(u)}return l}function hi(t){return t&&"number"==typeof t.length?p(t):Ue(t)}function ci(t){for(var e=-1,i=t?t.length:0,n=[];++e<i;){var s=t[e];s&&n.push(s)}return n}function di(t){return Z(t,Q(arguments,!0,!0,1))}function fi(t,i,n){var s=-1,r=t?t.length:0;for(i=e.createCallback(i,n,3);++s<r;)if(i(t[s],s,t))return s;return-1}function pi(t,i,n){var s=t?t.length:0;for(i=e.createCallback(i,n,3);s--;)if(i(t[s],s,t))return s;return-1}function mi(t,i,n){var s=0,r=t?t.length:0;if("number"!=typeof i&&null!=i){var o=-1;for(i=e.createCallback(i,n,3);++o<r&&i(t[o],o,t);)s++}else if(s=i,null==s||n)return t?t[0]:g;return p(t,0,Bn($n(0,s),r))}function gi(t,e,i,n){return"boolean"!=typeof e&&null!=e&&(n=i,i="function"!=typeof e&&n&&n[e]===t?null:e,e=!1),null!=i&&(t=Qe(t,i,n)),Q(t,e)}function vi(t,e,i){if("number"==typeof i){var s=t?t.length:0;i=0>i?$n(0,s+i):i||0}else if(i){var r=Ti(t,e);return t[r]===e?r:-1}return n(t,e,i)}function bi(t,i,n){var s=0,r=t?t.length:0;if("number"!=typeof i&&null!=i){var o=r;for(i=e.createCallback(i,n,3);o--&&i(t[o],o,t);)s++}else s=null==i||n?1:i||s;return p(t,0,Bn($n(0,r-s),r))}function yi(){for(var t=[],e=-1,i=arguments.length,r=h(),o=le(),a=o===n,u=h();++e<i;){var c=arguments[e];(Zn(c)||de(c))&&(t.push(c),r.push(a&&c.length>=w&&l(e?t[e]:u)))}var p=t[0],m=-1,g=p?p.length:0,v=[];t:for(;++m<g;){var b=r[0];if(c=p[m],(b?s(b,c):o(u,c))<0){for(e=i,(b||u).push(c);--e;)if(b=r[e],(b?s(b,c):o(t[e],c))<0)continue t;v.push(c)}}for(;i--;)b=r[i],b&&f(b);return d(r),d(u),v}function _i(t,i,n){var s=0,r=t?t.length:0;if("number"!=typeof i&&null!=i){var o=r;for(i=e.createCallback(i,n,3);o--&&i(t[o],o,t);)s++}else if(s=i,null==s||n)return t?t[r-1]:g;return p(t,$n(0,r-s))}function wi(t,e,i){var n=t?t.length:0;for("number"==typeof i&&(n=(0>i?$n(0,n+i):Bn(i,n-1))+1);n--;)if(t[n]===e)return n;return-1}function xi(t){for(var e=arguments,i=0,n=e.length,s=t?t.length:0;++i<n;)for(var r=-1,o=e[i];++r<s;)t[r]===o&&(Hn.call(t,r--,1),s--);return t}function ki(t,e,i){t=+t||0,i="number"==typeof i?i:+i||1,null==e&&(e=t,t=0);for(var n=-1,s=$n(0,In((e-t)/(i||1))),r=pn(s);++n<s;)r[n]=t,t+=i;return r}function Ci(t,i,n){var s=-1,r=t?t.length:0,o=[];for(i=e.createCallback(i,n,3);++s<r;){var a=t[s];i(a,s,t)&&(o.push(a),Hn.call(t,s--,1),r--)}return o}function Di(t,i,n){if("number"!=typeof i&&null!=i){var s=0,r=-1,o=t?t.length:0;for(i=e.createCallback(i,n,3);++r<o&&i(t[r],r,t);)s++}else s=null==i||n?1:$n(0,i);return p(t,s)}function Ti(t,i,n,s){var r=0,o=t?t.length:r;for(n=n?e.createCallback(n,s,1):Ji,i=n(i);o>r;){var a=r+o>>>1;n(t[a])<i?r=a+1:o=a}return r}function Si(){return se(Q(arguments,!0,!0))}function Mi(t,i,n,s){return"boolean"!=typeof i&&null!=i&&(s=n,n="function"!=typeof i&&s&&s[i]===t?null:i,i=!1),null!=n&&(n=e.createCallback(n,s,3)),se(t,i,n)}function Ii(t){return Z(t,p(arguments,1))}function Pi(){for(var t=-1,e=arguments.length;++t<e;){var i=arguments[t];if(Zn(i)||de(i))var n=n?se(Z(n,i).concat(Z(i,n))):i}return n||[]}function Ei(){for(var t=arguments.length>1?arguments:arguments[0],e=-1,i=t?ti(fs(t,"length")):0,n=pn(0>i?0:i);++e<i;)n[e]=fs(t,e);return n}function Ai(t,e){var i=-1,n=t?t.length:0,s={};for(e||!n||Zn(t[0])||(e=[]);++i<n;){var r=t[i];e?s[r]=e[i]:r&&(s[r[0]]=r[1])}return s}function Ni(t,e){if(!Ie(e))throw new kn;return function(){return--t<1?e.apply(this,arguments):void 0}}function ji(t,e){return arguments.length>2?oe(t,17,p(arguments,2),null,e):oe(t,1,null,null,e)}function zi(t){for(var e=arguments.length>1?Q(arguments,!0,!1,1):_e(t),i=-1,n=e.length;++i<n;){var s=e[i];t[s]=oe(t[s],1,null,null,t)}return t}function Oi(t,e){return arguments.length>2?oe(e,19,p(arguments,2),null,t):oe(e,3,null,null,t)}function Hi(){for(var t=arguments,e=t.length;e--;)if(!Ie(t[e]))throw new kn;return function(){for(var e=arguments,i=t.length;i--;)e=[t[i].apply(this,e)];return e[0]}}function Wi(t,e){return e="number"==typeof e?e:+e||t.length,oe(t,4,null,null,null,e)}function Fi(t,e,i){var n,s,r,o,a,l,u,h=0,c=!1,d=!0;if(!Ie(t))throw new kn;if(e=$n(0,e)||0,i===!0){var f=!0;d=!1}else Pe(i)&&(f=i.leading,c="maxWait"in i&&($n(e,i.maxWait)||0),d="trailing"in i?i.trailing:d);var p=function(){var i=e-(ms()-o);if(0>=i){s&&Pn(s);var c=u;s=l=u=g,c&&(h=ms(),r=t.apply(a,n),l||s||(n=a=null))}else l=On(p,i)},m=function(){l&&Pn(l),s=l=u=g,(d||c!==e)&&(h=ms(),r=t.apply(a,n),l||s||(n=a=null))};return function(){if(n=arguments,o=ms(),a=this,u=d&&(l||!f),c===!1)var i=f&&!l;else{s||f||(h=o);var g=c-(o-h),v=0>=g;v?(s&&(s=Pn(s)),h=o,r=t.apply(a,n)):s||(s=On(m,g))}return v&&l?l=Pn(l):l||e===c||(l=On(p,e)),i&&(v=!0,r=t.apply(a,n)),!v||l||s||(n=a=null),r}}function Li(t){if(!Ie(t))throw new kn;var e=p(arguments,1);return On(function(){t.apply(g,e)},1)}function Yi(t,e){if(!Ie(t))throw new kn;var i=p(arguments,2);return On(function(){t.apply(g,i)},e)}function Ri(t,e){if(!Ie(t))throw new kn;var i=function(){var n=i.cache,s=e?e.apply(this,arguments):_+arguments[0];return jn.call(n,s)?n[s]:n[s]=t.apply(this,arguments)};return i.cache={},i}function Ui(t){var e,i;if(!Ie(t))throw new kn;return function(){return e?i:(e=!0,i=t.apply(this,arguments),t=null,i)}}function qi(t){return oe(t,16,p(arguments,1))}function $i(t){return oe(t,32,null,p(arguments,1))}function Bi(t,e,i){var n=!0,s=!0;if(!Ie(t))throw new kn;return i===!1?n=!1:Pe(i)&&(n="leading"in i?i.leading:n,s="trailing"in i?i.trailing:s),V.leading=n,V.maxWait=e,V.trailing=s,Fi(t,e,V)}function Vi(t,e){return oe(e,16,[t])}function Gi(t){return function(){return t}}function Xi(t,e,i){var n=typeof t;if(null==t||"function"==n)return x(t,e,i);if("object"!=n)return en(t);var s=ts(t),r=s[0],o=t[r];return 1!=s.length||o!==o||Pe(o)?function(e){for(var i=s.length,n=!1;i--&&(n=te(e[s[i]],t[s[i]],null,!0)););return n}:function(t){var e=t[r];return o===e&&(0!==o||1/o==1/e)}}function Ki(t){return null==t?"":xn(t).replace(ss,ae)}function Ji(t){return t}function Zi(t,n,s){var r=!0,o=n&&_e(n);n&&(s||o.length)||(null==s&&(s=n),a=i,n=t,t=e,o=_e(n)),s===!1?r=!1:Pe(s)&&"chain"in s&&(r=s.chain);var a=t,l=Ie(a);Ke(o,function(e){var i=t[e]=n[e];l&&(a.prototype[e]=function(){var e=this.__chain__,n=this.__wrapped__,s=[n];zn.apply(s,arguments);var o=i.apply(t,s);if(r||e){if(n===o&&Pe(o))return this;o=new a(o),o.__chain__=e}return o})})}function Qi(){return t._=Tn,this}function tn(){}function en(t){return function(e){return e[t]}}function nn(t,e,i){var n=null==t,s=null==e;if(null==i&&("boolean"==typeof t&&s?(i=t,t=1):s||"boolean"!=typeof e||(i=e,s=!0)),n&&s&&(e=1),t=+t||0,s?(e=t,t=0):e=+e||0,i||t%1||e%1){var r=Gn();return Bn(t+r*(e-t+parseFloat("1e-"+((r+"").length-1))),e)}return ne(t,e)}function sn(t,e){if(t){var i=t[e];return Ie(i)?t[e]():i}}function rn(t,i,n){var s=e.templateSettings;t=xn(t||""),n=os({},n,s);var r,o=os({},n.imports,s.imports),a=ts(o),l=Ue(o),h=0,c=n.interpolate||A,d="__p += '",f=wn((n.escape||A).source+"|"+c.source+"|"+(c===P?S:A).source+"|"+(n.evaluate||A).source+"|$","g");t.replace(f,function(e,i,n,s,o,a){return n||(n=s),d+=t.slice(h,a).replace(j,u),i&&(d+="' +\n__e("+i+") +\n'"),o&&(r=!0,d+="';\n"+o+";\n__p += '"),n&&(d+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),h=a+e.length,e}),d+="';\n";var p=n.variable,m=p;m||(p="obj",d="with ("+p+") {\n"+d+"\n}\n"),d=(r?d.replace(C,""):d).replace(D,"$1").replace(T,"$1;"),d="function("+p+") {\n"+(m?"":p+" || ("+p+" = {});\n")+"var __t, __p = '', __e = _.escape"+(r?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v="\n/*\n//# sourceURL="+(n.sourceURL||"/lodash/template/source["+O++ +"]")+"\n*/";try{var b=vn(a,"return "+d+v).apply(g,l)}catch(y){throw y.source=d,y}return i?b(i):(b.source=d,b)}function on(t,e,i){t=(t=+t)>-1?t:0;var n=-1,s=pn(t);for(e=x(e,i,1);++n<t;)s[n]=e(n);return s}function an(t){return null==t?"":xn(t).replace(ns,ce)}function ln(t){var e=++y;return xn(null==t?"":t)+e}function un(t){return t=new i(t),t.__chain__=!0,t}function hn(t,e){return e(t),t}function cn(){return this.__chain__=!0,this}function dn(){return xn(this.__wrapped__)}function fn(){return this.__wrapped__}t=t?ie.defaults(J.Object(),t,ie.pick(J,z)):J;var pn=t.Array,mn=t.Boolean,gn=t.Date,vn=t.Function,bn=t.Math,yn=t.Number,_n=t.Object,wn=t.RegExp,xn=t.String,kn=t.TypeError,Cn=[],Dn=_n.prototype,Tn=t._,Sn=Dn.toString,Mn=wn("^"+xn(Sn).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),In=bn.ceil,Pn=t.clearTimeout,En=bn.floor,An=vn.prototype.toString,Nn=ue(Nn=_n.getPrototypeOf)&&Nn,jn=Dn.hasOwnProperty,zn=Cn.push,On=t.setTimeout,Hn=Cn.splice,Wn=Cn.unshift,Fn=function(){try{var t={},e=ue(e=_n.defineProperty)&&e,i=e(t,t,t)&&e}catch(n){}return i}(),Ln=ue(Ln=_n.create)&&Ln,Yn=ue(Yn=pn.isArray)&&Yn,Rn=t.isFinite,Un=t.isNaN,qn=ue(qn=_n.keys)&&qn,$n=bn.max,Bn=bn.min,Vn=t.parseInt,Gn=bn.random,Xn={};Xn[W]=pn,Xn[F]=mn,Xn[L]=gn,Xn[Y]=vn,Xn[U]=_n,Xn[R]=yn,Xn[q]=wn,Xn[$]=xn,i.prototype=e.prototype;var Kn=e.support={};Kn.funcDecomp=!ue(t.WinRTError)&&N.test(m),Kn.funcNames="string"==typeof vn.name,e.templateSettings={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:P,variable:"",imports:{_:e}},Ln||(b=function(){function e(){}return function(i){if(Pe(i)){e.prototype=i;var n=new e;e.prototype=null}return n||t.Object()}}());var Jn=Fn?function(t,e){G.value=e,Fn(t,"__bindData__",G)}:tn,Zn=Yn||function(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Sn.call(t)==W||!1},Qn=function(t){var e,i=t,n=[];if(!i)return n;if(!X[typeof t])return n;for(e in i)jn.call(i,e)&&n.push(e);return n},ts=qn?function(t){return Pe(t)?qn(t):[]}:Qn,es={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},is=xe(es),ns=wn("("+ts(is).join("|")+")","g"),ss=wn("["+ts(es).join("")+"]","g"),rs=function(t,e,i){var n,s=t,r=s;if(!s)return r;var o=arguments,a=0,l="number"==typeof i?2:o.length;if(l>3&&"function"==typeof o[l-2])var u=x(o[--l-1],o[l--],2);else l>2&&"function"==typeof o[l-1]&&(u=o[--l]);for(;++a<l;)if(s=o[a],s&&X[typeof s])for(var h=-1,c=X[typeof s]&&ts(s),d=c?c.length:0;++h<d;)n=c[h],r[n]=u?u(r[n],s[n]):s[n];return r},os=function(t,e,i){var n,s=t,r=s;if(!s)return r;for(var o=arguments,a=0,l="number"==typeof i?2:o.length;++a<l;)if(s=o[a],s&&X[typeof s])for(var u=-1,h=X[typeof s]&&ts(s),c=h?h.length:0;++u<c;)n=h[u],"undefined"==typeof r[n]&&(r[n]=s[n]);return r},as=function(t,e,i){var n,s=t,r=s;if(!s)return r;if(!X[typeof s])return r;e=e&&"undefined"==typeof i?e:x(e,i,3);for(n in s)if(e(s[n],n,t)===!1)return r;return r},ls=function(t,e,i){var n,s=t,r=s;if(!s)return r;if(!X[typeof s])return r;e=e&&"undefined"==typeof i?e:x(e,i,3);for(var o=-1,a=X[typeof s]&&ts(s),l=a?a.length:0;++o<l;)if(n=a[o],e(s[n],n,t)===!1)return r;return r},us=Nn?function(t){if(!t||Sn.call(t)!=U)return!1;var e=t.valueOf,i=ue(e)&&(i=Nn(e))&&Nn(i);return i?t==i||Nn(t)==i:he(t)}:he,hs=re(function(t,e,i){jn.call(t,i)?t[i]++:t[i]=1}),cs=re(function(t,e,i){(jn.call(t,i)?t[i]:t[i]=[]).push(e)}),ds=re(function(t,e,i){t[i]=e}),fs=Qe,ps=Ve,ms=ue(ms=gn.now)&&ms||function(){return(new gn).getTime()},gs=8==Vn(k+"08")?Vn:function(t,e){return Vn(ze(t)?t.replace(E,""):t,e||0)};return e.after=Ni,e.assign=rs,e.at=qe,e.bind=ji,e.bindAll=zi,e.bindKey=Oi,e.chain=un,e.compact=ci,e.compose=Hi,e.constant=Gi,e.countBy=hs,e.create=me,e.createCallback=Xi,e.curry=Wi,e.debounce=Fi,e.defaults=os,e.defer=Li,e.delay=Yi,e.difference=di,e.filter=Ve,e.flatten=gi,e.forEach=Ke,e.forEachRight=Je,e.forIn=as,e.forInRight=be,e.forOwn=ls,e.forOwnRight=ye,e.functions=_e,e.groupBy=cs,e.indexBy=ds,e.initial=bi,e.intersection=yi,e.invert=xe,e.invoke=Ze,e.keys=ts,e.map=Qe,e.mapValues=He,e.max=ti,e.memoize=Ri,e.merge=We,e.min=ei,e.omit=Fe,e.once=Ui,e.pairs=Le,e.partial=qi,e.partialRight=$i,e.pick=Ye,e.pluck=fs,e.property=en,e.pull=xi,e.range=ki,e.reject=si,e.remove=Ci,e.rest=Di,e.shuffle=oi,e.sortBy=ui,e.tap=hn,e.throttle=Bi,e.times=on,e.toArray=hi,e.transform=Re,e.union=Si,e.uniq=Mi,e.values=Ue,e.where=ps,e.without=Ii,e.wrap=Vi,e.xor=Pi,e.zip=Ei,e.zipObject=Ai,e.collect=Qe,e.drop=Di,e.each=Ke,e.eachRight=Je,e.extend=rs,e.methods=_e,e.object=Ai,e.select=Ve,e.tail=Di,e.unique=Mi,e.unzip=Ei,Zi(e),e.clone=fe,e.cloneDeep=pe,e.contains=$e,e.escape=Ki,e.every=Be,e.find=Ge,e.findIndex=fi,e.findKey=ge,e.findLast=Xe,e.findLastIndex=pi,e.findLastKey=ve,e.has=we,e.identity=Ji,e.indexOf=vi,e.isArguments=de,e.isArray=Zn,e.isBoolean=ke,e.isDate=Ce,e.isElement=De,e.isEmpty=Te,e.isEqual=Se,e.isFinite=Me,e.isFunction=Ie,e.isNaN=Ee,e.isNull=Ae,e.isNumber=Ne,e.isObject=Pe,e.isPlainObject=us,e.isRegExp=je,e.isString=ze,e.isUndefined=Oe,e.lastIndexOf=wi,e.mixin=Zi,e.noConflict=Qi,e.noop=tn,e.now=ms,e.parseInt=gs,e.random=nn,e.reduce=ii,e.reduceRight=ni,e.result=sn,e.runInContext=m,e.size=ai,e.some=li,e.sortedIndex=Ti,e.template=rn,e.unescape=an,e.uniqueId=ln,e.all=Be,e.any=li,e.detect=Ge,e.findWhere=Ge,e.foldl=ii,e.foldr=ni,e.include=$e,e.inject=ii,Zi(function(){var t={};
return ls(e,function(i,n){e.prototype[n]||(t[n]=i)}),t}(),!1),e.first=mi,e.last=_i,e.sample=ri,e.take=mi,e.head=mi,ls(e,function(t,n){var s="sample"!==n;e.prototype[n]||(e.prototype[n]=function(e,n){var r=this.__chain__,o=t(this.__wrapped__,e,n);return r||null!=e&&(!n||s&&"function"==typeof e)?new i(o,r):o})}),e.VERSION="2.4.1",e.prototype.chain=cn,e.prototype.toString=dn,e.prototype.value=fn,e.prototype.valueOf=fn,Ke(["join","pop","shift"],function(t){var n=Cn[t];e.prototype[t]=function(){var t=this.__chain__,e=n.apply(this.__wrapped__,arguments);return t?new i(e,t):e}}),Ke(["push","reverse","sort","unshift"],function(t){var i=Cn[t];e.prototype[t]=function(){return i.apply(this.__wrapped__,arguments),this}}),Ke(["concat","slice","splice"],function(t){var n=Cn[t];e.prototype[t]=function(){return new i(n.apply(this.__wrapped__,arguments),this.__chain__)}}),e}var g,v=[],b=[],y=0,_=+new Date+"",w=75,x=40,k=" 	\f ﻿\n\r\u2028\u2029 ᠎             　",C=/\b__p \+= '';/g,D=/\b(__p \+=) '' \+/g,T=/(__e\(.*?\)|\b__t\)) \+\n'';/g,S=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,M=/\w*$/,I=/^\s*function[ \n\r\t]+\w/,P=/<%=([\s\S]+?)%>/g,E=RegExp("^["+k+"]*0+(?=.$)"),A=/($^)/,N=/\bthis\b/,j=/['\n\r\t\u2028\u2029\\]/g,z=["Array","Boolean","Date","Function","Math","Number","Object","RegExp","String","_","attachEvent","clearTimeout","isFinite","isNaN","parseInt","setTimeout"],O=0,H="[object Arguments]",W="[object Array]",F="[object Boolean]",L="[object Date]",Y="[object Function]",R="[object Number]",U="[object Object]",q="[object RegExp]",$="[object String]",B={};B[Y]=!1,B[H]=B[W]=B[F]=B[L]=B[R]=B[U]=B[q]=B[$]=!0;var V={leading:!1,maxWait:0,trailing:!1},G={configurable:!1,enumerable:!1,value:null,writable:!1},X={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1},K={"\\":"\\","'":"'","\n":"n","\r":"r","	":"t","\u2028":"u2028","\u2029":"u2029"},J=X[typeof window]&&window||this,Z=X[typeof i]&&i&&!i.nodeType&&i,Q=X[typeof e]&&e&&!e.nodeType&&e,te=Q&&Q.exports===Z&&Z,ee=X[typeof t]&&t;!ee||ee.global!==ee&&ee.window!==ee||(J=ee);var ie=m();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(J._=ie,define(function(){return ie})):Z&&Q?te?(Q.exports=ie)._=ie:Z._=ie:J._=ie}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],"/Users/zhihao/backbone/src/node_modules/moment/moment.js":[function(t,e){(function(i){(function(n){function s(t,e,i){switch(arguments.length){case 2:return null!=t?t:e;case 3:return null!=t?t:null!=e?e:i;default:throw new Error("Implement me")}}function r(t,e){return Pe.call(t,e)}function o(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function a(t){Ce.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function l(t,e){var i=!0;return v(function(){return i&&(a(t),i=!1),e.apply(this,arguments)},e)}function u(t,e){wi[t]||(a(e),wi[t]=!0)}function h(t,e){return function(i){return _(t.call(this,i),e)}}function c(t,e){return function(i){return this.localeData().ordinal(t.call(this,i),e)}}function d(t,e){var i,n,s=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(s,"months");return 0>e-r?(i=t.clone().add(s-1,"months"),n=(e-r)/(r-i)):(i=t.clone().add(s+1,"months"),n=(e-r)/(i-r)),-(s+n)}function f(t,e,i){var n;return null==i?e:null!=t.meridiemHour?t.meridiemHour(e,i):null!=t.isPM?(n=t.isPM(i),n&&12>e&&(e+=12),n||12!==e||(e=0),e):e}function p(){}function m(t,e){e!==!1&&O(t),b(this,t),this._d=new Date(+t._d),ki===!1&&(ki=!0,Ce.updateOffset(this),ki=!1)}function g(t){var e=I(t),i=e.year||0,n=e.quarter||0,s=e.month||0,r=e.week||0,o=e.day||0,a=e.hour||0,l=e.minute||0,u=e.second||0,h=e.millisecond||0;this._milliseconds=+h+1e3*u+6e4*l+36e5*a,this._days=+o+7*r,this._months=+s+3*n+12*i,this._data={},this._locale=Ce.localeData(),this._bubble()}function v(t,e){for(var i in e)r(e,i)&&(t[i]=e[i]);return r(e,"toString")&&(t.toString=e.toString),r(e,"valueOf")&&(t.valueOf=e.valueOf),t}function b(t,e){var i,n,s;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=e._pf),"undefined"!=typeof e._locale&&(t._locale=e._locale),Fe.length>0)for(i in Fe)n=Fe[i],s=e[n],"undefined"!=typeof s&&(t[n]=s);return t}function y(t){return 0>t?Math.ceil(t):Math.floor(t)}function _(t,e,i){for(var n=""+Math.abs(t),s=t>=0;n.length<e;)n="0"+n;return(s?i?"+":"":"-")+n}function w(t,e){var i={milliseconds:0,months:0};return i.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(i.months,"M").isAfter(e)&&--i.months,i.milliseconds=+e-+t.clone().add(i.months,"M"),i}function x(t,e){var i;return e=Y(e,t),t.isBefore(e)?i=w(t,e):(i=w(e,t),i.milliseconds=-i.milliseconds,i.months=-i.months),i}function k(t,e){return function(i,n){var s,r;return null===n||isNaN(+n)||(u(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),r=i,i=n,n=r),i="string"==typeof i?+i:i,s=Ce.duration(i,n),C(this,s,t),this}}function C(t,e,i,n){var s=e._milliseconds,r=e._days,o=e._months;n=null==n?!0:n,s&&t._d.setTime(+t._d+s*i),r&&be(t,"Date",ve(t,"Date")+r*i),o&&ge(t,ve(t,"Month")+o*i),n&&Ce.updateOffset(t,r||o)}function D(t){return"[object Array]"===Object.prototype.toString.call(t)}function T(t){return"[object Date]"===Object.prototype.toString.call(t)||t instanceof Date}function S(t,e,i){var n,s=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),o=0;for(n=0;s>n;n++)(i&&t[n]!==e[n]||!i&&E(t[n])!==E(e[n]))&&o++;return o+r}function M(t){if(t){var e=t.toLowerCase().replace(/(.)s$/,"$1");t=pi[t]||mi[e]||e}return t}function I(t){var e,i,n={};for(i in t)r(t,i)&&(e=M(i),e&&(n[e]=t[i]));return n}function P(t){var e,i;if(0===t.indexOf("week"))e=7,i="day";else{if(0!==t.indexOf("month"))return;e=12,i="month"}Ce[t]=function(s,r){var o,a,l=Ce._locale[t],u=[];if("number"==typeof s&&(r=s,s=n),a=function(t){var e=Ce().utc().set(i,t);return l.call(Ce._locale,e,s||"")},null!=r)return a(r);for(o=0;e>o;o++)u.push(a(o));return u}}function E(t){var e=+t,i=0;return 0!==e&&isFinite(e)&&(i=e>=0?Math.floor(e):Math.ceil(e)),i}function A(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function N(t,e,i){return de(Ce([t,11,31+e-i]),e,i).week}function j(t){return z(t)?366:365}function z(t){return t%4===0&&t%100!==0||t%400===0}function O(t){var e;t._a&&-2===t._pf.overflow&&(e=t._a[Ae]<0||t._a[Ae]>11?Ae:t._a[Ne]<1||t._a[Ne]>A(t._a[Ee],t._a[Ae])?Ne:t._a[je]<0||t._a[je]>24||24===t._a[je]&&(0!==t._a[ze]||0!==t._a[Oe]||0!==t._a[He])?je:t._a[ze]<0||t._a[ze]>59?ze:t._a[Oe]<0||t._a[Oe]>59?Oe:t._a[He]<0||t._a[He]>999?He:-1,t._pf._overflowDayOfYear&&(Ee>e||e>Ne)&&(e=Ne),t._pf.overflow=e)}function H(t){return null==t._isValid&&(t._isValid=!isNaN(t._d.getTime())&&t._pf.overflow<0&&!t._pf.empty&&!t._pf.invalidMonth&&!t._pf.nullInput&&!t._pf.invalidFormat&&!t._pf.userInvalidated,t._strict&&(t._isValid=t._isValid&&0===t._pf.charsLeftOver&&0===t._pf.unusedTokens.length&&t._pf.bigHour===n)),t._isValid}function W(t){return t?t.toLowerCase().replace("_","-"):t}function F(t){for(var e,i,n,s,r=0;r<t.length;){for(s=W(t[r]).split("-"),e=s.length,i=W(t[r+1]),i=i?i.split("-"):null;e>0;){if(n=L(s.slice(0,e).join("-")))return n;if(i&&i.length>=e&&S(s,i,!0)>=e-1)break;e--}r++}return null}function L(e){var i=null;if(!We[e]&&Le)try{i=Ce.locale(),t("./locale/"+e),Ce.locale(i)}catch(n){}return We[e]}function Y(t,e){var i,n;return e._isUTC?(i=e.clone(),n=(Ce.isMoment(t)||T(t)?+t:+Ce(t))-+i,i._d.setTime(+i._d+n),Ce.updateOffset(i,!1),i):Ce(t).local()}function R(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function U(t){var e,i,n=t.match(qe);for(e=0,i=n.length;i>e;e++)n[e]=_i[n[e]]?_i[n[e]]:R(n[e]);return function(s){var r="";for(e=0;i>e;e++)r+=n[e]instanceof Function?n[e].call(s,t):n[e];return r}}function q(t,e){return t.isValid()?(e=$(e,t.localeData()),gi[e]||(gi[e]=U(e)),gi[e](t)):t.localeData().invalidDate()}function $(t,e){function i(t){return e.longDateFormat(t)||t}var n=5;for($e.lastIndex=0;n>=0&&$e.test(t);)t=t.replace($e,i),$e.lastIndex=0,n-=1;return t}function B(t,e){var i,n=e._strict;switch(t){case"Q":return ii;case"DDDD":return si;case"YYYY":case"GGGG":case"gggg":return n?ri:Ge;case"Y":case"G":case"g":return ai;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return n?oi:Xe;case"S":if(n)return ii;case"SS":if(n)return ni;case"SSS":if(n)return si;case"DDD":return Ve;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Je;case"a":case"A":return e._locale._meridiemParse;case"x":return ti;case"X":return ei;case"Z":case"ZZ":return Ze;case"T":return Qe;case"SSSS":return Ke;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return n?ni:Be;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Be;case"Do":return n?e._locale._ordinalParse:e._locale._ordinalParseLenient;default:return i=new RegExp(ee(te(t.replace("\\","")),"i"))}}function V(t){t=t||"";var e=t.match(Ze)||[],i=e[e.length-1]||[],n=(i+"").match(di)||["-",0,0],s=+(60*n[1])+E(n[2]);return"+"===n[0]?s:-s}function G(t,e,i){var n,s=i._a;switch(t){case"Q":null!=e&&(s[Ae]=3*(E(e)-1));break;case"M":case"MM":null!=e&&(s[Ae]=E(e)-1);break;case"MMM":case"MMMM":n=i._locale.monthsParse(e,t,i._strict),null!=n?s[Ae]=n:i._pf.invalidMonth=e;break;case"D":case"DD":null!=e&&(s[Ne]=E(e));break;case"Do":null!=e&&(s[Ne]=E(parseInt(e.match(/\d{1,2}/)[0],10)));break;case"DDD":case"DDDD":null!=e&&(i._dayOfYear=E(e));break;case"YY":s[Ee]=Ce.parseTwoDigitYear(e);break;case"YYYY":case"YYYYY":case"YYYYYY":s[Ee]=E(e);break;case"a":case"A":i._meridiem=e;break;case"h":case"hh":i._pf.bigHour=!0;case"H":case"HH":s[je]=E(e);break;case"m":case"mm":s[ze]=E(e);break;case"s":case"ss":s[Oe]=E(e);break;case"S":case"SS":case"SSS":case"SSSS":s[He]=E(1e3*("0."+e));break;case"x":i._d=new Date(E(e));break;case"X":i._d=new Date(1e3*parseFloat(e));break;case"Z":case"ZZ":i._useUTC=!0,i._tzm=V(e);break;case"dd":case"ddd":case"dddd":n=i._locale.weekdaysParse(e),null!=n?(i._w=i._w||{},i._w.d=n):i._pf.invalidWeekday=e;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":t=t.substr(0,1);case"gggg":case"GGGG":case"GGGGG":t=t.substr(0,2),e&&(i._w=i._w||{},i._w[t]=E(e));break;case"gg":case"GG":i._w=i._w||{},i._w[t]=Ce.parseTwoDigitYear(e)}}function X(t){var e,i,n,r,o,a,l;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(o=1,a=4,i=s(e.GG,t._a[Ee],de(Ce(),1,4).year),n=s(e.W,1),r=s(e.E,1)):(o=t._locale._week.dow,a=t._locale._week.doy,i=s(e.gg,t._a[Ee],de(Ce(),o,a).year),n=s(e.w,1),null!=e.d?(r=e.d,o>r&&++n):r=null!=e.e?e.e+o:o),l=fe(i,n,r,a,o),t._a[Ee]=l.year,t._dayOfYear=l.dayOfYear}function K(t){var e,i,n,r,o=[];if(!t._d){for(n=Z(t),t._w&&null==t._a[Ne]&&null==t._a[Ae]&&X(t),t._dayOfYear&&(r=s(t._a[Ee],n[Ee]),t._dayOfYear>j(r)&&(t._pf._overflowDayOfYear=!0),i=le(r,0,t._dayOfYear),t._a[Ae]=i.getUTCMonth(),t._a[Ne]=i.getUTCDate()),e=0;3>e&&null==t._a[e];++e)t._a[e]=o[e]=n[e];for(;7>e;e++)t._a[e]=o[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[je]&&0===t._a[ze]&&0===t._a[Oe]&&0===t._a[He]&&(t._nextDay=!0,t._a[je]=0),t._d=(t._useUTC?le:ae).apply(null,o),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[je]=24)}}function J(t){var e;t._d||(e=I(t._i),t._a=[e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],K(t))}function Z(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function Q(t){if(t._f===Ce.ISO_8601)return void ne(t);t._a=[],t._pf.empty=!0;var e,i,s,r,o,a=""+t._i,l=a.length,u=0;for(s=$(t._f,t._locale).match(qe)||[],e=0;e<s.length;e++)r=s[e],i=(a.match(B(r,t))||[])[0],i&&(o=a.substr(0,a.indexOf(i)),o.length>0&&t._pf.unusedInput.push(o),a=a.slice(a.indexOf(i)+i.length),u+=i.length),_i[r]?(i?t._pf.empty=!1:t._pf.unusedTokens.push(r),G(r,i,t)):t._strict&&!i&&t._pf.unusedTokens.push(r);t._pf.charsLeftOver=l-u,a.length>0&&t._pf.unusedInput.push(a),t._pf.bigHour===!0&&t._a[je]<=12&&(t._pf.bigHour=n),t._a[je]=f(t._locale,t._a[je],t._meridiem),K(t),O(t)}function te(t){return t.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,i,n,s){return e||i||n||s})}function ee(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ie(t){var e,i,n,s,r;if(0===t._f.length)return t._pf.invalidFormat=!0,void(t._d=new Date(0/0));for(s=0;s<t._f.length;s++)r=0,e=b({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._pf=o(),e._f=t._f[s],Q(e),H(e)&&(r+=e._pf.charsLeftOver,r+=10*e._pf.unusedTokens.length,e._pf.score=r,(null==n||n>r)&&(n=r,i=e));v(t,i||e)}function ne(t){var e,i,n=t._i,s=li.exec(n);if(s){for(t._pf.iso=!0,e=0,i=hi.length;i>e;e++)if(hi[e][1].exec(n)){t._f=hi[e][0]+(s[6]||" ");break}for(e=0,i=ci.length;i>e;e++)if(ci[e][1].exec(n)){t._f+=ci[e][0];break}n.match(Ze)&&(t._f+="Z"),Q(t)}else t._isValid=!1}function se(t){ne(t),t._isValid===!1&&(delete t._isValid,Ce.createFromInputFallback(t))}function re(t,e){var i,n=[];for(i=0;i<t.length;++i)n.push(e(t[i],i));return n}function oe(t){var e,i=t._i;i===n?t._d=new Date:T(i)?t._d=new Date(+i):null!==(e=Ye.exec(i))?t._d=new Date(+e[1]):"string"==typeof i?se(t):D(i)?(t._a=re(i.slice(0),function(t){return parseInt(t,10)}),K(t)):"object"==typeof i?J(t):"number"==typeof i?t._d=new Date(i):Ce.createFromInputFallback(t)}function ae(t,e,i,n,s,r,o){var a=new Date(t,e,i,n,s,r,o);return 1970>t&&a.setFullYear(t),a}function le(t){var e=new Date(Date.UTC.apply(null,arguments));return 1970>t&&e.setUTCFullYear(t),e}function ue(t,e){if("string"==typeof t)if(isNaN(t)){if(t=e.weekdaysParse(t),"number"!=typeof t)return null}else t=parseInt(t,10);return t}function he(t,e,i,n,s){return s.relativeTime(e||1,!!i,t,n)}function ce(t,e,i){var n=Ce.duration(t).abs(),s=Ie(n.as("s")),r=Ie(n.as("m")),o=Ie(n.as("h")),a=Ie(n.as("d")),l=Ie(n.as("M")),u=Ie(n.as("y")),h=s<vi.s&&["s",s]||1===r&&["m"]||r<vi.m&&["mm",r]||1===o&&["h"]||o<vi.h&&["hh",o]||1===a&&["d"]||a<vi.d&&["dd",a]||1===l&&["M"]||l<vi.M&&["MM",l]||1===u&&["y"]||["yy",u];return h[2]=e,h[3]=+t>0,h[4]=i,he.apply({},h)}function de(t,e,i){var n,s=i-e,r=i-t.day();return r>s&&(r-=7),s-7>r&&(r+=7),n=Ce(t).add(r,"d"),{week:Math.ceil(n.dayOfYear()/7),year:n.year()}}function fe(t,e,i,n,s){var r,o,a=le(t,0,1).getUTCDay();return a=0===a?7:a,i=null!=i?i:s,r=s-a+(a>n?7:0)-(s>a?7:0),o=7*(e-1)+(i-s)+r+1,{year:o>0?t:t-1,dayOfYear:o>0?o:j(t-1)+o}}function pe(t){var e,i=t._i,s=t._f;return t._locale=t._locale||Ce.localeData(t._l),null===i||s===n&&""===i?Ce.invalid({nullInput:!0}):("string"==typeof i&&(t._i=i=t._locale.preparse(i)),Ce.isMoment(i)?new m(i,!0):(s?D(s)?ie(t):Q(t):oe(t),e=new m(t),e._nextDay&&(e.add(1,"d"),e._nextDay=n),e))}function me(t,e){var i,n;if(1===e.length&&D(e[0])&&(e=e[0]),!e.length)return Ce();for(i=e[0],n=1;n<e.length;++n)e[n][t](i)&&(i=e[n]);return i}function ge(t,e){var i;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(i=Math.min(t.date(),A(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,i),t)}function ve(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function be(t,e,i){return"Month"===e?ge(t,i):t._d["set"+(t._isUTC?"UTC":"")+e](i)}function ye(t,e){return function(i){return null!=i?(be(this,t,i),Ce.updateOffset(this,e),this):ve(this,t)}}function _e(t){return 400*t/146097}function we(t){return 146097*t/400}function xe(t){Ce.duration.fn[t]=function(){return this._data[t]}}function ke(t){"undefined"==typeof ender&&(De=Me.moment,Me.moment=t?l("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",Ce):Ce)}for(var Ce,De,Te,Se="2.9.0",Me="undefined"==typeof i||"undefined"!=typeof window&&window!==i.window?this:i,Ie=Math.round,Pe=Object.prototype.hasOwnProperty,Ee=0,Ae=1,Ne=2,je=3,ze=4,Oe=5,He=6,We={},Fe=[],Le="undefined"!=typeof e&&e&&e.exports,Ye=/^\/?Date\((\-?\d+)/i,Re=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Ue=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,qe=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,$e=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Be=/\d\d?/,Ve=/\d{1,3}/,Ge=/\d{1,4}/,Xe=/[+\-]?\d{1,6}/,Ke=/\d+/,Je=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Ze=/Z|[\+\-]\d\d:?\d\d/gi,Qe=/T/i,ti=/[\+\-]?\d+/,ei=/[\+\-]?\d+(\.\d{1,3})?/,ii=/\d/,ni=/\d\d/,si=/\d{3}/,ri=/\d{4}/,oi=/[+-]?\d{6}/,ai=/[+-]?\d+/,li=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ui="YYYY-MM-DDTHH:mm:ssZ",hi=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],ci=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],di=/([\+\-]|\d\d)/gi,fi=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),pi={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},mi={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},gi={},vi={s:45,m:45,h:22,d:26,M:11},bi="DDD w W M D d".split(" "),yi="M D H h m s w W".split(" "),_i={M:function(){return this.month()+1},MMM:function(t){return this.localeData().monthsShort(this,t)},MMMM:function(t){return this.localeData().months(this,t)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(t){return this.localeData().weekdaysMin(this,t)},ddd:function(t){return this.localeData().weekdaysShort(this,t)},dddd:function(t){return this.localeData().weekdays(this,t)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return _(this.year()%100,2)},YYYY:function(){return _(this.year(),4)},YYYYY:function(){return _(this.year(),5)},YYYYYY:function(){var t=this.year(),e=t>=0?"+":"-";return e+_(Math.abs(t),6)},gg:function(){return _(this.weekYear()%100,2)},gggg:function(){return _(this.weekYear(),4)},ggggg:function(){return _(this.weekYear(),5)},GG:function(){return _(this.isoWeekYear()%100,2)},GGGG:function(){return _(this.isoWeekYear(),4)},GGGGG:function(){return _(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return E(this.milliseconds()/100)},SS:function(){return _(E(this.milliseconds()/10),2)},SSS:function(){return _(this.milliseconds(),3)},SSSS:function(){return _(this.milliseconds(),3)},Z:function(){var t=this.utcOffset(),e="+";return 0>t&&(t=-t,e="-"),e+_(E(t/60),2)+":"+_(E(t)%60,2)},ZZ:function(){var t=this.utcOffset(),e="+";return 0>t&&(t=-t,e="-"),e+_(E(t/60),2)+_(E(t)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},x:function(){return this.valueOf()},X:function(){return this.unix()},Q:function(){return this.quarter()}},wi={},xi=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"],ki=!1;bi.length;)Te=bi.pop(),_i[Te+"o"]=c(_i[Te],Te);for(;yi.length;)Te=yi.pop(),_i[Te+Te]=h(_i[Te],2);_i.DDDD=h(_i.DDD,3),v(p.prototype,{set:function(t){var e,i;for(i in t)e=t[i],"function"==typeof e?this[i]=e:this["_"+i]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(t){return this._months[t.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(t){return this._monthsShort[t.month()]},monthsParse:function(t,e,i){var n,s,r;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),n=0;12>n;n++){if(s=Ce.utc([2e3,n]),i&&!this._longMonthsParse[n]&&(this._longMonthsParse[n]=new RegExp("^"+this.months(s,"").replace(".","")+"$","i"),this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(s,"").replace(".","")+"$","i")),i||this._monthsParse[n]||(r="^"+this.months(s,"")+"|^"+this.monthsShort(s,""),this._monthsParse[n]=new RegExp(r.replace(".",""),"i")),i&&"MMMM"===e&&this._longMonthsParse[n].test(t))return n;if(i&&"MMM"===e&&this._shortMonthsParse[n].test(t))return n;if(!i&&this._monthsParse[n].test(t))return n}},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(t){return this._weekdays[t.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(t){return this._weekdaysShort[t.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(t){return this._weekdaysMin[t.day()]},weekdaysParse:function(t){var e,i,n;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;7>e;e++)if(this._weekdaysParse[e]||(i=Ce([2e3,1]).day(e),n="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[e]=new RegExp(n.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e},_longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e},isPM:function(t){return"p"===(t+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(t,e,i){return t>11?i?"pm":"PM":i?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(t,e,i){var n=this._calendar[t];return"function"==typeof n?n.apply(e,[i]):n},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(t,e,i,n){var s=this._relativeTime[i];return"function"==typeof s?s(t,e,i,n):s.replace(/%d/i,t)},pastFuture:function(t,e){var i=this._relativeTime[t>0?"future":"past"];return"function"==typeof i?i(e):i.replace(/%s/i,e)},ordinal:function(t){return this._ordinal.replace("%d",t)},_ordinal:"%d",_ordinalParse:/\d{1,2}/,preparse:function(t){return t},postformat:function(t){return t},week:function(t){return de(t,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},firstDayOfWeek:function(){return this._week.dow},firstDayOfYear:function(){return this._week.doy},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),Ce=function(t,e,i,s){var r;return"boolean"==typeof i&&(s=i,i=n),r={},r._isAMomentObject=!0,r._i=t,r._f=e,r._l=i,r._strict=s,r._isUTC=!1,r._pf=o(),pe(r)},Ce.suppressDeprecationWarnings=!1,Ce.createFromInputFallback=l("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),Ce.min=function(){var t=[].slice.call(arguments,0);return me("isBefore",t)},Ce.max=function(){var t=[].slice.call(arguments,0);return me("isAfter",t)},Ce.utc=function(t,e,i,s){var r;return"boolean"==typeof i&&(s=i,i=n),r={},r._isAMomentObject=!0,r._useUTC=!0,r._isUTC=!0,r._l=i,r._i=t,r._f=e,r._strict=s,r._pf=o(),pe(r).utc()},Ce.unix=function(t){return Ce(1e3*t)},Ce.duration=function(t,e){var i,n,s,o,a=t,l=null;return Ce.isDuration(t)?a={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(a={},e?a[e]=t:a.milliseconds=t):(l=Re.exec(t))?(i="-"===l[1]?-1:1,a={y:0,d:E(l[Ne])*i,h:E(l[je])*i,m:E(l[ze])*i,s:E(l[Oe])*i,ms:E(l[He])*i}):(l=Ue.exec(t))?(i="-"===l[1]?-1:1,s=function(t){var e=t&&parseFloat(t.replace(",","."));return(isNaN(e)?0:e)*i},a={y:s(l[2]),M:s(l[3]),d:s(l[4]),h:s(l[5]),m:s(l[6]),s:s(l[7]),w:s(l[8])}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(o=x(Ce(a.from),Ce(a.to)),a={},a.ms=o.milliseconds,a.M=o.months),n=new g(a),Ce.isDuration(t)&&r(t,"_locale")&&(n._locale=t._locale),n},Ce.version=Se,Ce.defaultFormat=ui,Ce.ISO_8601=function(){},Ce.momentProperties=Fe,Ce.updateOffset=function(){},Ce.relativeTimeThreshold=function(t,e){return vi[t]===n?!1:e===n?vi[t]:(vi[t]=e,!0)},Ce.lang=l("moment.lang is deprecated. Use moment.locale instead.",function(t,e){return Ce.locale(t,e)}),Ce.locale=function(t,e){var i;return t&&(i="undefined"!=typeof e?Ce.defineLocale(t,e):Ce.localeData(t),i&&(Ce.duration._locale=Ce._locale=i)),Ce._locale._abbr},Ce.defineLocale=function(t,e){return null!==e?(e.abbr=t,We[t]||(We[t]=new p),We[t].set(e),Ce.locale(t),We[t]):(delete We[t],null)},Ce.langData=l("moment.langData is deprecated. Use moment.localeData instead.",function(t){return Ce.localeData(t)}),Ce.localeData=function(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Ce._locale;if(!D(t)){if(e=L(t))return e;t=[t]}return F(t)},Ce.isMoment=function(t){return t instanceof m||null!=t&&r(t,"_isAMomentObject")},Ce.isDuration=function(t){return t instanceof g};for(Te=xi.length-1;Te>=0;--Te)P(xi[Te]);Ce.normalizeUnits=function(t){return M(t)},Ce.invalid=function(t){var e=Ce.utc(0/0);return null!=t?v(e._pf,t):e._pf.userInvalidated=!0,e},Ce.parseZone=function(){return Ce.apply(null,arguments).parseZone()},Ce.parseTwoDigitYear=function(t){return E(t)+(E(t)>68?1900:2e3)},Ce.isDate=T,v(Ce.fn=m.prototype,{clone:function(){return Ce(this)},valueOf:function(){return+this._d-6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var t=Ce(this).utc();return 0<t.year()&&t.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():q(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):q(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var t=this;return[t.year(),t.month(),t.date(),t.hours(),t.minutes(),t.seconds(),t.milliseconds()]},isValid:function(){return H(this)},isDSTShifted:function(){return this._a?this.isValid()&&S(this._a,(this._isUTC?Ce.utc(this._a):Ce(this._a)).toArray())>0:!1},parsingFlags:function(){return v({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(t){return this.utcOffset(0,t)},local:function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(this._dateUtcOffset(),"m")),this},format:function(t){var e=q(this,t||Ce.defaultFormat);return this.localeData().postformat(e)},add:k(1,"add"),subtract:k(-1,"subtract"),diff:function(t,e,i){var n,s,r=Y(t,this),o=6e4*(r.utcOffset()-this.utcOffset());return e=M(e),"year"===e||"month"===e||"quarter"===e?(s=d(this,r),"quarter"===e?s/=3:"year"===e&&(s/=12)):(n=this-r,s="second"===e?n/1e3:"minute"===e?n/6e4:"hour"===e?n/36e5:"day"===e?(n-o)/864e5:"week"===e?(n-o)/6048e5:n),i?s:y(s)},from:function(t,e){return Ce.duration({to:this,from:t}).locale(this.locale()).humanize(!e)},fromNow:function(t){return this.from(Ce(),t)},calendar:function(t){var e=t||Ce(),i=Y(e,this).startOf("day"),n=this.diff(i,"days",!0),s=-6>n?"sameElse":-1>n?"lastWeek":0>n?"lastDay":1>n?"sameDay":2>n?"nextDay":7>n?"nextWeek":"sameElse";return this.format(this.localeData().calendar(s,this,Ce(e)))},isLeapYear:function(){return z(this.year())},isDST:function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},day:function(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=ue(t,this.localeData()),this.add(t-e,"d")):e},month:ye("Month",!0),startOf:function(t){switch(t=M(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t?this.weekday(0):"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(t){return t=M(t),t===n||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")},isAfter:function(t,e){var i;return e=M("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=Ce.isMoment(t)?t:Ce(t),+this>+t):(i=Ce.isMoment(t)?+t:+Ce(t),i<+this.clone().startOf(e))},isBefore:function(t,e){var i;return e=M("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=Ce.isMoment(t)?t:Ce(t),+t>+this):(i=Ce.isMoment(t)?+t:+Ce(t),+this.clone().endOf(e)<i)},isBetween:function(t,e,i){return this.isAfter(t,i)&&this.isBefore(e,i)},isSame:function(t,e){var i;return e=M(e||"millisecond"),"millisecond"===e?(t=Ce.isMoment(t)?t:Ce(t),+this===+t):(i=+Ce(t),+this.clone().startOf(e)<=i&&i<=+this.clone().endOf(e))},min:l("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(t){return t=Ce.apply(null,arguments),this>t?this:t}),max:l("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(t){return t=Ce.apply(null,arguments),t>this?this:t}),zone:l("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}),utcOffset:function(t,e){var i,n=this._offset||0;return null!=t?("string"==typeof t&&(t=V(t)),Math.abs(t)<16&&(t=60*t),!this._isUTC&&e&&(i=this._dateUtcOffset()),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),n!==t&&(!e||this._changeInProgress?C(this,Ce.duration(t-n,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,Ce.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?n:this._dateUtcOffset()},isLocal:function(){return!this._isUTC},isUtcOffset:function(){return this._isUTC},isUtc:function(){return this._isUTC&&0===this._offset},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(V(this._i)),this},hasAlignedHourOffset:function(t){return t=t?Ce(t).utcOffset():0,(this.utcOffset()-t)%60===0},daysInMonth:function(){return A(this.year(),this.month())},dayOfYear:function(t){var e=Ie((Ce(this).startOf("day")-Ce(this).startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},quarter:function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},weekYear:function(t){var e=de(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")},isoWeekYear:function(t){var e=de(this,1,4).year;return null==t?e:this.add(t-e,"y")},week:function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},isoWeek:function(t){var e=de(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},weekday:function(t){var e=(this.day()+7-this.localeData()._week.dow)%7;
return null==t?e:this.add(t-e,"d")},isoWeekday:function(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)},isoWeeksInYear:function(){return N(this.year(),1,4)},weeksInYear:function(){var t=this.localeData()._week;return N(this.year(),t.dow,t.doy)},get:function(t){return t=M(t),this[t]()},set:function(t,e){var i;if("object"==typeof t)for(i in t)this.set(i,t[i]);else t=M(t),"function"==typeof this[t]&&this[t](e);return this},locale:function(t){var e;return t===n?this._locale._abbr:(e=Ce.localeData(t),null!=e&&(this._locale=e),this)},lang:l("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return t===n?this.localeData():this.locale(t)}),localeData:function(){return this._locale},_dateUtcOffset:function(){return 15*-Math.round(this._d.getTimezoneOffset()/15)}}),Ce.fn.millisecond=Ce.fn.milliseconds=ye("Milliseconds",!1),Ce.fn.second=Ce.fn.seconds=ye("Seconds",!1),Ce.fn.minute=Ce.fn.minutes=ye("Minutes",!1),Ce.fn.hour=Ce.fn.hours=ye("Hours",!0),Ce.fn.date=ye("Date",!0),Ce.fn.dates=l("dates accessor is deprecated. Use date instead.",ye("Date",!0)),Ce.fn.year=ye("FullYear",!0),Ce.fn.years=l("years accessor is deprecated. Use year instead.",ye("FullYear",!0)),Ce.fn.days=Ce.fn.day,Ce.fn.months=Ce.fn.month,Ce.fn.weeks=Ce.fn.week,Ce.fn.isoWeeks=Ce.fn.isoWeek,Ce.fn.quarters=Ce.fn.quarter,Ce.fn.toJSON=Ce.fn.toISOString,Ce.fn.isUTC=Ce.fn.isUtc,v(Ce.duration.fn=g.prototype,{_bubble:function(){var t,e,i,n=this._milliseconds,s=this._days,r=this._months,o=this._data,a=0;o.milliseconds=n%1e3,t=y(n/1e3),o.seconds=t%60,e=y(t/60),o.minutes=e%60,i=y(e/60),o.hours=i%24,s+=y(i/24),a=y(_e(s)),s-=y(we(a)),r+=y(s/30),s%=30,a+=y(r/12),r%=12,o.days=s,o.months=r,o.years=a},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return y(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*E(this._months/12)},humanize:function(t){var e=ce(this,!t,this.localeData());return t&&(e=this.localeData().pastFuture(+this,e)),this.localeData().postformat(e)},add:function(t,e){var i=Ce.duration(t,e);return this._milliseconds+=i._milliseconds,this._days+=i._days,this._months+=i._months,this._bubble(),this},subtract:function(t,e){var i=Ce.duration(t,e);return this._milliseconds-=i._milliseconds,this._days-=i._days,this._months-=i._months,this._bubble(),this},get:function(t){return t=M(t),this[t.toLowerCase()+"s"]()},as:function(t){var e,i;if(t=M(t),"month"===t||"year"===t)return e=this._days+this._milliseconds/864e5,i=this._months+12*_e(e),"month"===t?i:i/12;switch(e=this._days+Math.round(we(this._months/12)),t){case"week":return e/7+this._milliseconds/6048e5;case"day":return e+this._milliseconds/864e5;case"hour":return 24*e+this._milliseconds/36e5;case"minute":return 24*e*60+this._milliseconds/6e4;case"second":return 24*e*60*60+this._milliseconds/1e3;case"millisecond":return Math.floor(24*e*60*60*1e3)+this._milliseconds;default:throw new Error("Unknown unit "+t)}},lang:Ce.fn.lang,locale:Ce.fn.locale,toIsoString:l("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var t=Math.abs(this.years()),e=Math.abs(this.months()),i=Math.abs(this.days()),n=Math.abs(this.hours()),s=Math.abs(this.minutes()),r=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(t?t+"Y":"")+(e?e+"M":"")+(i?i+"D":"")+(n||s||r?"T":"")+(n?n+"H":"")+(s?s+"M":"")+(r?r+"S":""):"P0D"},localeData:function(){return this._locale},toJSON:function(){return this.toISOString()}}),Ce.duration.fn.toString=Ce.duration.fn.toISOString;for(Te in fi)r(fi,Te)&&xe(Te.toLowerCase());Ce.duration.fn.asMilliseconds=function(){return this.as("ms")},Ce.duration.fn.asSeconds=function(){return this.as("s")},Ce.duration.fn.asMinutes=function(){return this.as("m")},Ce.duration.fn.asHours=function(){return this.as("h")},Ce.duration.fn.asDays=function(){return this.as("d")},Ce.duration.fn.asWeeks=function(){return this.as("weeks")},Ce.duration.fn.asMonths=function(){return this.as("M")},Ce.duration.fn.asYears=function(){return this.as("y")},Ce.locale("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,i=1===E(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+i}}),Le?e.exports=Ce:"function"==typeof define&&define.amd?(define(function(t,e,i){return i.config&&i.config()&&i.config().noGlobal===!0&&(Me.moment=De),Ce}),ke(!0)):ke()}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],"/Users/zhihao/backbone/src/src/scripts/collections/thresholdCollectionSingleton.js":[function(t,e){var i=t("jquery"),n=t("backbone");n.$=i,n.LocalStorage=t("backbone.localstorage");var s=t("lodash"),r=t("../models/thresholdModel"),o=t("../utils/colorClassNames"),a=n.Collection.extend({model:r,localStorage:new n.LocalStorage("thresholds"),initialize:function(){},getAllDayThreshold:function(){return s.find(this.models,function(t){return"Anytime"===t.get("timeArray")[0]})},exportAllModelToString:function(){var t=[];return s.each(this.models,function(e){t.push(e.getStringFromAttrs())}),t.join(",")},importAllModelFromString:function(t){var e=this;s.each(s.clone(this.models),function(t){t.destroy(),e.remove(t)});var i=t.split(",");s.each(i,function(t){t&&e.add(new r(t))})},assignColors:function(){s.each(this.models,function(t,e){var i=o[e%o.length];t.set("colorClass",i),console.log(t.get("colorClass"))})}});e.exports=new a},{"../models/thresholdModel":"/Users/zhihao/backbone/src/src/scripts/models/thresholdModel.js","../utils/colorClassNames":"/Users/zhihao/backbone/src/src/scripts/utils/colorClassNames.js",backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js","backbone.localstorage":"/Users/zhihao/backbone/src/node_modules/backbone.localstorage/backbone.localStorage.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js",lodash:"/Users/zhihao/backbone/src/node_modules/lodash/dist/lodash.js"}],"/Users/zhihao/backbone/src/src/scripts/index.js":[function(t){var e=t("jquery");t("jquery-ui");var i=t("backbone");i.$=e;{var n=t("./views/appView"),s=(new n,t("./views/chartView")),r=(new s,t("./views/pipeView"));new r}},{"./views/appView":"/Users/zhihao/backbone/src/src/scripts/views/appView.js","./views/chartView":"/Users/zhihao/backbone/src/src/scripts/views/chartView.js","./views/pipeView":"/Users/zhihao/backbone/src/src/scripts/views/pipeView.js",backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js","jquery-ui":"/Users/zhihao/backbone/src/node_modules/jquery-ui/jquery-ui.js"}],"/Users/zhihao/backbone/src/src/scripts/models/thresholdModel.js":[function(t,e){var i=t("jquery"),n=t("backbone");n.$=i;var s=(t("lodash"),t("../../templates/thresholdString.hbs")),r=t("moment"),o=n.Model.extend({"default":{},initialize:function(t){t&&this.setAttrsFromString(t)},update:function(t){this.setAttrsFromString(t)},getStringFromAttrs:function(){var t=this.get("timeArray")[0];return"Anytime"===t?" "+s({startTime:void 0,endTime:void 0,operation:this.get("operator"),warningValue:null==this.get("thresholdValues")[0]?"X":this.get("thresholdValues")[0],errorValue:null==this.get("thresholdValues")[1]?"X":this.get("thresholdValues")[1],criticalValue:null==this.get("thresholdValues")[2]?"X":this.get("thresholdValues")[2]}):s({startTime:this.get("timeArray")[0],endTime:this.get("timeArray")[1],operation:this.get("operator"),warningValue:null==this.get("thresholdValues")[0]?"X":this.get("thresholdValues")[0],errorValue:null==this.get("thresholdValues")[1]?"X":this.get("thresholdValues")[1],criticalValue:null==this.get("thresholdValues")[2]?"X":this.get("thresholdValues")[2]})},setAttrsFromString:function(t){function e(t){var e=t.split(":"),i=parseInt(e[1]),n=parseInt(e[0]),s=15*parseInt((i+7.5)/15)%60,r=i>52?23===n?0:++n:n;return r+":"+s}var i,n=/\((.*)\)/g.exec(t);n?(i=n[1].split(" "),i[0]=r("2000-01-01 "+e(i[0])).format("HH:mm"),i[1]=r("2000-01-01 "+e(i[1])).format("HH:mm"),i[0]===i[1]&&(i=["Anytime",void 0])):i=["Anytime",void 0];for(var s=/[<>=]/g.exec(t)[0],o=/[<>=]\s?(.*)/g.exec(t)[1].split(" "),a=0;3>a;a++){var l=Number(o[a]);o[a]=isNaN(l)?void 0:l}this.set({timeArray:i}),this.set({operator:s}),this.set({thresholdValues:o})}});e.exports=o},{"../../templates/thresholdString.hbs":"/Users/zhihao/backbone/src/src/templates/thresholdString.hbs",backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js",lodash:"/Users/zhihao/backbone/src/node_modules/lodash/dist/lodash.js",moment:"/Users/zhihao/backbone/src/node_modules/moment/moment.js"}],"/Users/zhihao/backbone/src/src/scripts/utils/colorClassNames.js":[function(t,e){e.exports=["purple","light-blue","green","blue","magenta","bright-green"]},{}],"/Users/zhihao/backbone/src/src/scripts/utils/globalEvent.js":[function(t,e){var i=t("lodash"),n=t("jquery"),s=t("backbone");s.$=n;var r=i.extend({},s.Events);n(window).on("click",function(){r.trigger("allExitEdit"),r.trigger("exitAdding")}),n(window).keyup(function(t){27==t.keyCode&&(r.trigger("allExitEdit"),r.trigger("exitAdding"))}),e.exports=r},{backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js",lodash:"/Users/zhihao/backbone/src/node_modules/lodash/dist/lodash.js"}],"/Users/zhihao/backbone/src/src/scripts/utils/timeOptions.js":[function(t,e){for(var i=t("moment"),n=i("2000-01-01 00:00:00"),s=["Anytime"],r=[n.format("HH:mm")],o=0;95>o;o++)r.push(n.add(15,"minutes").format("HH:mm"));s=s.concat(r),e.exports={startTimeOptions:s,endTimeOptions:r}},{moment:"/Users/zhihao/backbone/src/node_modules/moment/moment.js"}],"/Users/zhihao/backbone/src/src/scripts/views/addThresholdView.js":[function(t,e){var i=t("jquery"),n=t("backbone");n.$=i;var s=(t("lodash"),t("../utils/timeOptions")),r=t("../../templates/newThreshold.hbs"),o=t("../collections/thresholdCollectionSingleton"),a=t("../utils/globalEvent"),l=t("./thresholdView"),u=l.extend({initialize:function(){var t=this;a.on("exitAdding",function(){t.exitEditing()})},tagName:"tr",template:r,id:"new-threshold",events:{"change .start-time-selection":"expandStartTimeOptionField",click:"noop"},render:function(){return this.$el.html(this.template(s)),this},exitEditing:function(){if("non-active"!==this.mode){var t=this.parseViewToString();t?(o.create(t),console.info("create new threshold")):console.info("did not create a new one, exit editing"),this.$el.empty(),i("#add-new-threshold").show(),this.mode="non-active"}}});e.exports=u},{"../../templates/newThreshold.hbs":"/Users/zhihao/backbone/src/src/templates/newThreshold.hbs","../collections/thresholdCollectionSingleton":"/Users/zhihao/backbone/src/src/scripts/collections/thresholdCollectionSingleton.js","../utils/globalEvent":"/Users/zhihao/backbone/src/src/scripts/utils/globalEvent.js","../utils/timeOptions":"/Users/zhihao/backbone/src/src/scripts/utils/timeOptions.js","./thresholdView":"/Users/zhihao/backbone/src/src/scripts/views/thresholdView.js",backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js",lodash:"/Users/zhihao/backbone/src/node_modules/lodash/dist/lodash.js"}],"/Users/zhihao/backbone/src/src/scripts/views/appView.js":[function(t,e){var i=t("jquery"),n=t("backbone");n.$=i;var s=(t("lodash"),t("../models/thresholdModel")),r=new s,o=t("../collections/thresholdCollectionSingleton"),a=t("./thresholdView"),l=t("./addThresholdView"),u=t("../utils/globalEvent"),h=n.View.extend({initialize:function(){this.listenTo(o,"add",this.addOne),this.listenTo(o,"add remove",function(){o.assignColors(),u.trigger("timeBarShouldChange")})},el:i("#threshold-table"),events:{"click #add-new-threshold":"showAddNew","click #threshold-table":"noop"},noop:function(t){t.stopPropagation()},showAddNew:function(t){u.trigger("allExitEdit"),console.log("showAddNew"),t.stopPropagation();var e=this.addThresholdView||new l({model:r});this.addThresholdView=e,e.$el.addClass("editing"),this.addThresholdView.mode="active",this.$el.find("#new-threshold").replaceWith(e.render({}).el),this.$el.find("#add-new-threshold").hide()},addOne:function(t){var e=new a({model:t});this.$el.find("tbody").append(e.render().viewModeRender().el)}});e.exports=h},{"../collections/thresholdCollectionSingleton":"/Users/zhihao/backbone/src/src/scripts/collections/thresholdCollectionSingleton.js","../models/thresholdModel":"/Users/zhihao/backbone/src/src/scripts/models/thresholdModel.js","../utils/globalEvent":"/Users/zhihao/backbone/src/src/scripts/utils/globalEvent.js","./addThresholdView":"/Users/zhihao/backbone/src/src/scripts/views/addThresholdView.js","./thresholdView":"/Users/zhihao/backbone/src/src/scripts/views/thresholdView.js",backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js",lodash:"/Users/zhihao/backbone/src/node_modules/lodash/dist/lodash.js"}],"/Users/zhihao/backbone/src/src/scripts/views/chartView.js":[function(t,e){var i=t("jquery"),n=t("backbone");n.$=i;var s=t("lodash"),r=t("moment"),o=t("../../templates/chart.hbs"),a=t("../collections/thresholdCollectionSingleton"),l=t("../utils/globalEvent"),u=n.View.extend({initialize:function(){var t=this;this.render(),this.listenTo(l,"timeBarShouldChange",function(){var e=s.map(a.models,function(t){return{startTimeStr:t.get("timeArray")[0],endTimeStr:t.get("timeArray")[1],colorClass:t.get("colorClass")}});t.renderAllDayBar(e),t.renderFifteenMinsBar(e)})},el:i(".chart"),template:o,renderAllDayBar:function(t){var e=s.find(t,function(t){return"Anytime"===t.startTimeStr});return e?this.$el.find(".all-day-bar").attr("class",e.colorClass).addClass("all-day-bar"):this.$el.find(".all-day-bar").attr("class","grey").addClass("all-day-bar")},renderFifteenMinsBar:function(t){function e(t){var e=r("2000-01-01 "+t);return(60*e.hours()+e.minutes())/15}var n=this,o=s.filter(t,function(t){return"Anytime"!==t.startTimeStr}),a=n.$el.find(".fifteen-mins").attr("class","fifteen-mins");s.each(o.reverse(),function(t){var n=e(t.startTimeStr),s=e(t.endTimeStr);if(s>n)for(var r=n;s>r;r++)i(a[r]).attr("class",t.colorClass).addClass("fifteen-mins");else if(n>s){for(var o=96,r=n;o>r;r++)i(a[r]).attr("class",t.colorClass).addClass("fifteen-mins");for(var r=0;s>r;r++)i(a[r]).attr("class",t.colorClass).addClass("fifteen-mins")}})},render:function(){return this.$el.html(this.template()),this}});e.exports=u},{"../../templates/chart.hbs":"/Users/zhihao/backbone/src/src/templates/chart.hbs","../collections/thresholdCollectionSingleton":"/Users/zhihao/backbone/src/src/scripts/collections/thresholdCollectionSingleton.js","../utils/globalEvent":"/Users/zhihao/backbone/src/src/scripts/utils/globalEvent.js",backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js",lodash:"/Users/zhihao/backbone/src/node_modules/lodash/dist/lodash.js",moment:"/Users/zhihao/backbone/src/node_modules/moment/moment.js"}],"/Users/zhihao/backbone/src/src/scripts/views/pipeView.js":[function(t,e){var i=t("jquery"),n=t("backbone");n.$=i;var s=(t("lodash"),t("../collections/thresholdCollectionSingleton")),r=t("../../templates/pipe.hbs");Pipe=n.View.extend({initialize:function(){this.render()},events:{"click #import-button":"parseImportString","click #export-button":"exportToString"},template:r,el:i(".pipe"),parseImportString:function(){var t=this.$el.find("#import-box").val()||"";try{s.importAllModelFromString(t)}catch(e){alert("import data is not validate")}},exportToString:function(){this.$el.find("#export-box").val(s.exportAllModelToString())},render:function(){return this.$el.html(this.template()),this}}),e.exports=Pipe},{"../../templates/pipe.hbs":"/Users/zhihao/backbone/src/src/templates/pipe.hbs","../collections/thresholdCollectionSingleton":"/Users/zhihao/backbone/src/src/scripts/collections/thresholdCollectionSingleton.js",backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js",lodash:"/Users/zhihao/backbone/src/node_modules/lodash/dist/lodash.js"}],"/Users/zhihao/backbone/src/src/scripts/views/thresholdView.js":[function(t,e){var i=t("jquery"),n=t("backbone");n.$=i;var s=t("../utils/timeOptions"),r=t("../../templates/newThreshold.hbs"),o=t("../../templates/thresholdString.hbs"),a=t("../collections/thresholdCollectionSingleton"),l=t("../utils/globalEvent"),u=n.View.extend({initialize:function(){var t=this;this.listenTo(l,"allExitEdit",function(){t.exitEditing()}),this.listenTo(l,"switchMode",function(e){e[0]===t.cid?(console.log("switchMode, me"),l.trigger("exitAdding"),t.intoEditing(e[1])):(console.log("switchMode, not me"),t.exitEditing())}),this.listenTo(this.model,"change:timeArray",function(){l.trigger("timeBarShouldChange")}),this.listenTo(this.model,"change:colorClass",this.updateColorClass),this.listenTo(this.model,"destroy",this.removeView)},tagName:"tr",template:r,className:"threshold",events:{"change .start-time-selection":"expandStartTimeOptionField",click:"_switchModeEvent","click .remove":"removeThreshold"},updateColorClass:function(t,e){this.$el.find(".color").attr("class",e).addClass("color")},removeView:function(){this.undelegateEvents(),this.remove()},removeThreshold:function(){console.log("remove"),this.model.destroy()},_switchModeEvent:function(t){return"edit"===this.mode?void t.stopPropagation():(l.trigger("switchMode",[this.cid,t]),void t.stopPropagation())},_attachModelToView:function(){if(!this.model)return this.$el.attr("id","new-threshold"),this.$el.addClass("editing"),this.mode="creating",this;var t=this.model.toJSON();t.timeArray[1]?(this.$el.find("select[name=start-time]").val(t.timeArray[0]).parents(".start-time-td").attr("colspan",1),this.$el.find("select[name=end-time]").val(t.timeArray[1]).parents(".end-time-td").show()):(this.$el.find("select[name=start-time]").val("Anytime").parents(".start-time-td").attr("colspan",2),this.$el.find("select[name=end-time]").parents(".end-time-td").hide()),this.$el.find("select[name=operator]").val(t.operator),this.$el.find("input.thresholdValue[name=warning]").val(t.thresholdValues[0]),this.$el.find("input.thresholdValue[name=error]").val(t.thresholdValues[1]),this.$el.find("input.thresholdValue[name=critical]").val(t.thresholdValues[2])},render:function(){return this.$el.html(this.template(s)),this._attachModelToView(),this},noop:function(t){t.stopPropagation()},intoEditing:function(t){console.log("into edit"),"edit"!==this.mode&&this.editModeRender(t)},expandStartTimeOptionField:function(t){"Anytime"===i(t.target).val()?(i(t.target).parents("tr").find(".end-time-td").hide(),i(t.target).parents("td").attr("colspan",2)):(i(t.target).parents("tr").find(".end-time-td").show(),i(t.target).parents("td").attr("colspan",1))},editModeRender:function(t){this.$el.hide(),this.mode="edit",this.$el.addClass("editing"),this.$el.find(".hide").removeClass("hide");var e=t.target;return this.$el.toggle("down"),i(t.target).is("select")||i(t.target).is("input")?this.$el.find(e)[0].focus():this.$el.find("select")[0].focus(),this},viewModeRender:function(){this.$el.hide(),this.mode="view",this.$el.removeClass("editing");var t=this.model.get("thresholdValues");return"undefined"==typeof t[1]&&this.$el.find(".error-wrapper").addClass("hide"),"undefined"==typeof t[2]&&this.$el.find(".critical-wrapper").addClass("hide"),this.$el.toggle("down"),this},parseViewToString:function(){function t(){if(""!==n&&void 0===s)return!1;var t=a.getAllDayThreshold();return t&&t!=i.model&&""===n?!1:n===s?!1:isNaN(l)&&isNaN(u)&&isNaN(h)?!1:r?(console.log("validate pass"),!0):!1}function e(t){return""===t.trim()?void 0:isNaN(Number(t))?void 0:Number(t)}var i=this,n=this.$el.find("select[name=start-time]").val();n="Anytime"===n?"":n;var s=this.$el.find("select[name=end-time]").val();s=""===n?void 0:s;var r=this.$el.find("select[name=operator]").val(),l=this.$el.find("input[name=warning]").val();l=e(l);var u=this.$el.find("input[name=error]").val();u=e(u);var h=this.$el.find("input[name=critical]").val();if(h=e(h),t()){var c=o({startTime:n,endTime:s,operation:r,warningValue:isNaN(l)?"X":l,errorValue:isNaN(u)?"X":u,criticalValue:isNaN(h)?"X":h});return c}return void 0},exitEditing:function(){if("view"!==this.mode){this.$el.find(":focus").blur(),console.info(this.cid,"exit edit");var t=this.parseViewToString();t?(this.model.update(t),console.info(this.cid,"update model")):console.info("did not update a new one, roll back, exit editing"),this._attachModelToView(),this.viewModeRender()}}});e.exports=u},{"../../templates/newThreshold.hbs":"/Users/zhihao/backbone/src/src/templates/newThreshold.hbs","../../templates/thresholdString.hbs":"/Users/zhihao/backbone/src/src/templates/thresholdString.hbs","../collections/thresholdCollectionSingleton":"/Users/zhihao/backbone/src/src/scripts/collections/thresholdCollectionSingleton.js","../utils/globalEvent":"/Users/zhihao/backbone/src/src/scripts/utils/globalEvent.js","../utils/timeOptions":"/Users/zhihao/backbone/src/src/scripts/utils/timeOptions.js",backbone:"/Users/zhihao/backbone/src/node_modules/backbone/backbone.js",jquery:"/Users/zhihao/backbone/src/node_modules/jquery/dist/jquery.js"}],"/Users/zhihao/backbone/src/src/templates/chart.hbs":[function(t,e){var i=t("hbsfy/runtime");e.exports=i.template({compiler:[6,">= 2.0.0-beta.1"],main:function(){return'<div class="all-day-bar grey"></div>\n<div class="hour-axis">\n    <div class="two-hours">02:00</div>\n    <div class="two-hours">04:00</div>\n    <div class="two-hours">06:00</div>\n    <div class="two-hours">08:00</div>\n    <div class="two-hours">10:00</div>\n    <div class="two-hours">12:00</div>\n    <div class="two-hours">14:00</div>\n    <div class="two-hours">16:00</div>\n    <div class="two-hours">18:00</div>\n    <div class="two-hours">20:00</div>\n    <div class="two-hours">22:00</div>\n    <div class="two-hours">24:00</div>\n</div>\n<div class="min-axis">\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n    <div class="fifteen-mins"></div>\n</div>\n'},useData:!0})},{"hbsfy/runtime":"/Users/zhihao/backbone/src/node_modules/hbsfy/runtime.js"}],"/Users/zhihao/backbone/src/src/templates/newThreshold.hbs":[function(t,e){var i=t("hbsfy/runtime");e.exports=i.template({1:function(t){var e=this.lambda,i=this.escapeExpression;return'          <option value="'+i(e(t,t))+'">'+i(e(t,t))+"</option>\n"},compiler:[6,">= 2.0.0-beta.1"],main:function(t,e,i,n){var s,r='<td class="color">\n</td>\n<td class="start-time-td" colspan="2">\n    <select name="start-time" class="start-time-selection">\n';return s=e.each.call(t,null!=t?t.startTimeOptions:t,{name:"each",hash:{},fn:this.program(1,n),inverse:this.noop,data:n}),null!=s&&(r+=s),r+='    </select>\n</td>\n<td class="end-time-td" style="display: none">\n    <select name="end-time" class="end-time-selection">\n',s=e.each.call(t,null!=t?t.endTimeOptions:t,{name:"each",hash:{},fn:this.program(1,n),inverse:this.noop,data:n}),null!=s&&(r+=s),r+'    </select>\n</td>\n<td class="operation-td"><span class="normal-weight">when the</span><span class="bold-weight"> ErrorSystem</span>\n    <select name="operator">\n        <option value="=">is equal to (=)</option>\n        <option value=">">is greater than (>)</option>\n        <option value="<">is less than (<)</option>\n    </select>\n</td>\n<td class="threshold-value-td">\n    <div class="warning-wrapper">\n        <input type="text" class="thresholdValue" name="warning">\n        <span class="severity warning">trigger a warning <i class="icon-attention"></i></span>\n    </div>\n    <div class="error-wrapper">\n        <input type="text" class="thresholdValue" name="error">\n        <span class="severity error">trigger an error <i class="icon-attention"></i></span>\n    </div>\n    <div class="critical-wrapper">\n        <input type="text" class="thresholdValue" name="critical">\n        <span class="severity critical">trigger a critical <i class="icon-fire"></i></span>\n    </div>\n</td>\n<td class="threshold-remove-td">\n    <div class="remove">\n        <i class="icon-trash"></i>\n    </div>\n</td>\n'},useData:!0})},{"hbsfy/runtime":"/Users/zhihao/backbone/src/node_modules/hbsfy/runtime.js"}],"/Users/zhihao/backbone/src/src/templates/pipe.hbs":[function(t,e){var i=t("hbsfy/runtime");e.exports=i.template({compiler:[6,">= 2.0.0-beta.1"],main:function(){return'<div class="import-wrapper">\n    <textarea id="import-box" placeholder="import string to models"></textarea>\n    <button id="import-button">Import</button>\n</div>\n\n<div class="export-wrapper">\n    <textarea id="export-box" placeholder="export models to string"></textarea>\n    <button id="export-button">Export</button>\n</div>\n'},useData:!0})},{"hbsfy/runtime":"/Users/zhihao/backbone/src/node_modules/hbsfy/runtime.js"}],"/Users/zhihao/backbone/src/src/templates/thresholdString.hbs":[function(t,e){var i=t("hbsfy/runtime");e.exports=i.template({1:function(t){var e,i=this.lambda,n="(";return e=i(null!=t?t.startTime:t,t),null!=e&&(n+=e),n+=" ",e=i(null!=t?t.endTime:t,t),null!=e&&(n+=e),n+=") ",e=i(null!=t?t.operation:t,t),null!=e&&(n+=e),n+=" ",e=i(null!=t?t.warningValue:t,t),null!=e&&(n+=e),n+=" ",e=i(null!=t?t.errorValue:t,t),null!=e&&(n+=e),n+=" ",e=i(null!=t?t.criticalValue:t,t),null!=e&&(n+=e),n},3:function(t){var e,i=this.lambda,n="";return e=i(null!=t?t.operation:t,t),null!=e&&(n+=e),n+=" ",e=i(null!=t?t.warningValue:t,t),null!=e&&(n+=e),n+=" ",e=i(null!=t?t.errorValue:t,t),null!=e&&(n+=e),n+=" ",e=i(null!=t?t.criticalValue:t,t),null!=e&&(n+=e),n},compiler:[6,">= 2.0.0-beta.1"],main:function(t,e,i,n){var s,r="";return s=e["if"].call(t,null!=t?t.startTime:t,{name:"if",hash:{},fn:this.program(1,n),inverse:this.program(3,n),data:n}),null!=s&&(r+=s),r},useData:!0})},{"hbsfy/runtime":"/Users/zhihao/backbone/src/node_modules/hbsfy/runtime.js"}]},{},["/Users/zhihao/backbone/src/src/scripts/index.js"]);
//# sourceMappingURL=data:application/json;base64,